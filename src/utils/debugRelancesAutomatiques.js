/**
 * @fileoverview Utilitaires de diagnostic pour les relances automatiques
 * Permet de d√©bugger et tester le syst√®me de relances automatiques
 * 
 * @author TourCraft Team
 * @since 2025
 */

import { relancesAutomatiquesService, RELANCE_TYPES } from '@/services/relancesAutomatiquesService';
import { db } from '@/services/firebase-service';
import { collection, query, where, getDocs, doc, getDoc } from '@/services/firebase-service';

/**
 * Diagnostic complet des relances automatiques
 * 
 * @param {string} concertId - ID du concert √† analyser
 * @param {string} organizationId - ID de l'organisation
 * @returns {Promise<Object>} Rapport de diagnostic
 */
export const diagnosticRelancesAutomatiques = async (concertId, organizationId) => {
  const rapport = {
    timestamp: new Date().toISOString(),
    concertId,
    organizationId,
    concert: null,
    relancesExistantes: [],
    etatConcert: null,
    recommandations: [],
    erreurs: []
  };

  try {
    console.log('üîç D√©but du diagnostic des relances automatiques');
    console.log(`üìã Concert: ${concertId}`);
    console.log(`üè¢ Organisation: ${organizationId}`);

    // 1. V√©rifier que le concert existe
    try {
      const concertDoc = await getDoc(doc(db, 'concerts', concertId));
      if (concertDoc.exists()) {
        rapport.concert = { id: concertId, ...concertDoc.data() };
        console.log('‚úÖ Concert trouv√©:', rapport.concert.titre);
      } else {
        rapport.erreurs.push('Concert non trouv√©');
        console.error('‚ùå Concert non trouv√©');
        return rapport;
      }
    } catch (error) {
      rapport.erreurs.push(`Erreur lecture concert: ${error.message}`);
      console.error('‚ùå Erreur lecture concert:', error);
      return rapport;
    }

    // 2. R√©cup√©rer les relances existantes
    try {
      const relancesQuery = query(
        collection(db, 'relances'),
        where('concertId', '==', concertId),
        where('organizationId', '==', organizationId),
        where('automatique', '==', true)
      );
      
      const relancesSnapshot = await getDocs(relancesQuery);
      rapport.relancesExistantes = relancesSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
      
      console.log(`üìã ${rapport.relancesExistantes.length} relances automatiques trouv√©es`);
      rapport.relancesExistantes.forEach(relance => {
        console.log(`  - ${relance.nom} (${relance.type}) - Termin√©e: ${relance.terminee}`);
      });

    } catch (error) {
      rapport.erreurs.push(`Erreur lecture relances: ${error.message}`);
      console.error('‚ùå Erreur lecture relances:', error);
    }

    // 3. √âvaluer l'√©tat du concert
    try {
      rapport.etatConcert = evaluerEtatConcertDetaille(rapport.concert);
      console.log('üìä √âtat du concert √©valu√©:', rapport.etatConcert);
    } catch (error) {
      rapport.erreurs.push(`Erreur √©valuation √©tat: ${error.message}`);
      console.error('‚ùå Erreur √©valuation √©tat:', error);
    }

    // 4. Analyser quelles relances devraient exister
    if (rapport.etatConcert) {
      for (const [typeId, typeConfig] of Object.entries(RELANCE_TYPES)) {
        if (typeConfig.futur) continue; // Ignorer les fonctionnalit√©s futures

        const devaitExister = verifierConditionsDetaille(typeConfig.conditions, rapport.etatConcert);
        const existe = rapport.relancesExistantes.find(r => r.type === typeId && !r.terminee);

        if (devaitExister && !existe) {
          rapport.recommandations.push({
            action: 'cr√©er',
            type: typeId,
            nom: typeConfig.nom,
            raison: 'Conditions remplies mais relance manquante'
          });
        } else if (!devaitExister && existe) {
          rapport.recommandations.push({
            action: 'terminer',
            type: typeId,
            nom: typeConfig.nom,
            raison: 'Conditions non remplies mais relance active'
          });
        }
      }
    }

    console.log(`üí° ${rapport.recommandations.length} recommandations g√©n√©r√©es`);
    rapport.recommandations.forEach(rec => {
      console.log(`  - ${rec.action.toUpperCase()}: ${rec.nom} (${rec.raison})`);
    });

  } catch (error) {
    rapport.erreurs.push(`Erreur g√©n√©rale: ${error.message}`);
    console.error('‚ùå Erreur g√©n√©rale diagnostic:', error);
  }

  console.log('üèÅ Diagnostic termin√©');
  return rapport;
};

/**
 * √âvalue l'√©tat d'un concert de mani√®re d√©taill√©e
 * 
 * @private
 * @param {Object} concert - Donn√©es du concert
 * @returns {Object} √âtat d√©taill√©
 */
function evaluerEtatConcertDetaille(concert) {
  const etat = {
    concert_cree: !!concert,
    formulaire_envoye: false,
    formulaire_recu: false,
    formulaire_valide: false,
    contrat_genere: false,
    contrat_envoye: false,
    contrat_signe: false,
    facture_envoyee: false,
    
    // Informations d√©taill√©es
    details: {
      champsEssentiels: {
        titre: !!concert.titre,
        date: !!concert.date,
        contactId: !!concert.contactId,
        artisteId: !!concert.artisteId,
        lieuId: !!concert.lieuId
      },
      formulaire: {
        formValidated: !!concert.formValidated,
        formSubmissionId: !!concert.formSubmissionId,
        formValidatedAt: !!concert.formValidatedAt
      },
      contrat: {
        // √Ä impl√©menter selon la structure des donn√©es de contrat
      }
    }
  };

  // Analyser l'√©tat du formulaire
  if (concert.formValidated) {
    etat.formulaire_envoye = true;
    etat.formulaire_recu = true;
    etat.formulaire_valide = true;
  } else if (concert.formSubmissionId) {
    etat.formulaire_envoye = true;
    etat.formulaire_recu = true;
  }

  // Analyser si le concert semble complet
  const champsEssentiels = ['titre', 'date', 'contactId', 'artisteId', 'lieuId'];
  const champsCompletes = champsEssentiels.filter(champ => !!concert[champ]);
  
  console.log(`üìä Champs essentiels: ${champsCompletes.length}/${champsEssentiels.length}`);
  console.log(`   Compl√©t√©s: ${champsCompletes.join(', ')}`);
  console.log(`   Manquants: ${champsEssentiels.filter(champ => !concert[champ]).join(', ')}`);

  if (champsCompletes.length === champsEssentiels.length) {
    // Concert complet, probablement formulaire envoy√© implicitement
    etat.formulaire_envoye = true;
  }

  return etat;
}

/**
 * V√©rifie les conditions de mani√®re d√©taill√©e
 * 
 * @private
 * @param {Object} conditions - Conditions √† v√©rifier
 * @param {Object} etatConcert - √âtat du concert
 * @returns {boolean} True si conditions remplies
 */
function verifierConditionsDetaille(conditions, etatConcert) {
  const resultats = [];
  
  for (const [cle, valeurAttendue] of Object.entries(conditions)) {
    const valeurActuelle = etatConcert[cle];
    const correspond = valeurActuelle === valeurAttendue;
    
    resultats.push({
      condition: cle,
      attendue: valeurAttendue,
      actuelle: valeurActuelle,
      correspond
    });
    
    console.log(`   ${cle}: ${valeurActuelle} === ${valeurAttendue} ? ${correspond ? '‚úÖ' : '‚ùå'}`);
  }
  
  return resultats.every(r => r.correspond);
}

/**
 * Teste la cr√©ation manuelle d'une relance
 * 
 * @param {string} concertId - ID du concert
 * @param {string} organizationId - ID de l'organisation
 * @param {string} typeRelance - Type de relance √† cr√©er
 * @returns {Promise<Object>} R√©sultat du test
 */
export const testerCreationRelanceManuelle = async (concertId, organizationId, typeRelance = 'envoyer_formulaire') => {
  try {
    console.log(`üß™ Test cr√©ation relance manuelle: ${typeRelance}`);
    
    // R√©cup√©rer le concert
    const concertDoc = await getDoc(doc(db, 'concerts', concertId));
    if (!concertDoc.exists()) {
      throw new Error('Concert non trouv√©');
    }
    
    const concert = { id: concertId, ...concertDoc.data() };
    console.log('üìã Concert r√©cup√©r√©:', concert.titre);
    
    // Utiliser le service directement
    await relancesAutomatiquesService.evaluerEtMettreAJourRelances(
      concert,
      null, // formulaireData
      null, // contratData
      organizationId
    );
    
    console.log('‚úÖ Test de cr√©ation r√©ussi');
    return { succes: true, message: 'Relance cr√©√©e avec succ√®s' };
    
  } catch (error) {
    console.error('‚ùå Erreur test cr√©ation:', error);
    return { succes: false, erreur: error.message };
  }
};

/**
 * Affiche un rapport de diagnostic dans la console de mani√®re format√©e
 * 
 * @param {Object} rapport - Rapport de diagnostic
 */
export const afficherRapportDiagnostic = (rapport) => {
  console.group('üìä RAPPORT DIAGNOSTIC RELANCES AUTOMATIQUES');
  
  console.log(`üïí Timestamp: ${rapport.timestamp}`);
  console.log(`üéµ Concert: ${rapport.concert?.titre || 'Non trouv√©'} (${rapport.concertId})`);
  console.log(`üè¢ Organisation: ${rapport.organizationId}`);
  
  if (rapport.erreurs.length > 0) {
    console.group('‚ùå Erreurs d√©tect√©es');
    rapport.erreurs.forEach(erreur => console.error(`- ${erreur}`));
    console.groupEnd();
  }
  
  if (rapport.etatConcert) {
    console.group('üìä √âtat du concert');
    Object.entries(rapport.etatConcert).forEach(([key, value]) => {
      if (key !== 'details') {
        console.log(`${key}: ${value ? '‚úÖ' : '‚ùå'}`);
      }
    });
    console.groupEnd();
  }
  
  if (rapport.relancesExistantes.length > 0) {
    console.group('üìã Relances existantes');
    rapport.relancesExistantes.forEach(relance => {
      console.log(`- ${relance.nom} (${relance.type}) - ${relance.terminee ? '‚úÖ Termin√©e' : '‚è≥ Active'}`);
    });
    console.groupEnd();
  }
  
  if (rapport.recommandations.length > 0) {
    console.group('üí° Recommandations');
    rapport.recommandations.forEach(rec => {
      console.log(`- ${rec.action.toUpperCase()}: ${rec.nom} (${rec.raison})`);
    });
    console.groupEnd();
  }
  
  console.groupEnd();
};

const debugUtils = {
  diagnosticRelancesAutomatiques,
  testerCreationRelanceManuelle,
  afficherRapportDiagnostic
};

export default debugUtils;
const admin = require('firebase-admin');
const { readFileSync } = require('fs');
const path = require('path');

// Configuration Firebase Admin SDK
if (!admin.apps.length) {
  // En mode √©mulateur ou local, utiliser des credentials factices
  if (process.env.NODE_ENV === 'development' || process.env.REACT_APP_MODE === 'local') {
    process.env.FIRESTORE_EMULATOR_HOST = 'localhost:8080';
    admin.initializeApp({
      projectId: 'demo-project',
      credential: admin.credential.applicationDefault()
    });
    console.log('üîß Configuration Firebase Admin (mode √©mulateur)');
  } else {
    // En production, utiliser les vraies credentials
    admin.initializeApp();
    console.log('üîß Configuration Firebase Admin (mode production)');
  }
}

const db = admin.firestore();

/**
 * Script de migration : Programmateurs ‚Üí Contacts
 * 
 * 1. Lit tous les documents de la collection 'programmateurs'
 * 2. Les copie dans la collection 'contacts' 
 * 3. Met √† jour les r√©f√©rences dans les autres collections (concerts, lieux, etc.)
 * 4. Supprime l'ancienne collection 'programmateurs'
 */

async function migrateProgrammateursToContacts() {
  console.log('üöÄ D√©but de la migration Programmateurs ‚Üí Contacts');
  console.log('==================================================');

  try {
    // √âtape 1: Lire tous les programmateurs
    console.log('üìñ √âtape 1: Lecture des programmateurs...');
    const programmateurSnapshot = await db.collection('programmateurs').get();
    
    if (programmateurSnapshot.empty) {
      console.log('‚ö†Ô∏è  Aucun programmateur trouv√© dans la base');
      return;
    }

    console.log(`üìä Trouv√© ${programmateurSnapshot.size} programmateur(s)`);
    
    const programmateurs = [];
    const migrationMap = new Map(); // oldId ‚Üí newId
    
    programmateurSnapshot.forEach(doc => {
      const data = doc.data();
      programmateurs.push({
        oldId: doc.id,
        data: data
      });
    });

    // √âtape 2: Cr√©er les contacts
    console.log('üìù √âtape 2: Cr√©ation des contacts...');
    const batch = db.batch();
    
    for (const prog of programmateurs) {
      // Cr√©er un nouveau document contact avec un nouvel ID
      const newContactRef = db.collection('contacts').doc();
      migrationMap.set(prog.oldId, newContactRef.id);
      
      // Nettoyer les donn√©es (enlever les champs sp√©cifiques aux programmateurs si n√©cessaire)
      const contactData = {
        ...prog.data,
        // Ajouter un timestamp de migration
        migratedAt: admin.firestore.FieldValue.serverTimestamp(),
        migratedFrom: 'programmateurs'
      };
      
      batch.set(newContactRef, contactData);
      console.log(`  ‚úÖ ${prog.data.nom || 'Sans nom'} (${prog.oldId} ‚Üí ${newContactRef.id})`);
    }

    await batch.commit();
    console.log(`‚úÖ ${programmateurs.length} contact(s) cr√©√©(s)`);

    // √âtape 3: Mettre √† jour les r√©f√©rences dans les concerts
    console.log('üîÑ √âtape 3: Mise √† jour des r√©f√©rences dans les concerts...');
    const concertSnapshot = await db.collection('concerts').get();
    
    if (!concertSnapshot.empty) {
      const concertBatch = db.batch();
      let concertsUpdated = 0;
      
      concertSnapshot.forEach(doc => {
        const data = doc.data();
        let needsUpdate = false;
        const updates = {};
        
        // Mettre √† jour programmateurId ‚Üí contactId
        if (data.programmateurId && migrationMap.has(data.programmateurId)) {
          updates.contactId = migrationMap.get(data.programmateurId);
          updates.programmateurId = admin.firestore.FieldValue.delete(); // Supprimer l'ancien champ
          needsUpdate = true;
        }
        
        // Mettre √† jour les r√©f√©rences dans les arrays s'il y en a
        if (data.programmateurIds && Array.isArray(data.programmateurIds)) {
          updates.contactIds = data.programmateurIds.map(id => 
            migrationMap.has(id) ? migrationMap.get(id) : id
          );
          updates.programmateurIds = admin.firestore.FieldValue.delete();
          needsUpdate = true;
        }
        
        if (needsUpdate) {
          concertBatch.update(doc.ref, updates);
          concertsUpdated++;
        }
      });
      
      await concertBatch.commit();
      console.log(`‚úÖ ${concertsUpdated} concert(s) mis √† jour`);
    }

    // √âtape 4: Mettre √† jour les r√©f√©rences dans les lieux
    console.log('üîÑ √âtape 4: Mise √† jour des r√©f√©rences dans les lieux...');
    const lieuxSnapshot = await db.collection('lieux').get();
    
    if (!lieuxSnapshot.empty) {
      const lieuxBatch = db.batch();
      let lieuxUpdated = 0;
      
      lieuxSnapshot.forEach(doc => {
        const data = doc.data();
        let needsUpdate = false;
        const updates = {};
        
        // Mettre √† jour programmateurIds ‚Üí contactIds
        if (data.programmateurIds && Array.isArray(data.programmateurIds)) {
          updates.contactIds = data.programmateurIds.map(id => 
            migrationMap.has(id) ? migrationMap.get(id) : id
          );
          updates.programmateurIds = admin.firestore.FieldValue.delete();
          needsUpdate = true;
        }
        
        if (needsUpdate) {
          lieuxBatch.update(doc.ref, updates);
          lieuxUpdated++;
        }
      });
      
      await lieuxBatch.commit();
      console.log(`‚úÖ ${lieuxUpdated} lieu(x) mis √† jour`);
    }

    // √âtape 5: Supprimer l'ancienne collection programmateurs
    console.log('üóëÔ∏è  √âtape 5: Suppression des anciens programmateurs...');
    const deletePromises = programmateurs.map(prog => 
      db.collection('programmateurs').doc(prog.oldId).delete()
    );
    
    await Promise.all(deletePromises);
    console.log(`‚úÖ ${programmateurs.length} programmateur(s) supprim√©(s)`);

    // R√©sum√©
    console.log('');
    console.log('üéâ MIGRATION TERMIN√âE AVEC SUCC√àS !');
    console.log('====================================');
    console.log(`üìä Contacts cr√©√©s: ${programmateurs.length}`);
    console.log(`üîÑ Concerts mis √† jour: ${concertsUpdated || 0}`);
    console.log(`üè† Lieux mis √† jour: ${lieuxUpdated || 0}`);
    console.log('');
    console.log('üéØ Mapping des IDs:');
    migrationMap.forEach((newId, oldId) => {
      const prog = programmateurs.find(p => p.oldId === oldId);
      console.log(`  ${prog?.data?.nom || 'Sans nom'}: ${oldId} ‚Üí ${newId}`);
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
    throw error;
  }
}

// Ex√©cuter la migration si le script est appel√© directement
if (require.main === module) {
  migrateProgrammateursToContacts()
    .then(() => {
      console.log('\n‚úÖ Migration termin√©e avec succ√®s');
      process.exit(0);
    })
    .catch(error => {
      console.error('\n‚ùå Migration √©chou√©e:', error);
      process.exit(1);
    });
}

module.exports = { migrateProgrammateursToContacts };
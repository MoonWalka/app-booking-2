/**
 * Hook optimis√© pour le formulaire de contact bas√© sur useGenericEntityForm
 * 
 * ‚ö†Ô∏è NOTE IMPORTANTE - APPROCHE RECOMMAND√âE ‚ö†Ô∏è
 * Ce hook repr√©sente l'approche RECOMMAND√âE pour les nouveaux d√©veloppements.
 * Il utilise DIRECTEMENT les hooks g√©n√©riques plut√¥t que de passer par des wrappers
 * ou des hooks "Migrated/V2", conform√©ment au plan de d√©pr√©ciation officiel
 * (PLAN_DEPRECIATION_HOOKS.md) qui pr√©voit la suppression de tous les hooks 
 * sp√©cifiques d'ici novembre 2025.
 */

import { useState, useCallback, useMemo, useEffect } from 'react';
import { useNavigate, useParams, useLocation } from 'react-router-dom';
import useGenericEntityForm from '@/hooks/generics/forms/useGenericEntityForm';
import { showSuccessToast, showErrorToast } from '@/utils/toasts';
import { debugLog } from '@/utils/logUtils';
import { useDataValidation } from '@/services/dataValidationService';
import { useOrganization } from '@/context/OrganizationContext';

/**
 * Hook optimis√© pour g√©rer les formulaires de contacts
 * Utilise directement useGenericEntityForm comme recommand√©
 * 
 * @param {string} contactId - ID du contact ou 'nouveau' pour un nouveau contact
 * @returns {Object} - √âtats et fonctions pour g√©rer le formulaire
 */
export const useContactForm = (contactId) => {
  const navigate = useNavigate();
  const { id } = useParams();
  const location = useLocation();
  const { currentOrganization } = useOrganization();
  const { validateAndPrepare } = useDataValidation();
  
  // D√©tecter le mode "nouveau" via l'URL plut√¥t que via les param√®tres
  const isNewFromUrl = location.pathname.endsWith('/nouveau');
  const actualContactId = contactId || id;
  const isNewContact = isNewFromUrl || !actualContactId || actualContactId === 'nouveau';
  
  // LOGS TEMPORAIREMENT D√âSACTIV√âS POUR √âVITER LA BOUCLE
  // console.log('[DEBUG][useContactForm] actualContactId:', actualContactId);
  
  // debugLog(`Initialisation du formulaire de contact optimis√©: ${isNewContact ? 'nouveau contact' : `contact ${actualContactId}`}`, 'info', 'useContactForm');
  
  // Fonction de validation sp√©cifique aux contacts
  const validateContactForm = useCallback((data) => {
    const errors = {};
    
    // Validation sur les champs PLATS (pas imbriqu√©s)
    if (!data.nom) {
      errors['nom'] = 'Le nom du contact est obligatoire';
    }
    
    // Email facultatif, mais si fourni, doit √™tre valide
    if (data.email && !/^\S+@\S+\.\S+$/.test(data.email)) {
      errors['email'] = 'Format d\'email invalide';
    }
    
    // Validation de la structure si n√©cessaire
    if (!data.structureId && !data.structureRaisonSociale) {
      errors['structureRaisonSociale'] = 'La raison sociale est requise si aucune structure n\'est s√©lectionn√©e';
    }
    
    return {
      isValid: Object.keys(errors).length === 0,
      errors,
      message: Object.keys(errors).length > 0 ? 'Veuillez corriger les erreurs du formulaire.' : null
    };
  }, []);

  // Fonction de transformation des donn√©es avant sauvegarde
  const transformContactData = useCallback((data) => {
    console.log('üíæ PR√âPARATION SAUVEGARDE CONTACT - INPUT:', JSON.stringify(data, null, 2));
    
    // STRUCTURE D√âFINITIVE - AUCUN OBJET IMBRIQU√â
    const contactData = {
      // Identit√© (TOUT au niveau racine)
      nom: data.nom || data.contact?.nom || '',
      prenom: data.prenom || data.contact?.prenom || '',
      email: data.email || data.contact?.email || '',
      telephone: data.telephone || data.contact?.telephone || '',
      fonction: data.fonction || data.contact?.fonction || '',
      
      // Structure (avec pr√©fixe, PAS dans un objet)
      structureId: data.structureId || '',
      structureNom: data.structureNom || data.structure?.nom || data.structureRaisonSociale || '',
      structureRaisonSociale: data.structureRaisonSociale || data.structure?.raisonSociale || '',
      structureSiret: data.structureSiret || data.structure?.siret || '',
      structureAdresse: data.structureAdresse || data.structure?.adresse || '',
      structureCodePostal: data.structureCodePostal || data.structure?.codePostal || '',
      structureVille: data.structureVille || data.structure?.ville || '',
      structurePays: data.structurePays || data.structure?.pays || 'France',
      structureTva: data.structureTva || data.structure?.tva || '',
      structureType: data.structureType || data.structure?.type || '',
      structureNumeroIntracommunautaire: data.structureNumeroIntracommunautaire || data.structure?.numeroIntracommunautaire || '',
      
      // Bidirectionnalit√©
      concertsIds: data.concertsIds || [],
      lieuxIds: data.lieuxIds || [],
      artistesIds: data.artistesIds || [],
      concertsAssocies: data.concertsAssocies || [], // Pour compatibilit√©
      
      // Autres champs
      notes: data.notes || '',
      tags: data.tags || [],
      statut: data.statut || 'actif',
      
      // M√©tadonn√©es
      updatedAt: new Date()
    };
    
    // V√âRIFICATION CRITIQUE - organizationId OBLIGATOIRE
    if (!currentOrganization?.id) {
      throw new Error('organizationId OBLIGATOIRE - Aucune organisation s√©lectionn√©e');
    }
    
    // Multi-org (CRITIQUE)
    contactData.organizationId = currentOrganization.id;
    
    // LOG POUR V√âRIFIER
    console.log('üíæ SAUVEGARDE CONTACT - STRUCTURE FINALE:', contactData);
    console.log('‚úÖ PAS de contact: {} ou structure: {} !');
    
    // Validation finale via le service
    try {
      const validatedData = validateAndPrepare(contactData, 'contacts');
      console.log('‚úÖ Contact valid√© et pr√™t:', validatedData);
      return validatedData;
    } catch (error) {
      console.error('‚ùå Erreur de validation:', error);
      // En cas d'erreur, on retourne quand m√™me les donn√©es avec organizationId
      return contactData;
    }
  }, [validateAndPrepare, currentOrganization]);
  
  // Callbacks pour les op√©rations r√©ussies ou en erreur
  const onSuccessCallback = useCallback((savedData) => {
    // savedData contient maintenant les champs aplatis
    const contactName = savedData.nom || '';
    const message = isNewContact
      ? `Le contact ${contactName} a √©t√© cr√©√© avec succ√®s`
      : `Le contact ${contactName} a √©t√© mis √† jour avec succ√®s`;
    
    showSuccessToast(message);
    
    // R√©cup√©rer l'ID depuis savedData
    const savedId = savedData.id;
    
    // √âviter la boucle infinie : ne pas naviguer si savedId est "nouveau"
    if (savedId && savedId !== 'nouveau') {
      navigate(`/contacts/${savedId}`);
    } else if (isNewContact) {
      // Pour un nouveau contact, rediriger vers la liste
      navigate('/contacts');
    }
    
    // Si une structure a √©t√© cr√©√©e en m√™me temps, on pourrait g√©rer ici la sauvegarde de la structure
    // et la mise √† jour de la relation entre la structure et le contact
  }, [isNewContact, navigate]);

  const onErrorCallback = useCallback((error) => {
    const message = isNewContact
      ? `Erreur lors de la cr√©ation du contact: ${error.message}`
      : `Erreur lors de la sauvegarde du contact: ${error.message}`;
    
    showErrorToast(message);
  }, [isNewContact]);
  
  // Fonction pour transformer les donn√©es aplaties en structure imbriqu√©e pour le formulaire
  // NOTE: Cette fonction n'est plus utilis√©e mais conserv√©e pour la compatibilit√©
  // eslint-disable-next-line no-unused-vars
  const transformLoadedData = useCallback((data) => {
    if (!data) return null;
    
    // IMPORTANT: Ne plus cr√©er de structures imbriqu√©es
    // Retourner les donn√©es plates directement
    return {
      // Donn√©es du contact √† la racine
      nom: data.nom || '',
      prenom: data.prenom || '',
      fonction: data.fonction || '',
      email: data.email || '',
      telephone: data.telephone || '',
      
      // Donn√©es de la structure avec pr√©fixe
      structureRaisonSociale: data.structureRaisonSociale || data.structureInfo?.raisonSociale || '',
      structureType: data.structureType || data.structureInfo?.type || '',
      structureAdresse: data.structureAdresse || data.structureInfo?.adresse || '',
      structureCodePostal: data.structureCodePostal || data.structureInfo?.codePostal || '',
      structureVille: data.structureVille || data.structureInfo?.ville || '',
      structurePays: data.structurePays || data.structureInfo?.pays || 'France',
      structureSiret: data.structureSiret || data.structureInfo?.siret || '',
      structureTva: data.structureTva || data.structureInfo?.tva || '',
      
      // Autres donn√©es
      structureId: data.structureId || '',
      structureNom: data.structureNom || '',
      concertsAssocies: data.concertsAssocies || [],
      
      // Conserver l'ID et l'organizationId
      id: data.id,
      organizationId: data.organizationId
    };
  }, []);
  
  // DEBUG: Log pour voir ce qui se passe
  console.log('üîµ [useContactForm] Initialisation:', {
    isNewContact,
    actualContactId,
    currentOrganization: currentOrganization?.id
  });
  
  // Utilisation directe du hook g√©n√©rique avec configuration sp√©cifique aux contacts
  const formHook = useGenericEntityForm({
    entityType: 'contacts',
    entityId: isNewContact ? null : actualContactId,
    collectionName: 'contacts',
    initialData: useMemo(() => ({
      // Valeurs par d√©faut pour un nouveau contact - structure plate
      nom: '',
      prenom: '',
      fonction: '',
      email: '',
      telephone: '',
      structureId: '',
      structureNom: '',
      structureRaisonSociale: '',
      structureType: '',
      structureAdresse: '',
      structureCodePostal: '',
      structureVille: '',
      structurePays: 'France',
      structureSiret: '',
      structureTva: '',
      structureNumeroIntracommunautaire: '',
      // BIDIRECTIONNALIT√â - Initialisation correcte
      lieuxIds: [],
      concertsIds: [],
      artistesIds: [],
      concertsAssocies: [], // Pour compatibilit√©
      notes: '',
      tags: [],
      statut: 'actif'
    }), []),
    validateForm: validateContactForm,
    transformData: transformContactData,
    onSuccess: onSuccessCallback,
    onError: onErrorCallback,
    relatedEntities: useMemo(() => [
      { 
        name: 'structure',
        collection: 'structures',
        idField: 'structureId',
        nameField: 'structureNom'
      }
    ], [])
  });
  
  // Extension du hook avec des fonctionnalit√©s sp√©cifiques aux contacts
  
  // Effet pour v√©rifier et CORRIGER les donn√©es charg√©es
  useEffect(() => {
    console.log('üîµ formData actuel:', formHook.formData);
    if (formHook.formData && (formHook.formData.contact || formHook.formData.structure)) {
      console.error('‚ö†Ô∏è STRUCTURE IMBRIQU√âE D√âTECT√âE - CORRECTION AUTOMATIQUE !');
      
      // Aplatir automatiquement les donn√©es imbriqu√©es
      const flatData = transformContactData(formHook.formData);
      
      // Mettre √† jour formData avec la structure plate
      formHook.setFormData(flatData);
      
      console.log('‚úÖ Donn√©es corrig√©es (plates):', flatData);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [formHook.formData.id]); // Surveiller uniquement l'ID pour √©viter les boucles
  
  // Fonction pour s√©lectionner/d√©s√©lectionner la structure
  const handleSelectStructure = useCallback((structure) => {
    if (structure) {
      formHook.setFormData(prev => ({
        ...prev,
        structureId: structure.id,
        structureNom: structure.nom || structure.raisonSociale
      }));
      
      // TODO: Charger les d√©tails de la structure dans les donn√©es li√©es
      // Note: loadRelatedEntity n'existe pas dans useGenericEntityForm
      // formHook.loadRelatedEntity('structure', structure.id);
    } else {
      formHook.setFormData(prev => ({
        ...prev,
        structureId: '',
        structureNom: ''
      }));
    }
  }, [formHook]);
  
  // Fonction pour g√©rer le toggle des sections (interface utilisateur)
  const [sectionsVisibility, setSectionsVisibility] = useState({
    contactVisible: true,
    legalVisible: true,
    structureVisible: true,
    lieuxVisible: true,
    concertsVisible: true
  });

  const toggleSection = useCallback((sectionName) => {
    setSectionsVisibility(prev => ({
      ...prev,
      [sectionName]: !prev[sectionName]
    }));
  }, []);
  
  // Fonction pour g√©rer l'annulation du formulaire
  const handleCancel = useCallback(() => {
    debugLog('Annulation du formulaire contact', 'info', 'useContactForm');
    
    // Si c'est un nouveau contact, rediriger vers la liste
    if (isNewContact) {
      navigate('/contacts');
    } else {
      // Si c'est un contact existant, rediriger vers sa vue d√©tails
      navigate(`/contacts/${actualContactId}`);
    }
  }, [navigate, isNewContact, actualContactId]);
  
  // Plus besoin de m√©thodes pour mettre √† jour les champs imbriqu√©s
  // Les champs sont maintenant plats et g√©r√©s directement par handleChange
  
  // Fonction pour g√©rer les changements de structure principale (utilis√©e par useCompanySearch)
  const handleStructureChange = useCallback((company) => {
    if (company) {
      // Utiliser des champs PLATS avec le pr√©fixe "structure"
      formHook.setFormData(prev => ({
        ...prev,
        structureId: company.id || '',
        structureNom: company.nom || company.raisonSociale || '',
        structureRaisonSociale: company.nom || company.raisonSociale || '',
        structureSiret: company.siret || '',
        structureAdresse: company.adresse || '',
        structureCodePostal: company.codePostal || '',
        structureVille: company.ville || '',
        structureType: company.statutJuridique || '',
        structurePays: company.pays || 'France'
      }));
    } else {
      // R√©initialiser les champs structure
      formHook.setFormData(prev => ({
        ...prev,
        structureId: '',
        structureNom: '',
        structureRaisonSociale: '',
        structureSiret: '',
        structureAdresse: '',
        structureCodePostal: '',
        structureVille: '',
        structureType: '',
        structurePays: 'France'
      }));
    }
  }, [formHook]);
  
  // Enrichir formData avec l'id de l'entit√© pour exposer contact.id
  const contactDataWithId = { ...formHook.formData, id: formHook.entityId };
  
  // Retourner le hook g√©n√©rique enrichi de fonctionnalit√©s sp√©cifiques
  return {
    ...formHook, // Toutes les fonctionnalit√©s du hook g√©n√©rique
    // Propri√©t√©s et m√©thodes sp√©cifiques aux contacts
    isNewContact,
    handleSelectStructure,
    sectionsVisibility,
    toggleSection,
    handleCancel, // Ajout de la fonction handleCancel
    // Raccourcis pour une meilleure DX
    contact: contactDataWithId,
    // TODO: G√©rer les entit√©s li√©es diff√©remment car relatedData n'existe pas dans useGenericEntityForm
    structure: null,
    selectedStructure: null,
    handleStructureChange
  };
};

export default useContactForm;
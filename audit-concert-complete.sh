#!/bin/bash

# Script d'audit exhaustif pour la migration concert ‚Üí date
# Date: $(date +%Y-%m-%d)

echo "üîç AUDIT EXHAUSTIF MIGRATION CONCERT ‚Üí DATE"
echo "=========================================="
echo ""

# Cr√©er un dossier pour les r√©sultats
mkdir -p audit-results
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
REPORT_FILE="audit-results/audit-concert-${TIMESTAMP}.md"

# En-t√™te du rapport
cat > "$REPORT_FILE" << EOF
# Audit Exhaustif Migration Concert ‚Üí Date
Date: $(date)

## R√©sum√© Ex√©cutif

EOF

# 1. Compter toutes les occurrences
echo "1Ô∏è‚É£ Comptage des occurrences..."
echo "## 1. Comptage Global" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# Occurrences exactes de "concert" (sensible √† la casse)
CONCERT_COUNT=$(rg -c "\bconcert\b" --type js src/ | awk -F: '{sum+=$2} END {print sum}')
echo "- Occurrences de 'concert' (minuscule): $CONCERT_COUNT" >> "$REPORT_FILE"

# Occurrences de "Concert" (majuscule)
CONCERT_UPPER_COUNT=$(rg -c "\bConcert\b" --type js src/ | awk -F: '{sum+=$2} END {print sum}')
echo "- Occurrences de 'Concert' (majuscule): $CONCERT_UPPER_COUNT" >> "$REPORT_FILE"

# Occurrences de "concerts" (pluriel)
CONCERTS_COUNT=$(rg -c "\bconcerts\b" --type js src/ | awk -F: '{sum+=$2} END {print sum}')
echo "- Occurrences de 'concerts' (pluriel): $CONCERTS_COUNT" >> "$REPORT_FILE"

echo "" >> "$REPORT_FILE"

# 2. Analyser par type d'usage
echo "2Ô∏è‚É£ Analyse par type d'usage..."
echo "## 2. Types d'Usage" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# Collections Firebase
echo "### 2.1 Collections Firebase" >> "$REPORT_FILE"
rg "collection.*concerts" --type js src/ -n >> "$REPORT_FILE" 2>/dev/null || echo "Aucune collection 'concerts' trouv√©e" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# Variables et propri√©t√©s
echo "### 2.2 Variables et Propri√©t√©s" >> "$REPORT_FILE"
echo "#### Variables 'concert'" >> "$REPORT_FILE"
rg "let concert|const concert|var concert" --type js src/ -n | head -20 >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

echo "#### Propri√©t√©s 'concertsAssocies'" >> "$REPORT_FILE"
rg "concertsAssocies" --type js src/ -n | head -20 >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

echo "#### Propri√©t√©s 'concertsIds'" >> "$REPORT_FILE"
rg "concertsIds" --type js src/ -n | head -20 >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# 3. Fichiers les plus impact√©s
echo "3Ô∏è‚É£ Identification des fichiers critiques..."
echo "## 3. Fichiers les Plus Impact√©s" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

echo "### Top 20 des fichiers avec le plus d'occurrences:" >> "$REPORT_FILE"
rg -c "concert" --type js src/ | sort -t: -k2 -nr | head -20 >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# 4. Analyse contextuelle
echo "4Ô∏è‚É£ Analyse contextuelle..."
echo "## 4. Analyse Contextuelle" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# Type d'√©v√©nement vs Collection
echo "### 4.1 'Concert' comme type d'√©v√©nement (√† CONSERVER)" >> "$REPORT_FILE"
rg "type.*Concert|eventType.*Concert|'Concert'" --type js src/ -n | head -10 >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

echo "### 4.2 'concert' dans les maps/forEach (√† MIGRER)" >> "$REPORT_FILE"
rg "\.map\((concert|\.forEach\((concert" --type js src/ -n | head -10 >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# 5. Routes et navigation
echo "5Ô∏è‚É£ Analyse des routes..."
echo "## 5. Routes et Navigation" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

rg "/concerts|navigate.*concert" --type js src/ -n >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# 6. Fonctions et m√©thodes
echo "6Ô∏è‚É£ Analyse des fonctions..."
echo "## 6. Fonctions et M√©thodes" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

echo "### Fonctions avec 'concert' dans le nom:" >> "$REPORT_FILE"
rg "function.*concert|const.*concert.*=" --type js src/ -n | head -20 >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# 7. Imports et exports
echo "7Ô∏è‚É£ Analyse des imports/exports..."
echo "## 7. Imports et Exports" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

rg "import.*concert|export.*concert" --type js src/ -n >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# 8. Recommandations
echo "## 8. Recommandations de Migration" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"
cat >> "$REPORT_FILE" << EOF
### Priorit√© 1 - Collections Firebase
- Migrer toutes les r√©f√©rences √† la collection "concerts" vers "dates"
- V√©rifier les hooks et services utilisant ces collections

### Priorit√© 2 - Variables dans les boucles
- Remplacer les variables 'concert' par 'date' dans les maps et forEach
- Attention aux propri√©t√©s d'objet correspondantes

### Priorit√© 3 - Propri√©t√©s d'objets
- concertsAssocies ‚Üí datesAssociees
- concertsIds ‚Üí datesIds
- concertId ‚Üí dateId

### Priorit√© 4 - Noms de fonctions
- Renommer les fonctions contenant 'concert'
- Mettre √† jour tous les appels correspondants

### ‚ö†Ô∏è NE PAS MODIFIER
- Les r√©f√©rences √† 'Concert' comme type d'√©v√©nement
- Les √©num√©rations contenant 'Concert'
- Les textes utilisateur mentionnant "concert"
EOF

# R√©sum√© final
echo "" >> "$REPORT_FILE"
echo "## 9. R√©sum√© des Actions" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"
echo "- Total d'occurrences √† analyser: $((CONCERT_COUNT + CONCERTS_COUNT))" >> "$REPORT_FILE"
echo "- Fichiers impact√©s: $(rg -l "concert" --type js src/ | wc -l)" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

echo "‚úÖ Audit termin√© !"
echo "üìÑ Rapport g√©n√©r√© : $REPORT_FILE"
echo ""
echo "Prochaine √©tape : Analyser le rapport et cr√©er un plan de migration d√©taill√©"
#!/bin/bash

# Script de v√©rification compl√®te d'un hook migr√©
# V√©rifie que la migration n'a pas cass√© de fonctionnalit√©s

set -e

if [ $# -ne 3 ]; then
    echo "‚ùå Usage: $0 <hook_name> <domain> <description>"
    echo "   Exemple: $0 useArtisteSearch artistes 'recherche d'artistes'"
    exit 1
fi

HOOK_NAME="$1"
DOMAIN="$2"
DESCRIPTION="$3"

echo "üîç V√âRIFICATION DU HOOK MIGR√â: $HOOK_NAME"
echo "=========================================="
echo "üìÇ Domaine: $DOMAIN"
echo "üìù Fonctionnalit√©: $DESCRIPTION"
echo ""

# 1. V√©rifier que le hook existe
echo "1Ô∏è‚É£ V√âRIFICATION DE L'EXISTENCE DU HOOK..."
HOOK_FILE="src/hooks/$DOMAIN/$HOOK_NAME.js"
if [ -f "$HOOK_FILE" ]; then
    echo "  ‚úÖ Hook trouv√©: $HOOK_FILE"
else
    echo "  ‚ùå ERREUR: Hook non trouv√© √† $HOOK_FILE"
    exit 1
fi

# 2. V√©rifier l'export dans index.js
echo ""
echo "2Ô∏è‚É£ V√âRIFICATION DE L'EXPORT..."
INDEX_FILE="src/hooks/$DOMAIN/index.js"
if grep -q "export.*$HOOK_NAME" "$INDEX_FILE"; then
    echo "  ‚úÖ Hook correctement export√© dans $INDEX_FILE"
    echo "    üìã $(grep "export.*$HOOK_NAME" "$INDEX_FILE")"
else
    echo "  ‚ùå ATTENTION: Hook non export√© dans $INDEX_FILE"
fi

# 3. Identifier tous les composants qui utilisent ce hook
echo ""
echo "3Ô∏è‚É£ IDENTIFICATION DES COMPOSANTS UTILISATEURS..."
USAGE_FILES=$(grep -r "$HOOK_NAME" src/ --include="*.js" --include="*.jsx" | grep -v "$HOOK_FILE" | grep -v "$INDEX_FILE" | cut -d: -f1 | sort -u)

if [ -n "$USAGE_FILES" ]; then
    echo "  üìÅ Composants utilisant $HOOK_NAME:"
    echo "$USAGE_FILES" | while read -r file; do
        echo "    üìÑ $file"
        # Montrer le contexte d'utilisation
        grep -n "$HOOK_NAME" "$file" | head -3 | while read -r line; do
            echo "      üîç $line"
        done
        echo ""
    done
else
    echo "  ‚ö†Ô∏è  Aucun composant trouv√© utilisant directement $HOOK_NAME"
    echo "     (Cela peut √™tre normal si utilis√© via des abstractions)"
fi

# 4. V√©rifier qu'il n'y a plus de r√©f√©rences aux anciennes versions
echo ""
echo "4Ô∏è‚É£ V√âRIFICATION DES ANCIENNES VERSIONS..."
OLD_VARIANTS=("${HOOK_NAME}Migrated" "${HOOK_NAME}Optimized" "${HOOK_NAME}Complete")
for variant in "${OLD_VARIANTS[@]}"; do
    OLD_REFS=$(grep -r "$variant" src/ --include="*.js" --include="*.jsx" 2>/dev/null | grep -v "\.backup" | wc -l)
    if [ "$OLD_REFS" -gt 0 ]; then
        echo "  ‚ö†Ô∏è  ATTENTION: $OLD_REFS r√©f√©rences √† $variant trouv√©es"
        grep -r "$variant" src/ --include="*.js" --include="*.jsx" | head -5
    else
        echo "  ‚úÖ Aucune r√©f√©rence √† $variant trouv√©e"
    fi
done

# 5. Test de compilation rapide
echo ""
echo "5Ô∏è‚É£ TEST DE COMPILATION RAPIDE..."
if npm run build --silent 2>/dev/null; then
    echo "  ‚úÖ Compilation r√©ussie"
else
    echo "  ‚ùå ERREUR DE COMPILATION d√©tect√©e"
    echo "     Lancez 'npm run build' pour voir les d√©tails"
    exit 1
fi

# 6. Proposer des tests manuels cibl√©s
echo ""
echo "6Ô∏è‚É£ TESTS MANUELS RECOMMAND√âS:"
echo "==============================="

if [ -n "$USAGE_FILES" ]; then
    echo "üß™ Pour v√©rifier que $HOOK_NAME fonctionne correctement:"
    echo ""
    
    echo "$USAGE_FILES" | while read -r file; do
        # D√©terminer le type de composant et sugg√©rer des tests
        if echo "$file" | grep -q "desktop"; then
            echo "  üñ•Ô∏è  DESKTOP: $file"
            if echo "$file" | grep -qi "list\|search"; then
                echo "     ‚û°Ô∏è Tester la recherche et filtrage"
                echo "     ‚û°Ô∏è V√©rifier que les r√©sultats s'affichent"
                echo "     ‚û°Ô∏è Tester la pagination si applicable"
            elif echo "$file" | grep -qi "form"; then
                echo "     ‚û°Ô∏è Tester la saisie et validation"
                echo "     ‚û°Ô∏è V√©rifier la sauvegarde"
            elif echo "$file" | grep -qi "detail"; then
                echo "     ‚û°Ô∏è Tester l'affichage des d√©tails"
                echo "     ‚û°Ô∏è V√©rifier les actions (edit, delete)"
            fi
        elif echo "$file" | grep -q "mobile"; then
            echo "  üì± MOBILE: $file"
            echo "     ‚û°Ô∏è Tester en mode responsive/mobile"
        fi
        echo ""
    done
else
    echo "  ‚ÑπÔ∏è  Pas de composants directs identifi√©s"
    echo "     ‚û°Ô∏è V√©rifier manuellement les fonctionnalit√©s de $DESCRIPTION"
fi

# 7. Lancement optionnel en mode d√©veloppement
echo ""
echo "7Ô∏è‚É£ LANCEMENT EN MODE D√âVELOPPEMENT:"
echo "===================================="
echo "  Pour tester interactivement:"
echo "  üëâ npm start"
echo "  üëâ Naviguer vers les pages utilisant la fonctionnalit√© '$DESCRIPTION'"
echo "  üëâ V√©rifier la console pour d'√©ventuelles erreurs"
echo ""

# 8. Points de v√©rification sp√©cifiques
echo "8Ô∏è‚É£ CHECKLIST DE V√âRIFICATION:"
echo "=============================="
echo "  ‚ñ° Le hook se charge sans erreur"
echo "  ‚ñ° Les donn√©es sont r√©cup√©r√©es correctement"
echo "  ‚ñ° Les fonctions (search, filter, etc.) marchent"
echo "  ‚ñ° Pas d'erreurs dans la console navigateur"
echo "  ‚ñ° Les performances sont correctes"
echo "  ‚ñ° Les √©tats de loading/error sont g√©r√©s"
echo ""

echo "‚úÖ V√âRIFICATION TERMIN√âE"
echo "========================"
echo "  üìã Hook: $HOOK_NAME"
echo "  üéØ Statut: Migration v√©rifi√©e"
echo "  üìù Action: Effectuer les tests manuels recommand√©s"

# Optionnel : d√©marrer automatiquement en dev
echo ""
read -p "üöÄ Voulez-vous lancer l'app en mode d√©veloppement pour tester ? (oui/non): " start_dev
if [ "$start_dev" = "oui" ]; then
    echo "üöÄ D√©marrage de l'application..."
    echo "   ‚û°Ô∏è Une fois lanc√©e, testez les fonctionnalit√©s de '$DESCRIPTION'"
    echo "   ‚û°Ô∏è Appuyez sur Ctrl+C pour arr√™ter quand termin√©"
    echo ""
    npm start
fi 
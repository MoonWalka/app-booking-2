rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // 🚨 RÈGLE PAR DÉFAUT : TOUT INTERDIT SAUF EXCEPTIONS EXPLICITES
    match /{document=**} {
      allow read, write: if false;
    }
    
    // 🏢 ORGANISATIONS : Gestion des organisations
    match /organizations/{orgId} {
      // Lecture autorisée si l'utilisateur est membre
      allow read: if request.auth != null && 
                    request.auth.uid in resource.data.members;
      
      // Création par n'importe quel utilisateur authentifié
      allow create: if request.auth != null &&
                      validateOrganizationData(request.resource.data) &&
                      request.resource.data.ownerId == request.auth.uid &&
                      request.auth.uid in request.resource.data.members &&
                      request.resource.data.members[request.auth.uid].role == 'owner';
      
      // Mise à jour par les admins/propriétaires uniquement
      allow update: if request.auth != null &&
                      request.auth.uid in resource.data.members &&
                      (resource.data.members[request.auth.uid].role == 'owner' ||
                       resource.data.members[request.auth.uid].role == 'admin') &&
                      validateOrganizationData(request.resource.data);
      
      // Suppression par le propriétaire uniquement
      allow delete: if request.auth != null &&
                      request.auth.uid in resource.data.members &&
                      resource.data.members[request.auth.uid].role == 'owner';
      
      // ⚙️ PARAMÈTRES D'ORGANISATION : Accès restreint aux membres
      match /settings/{settingDoc} {
        // Lecture autorisée pour tous les membres de l'organisation
        allow read: if request.auth != null && 
                      isOrgMember(orgId, request.auth.uid);
        
        // Écriture autorisée selon le type de paramètre
        allow write: if request.auth != null && 
                       isOrgMember(orgId, request.auth.uid) &&
                       canWriteSetting(settingDoc, orgId, request.auth.uid);
      }
      
      // 📊 MIGRATIONS : Lecture seule pour les admins, écriture système uniquement
      match /migrations/{migrationDoc} {
        // Lecture par les admins pour vérifier l'état des migrations
        allow read: if request.auth != null && 
                      isOrgAdmin(orgId, request.auth.uid);
        
        // Écriture autorisée pour les processus de migration (admins uniquement)
        allow write: if request.auth != null && 
                       isOrgAdmin(orgId, request.auth.uid);
      }
      
      // 📄 TEMPLATES : Accès aux membres, modification par admins
      match /templates/{templateDoc} {
        allow read: if request.auth != null && 
                      isOrgMember(orgId, request.auth.uid);
        
        allow write: if request.auth != null && 
                       isOrgAdmin(orgId, request.auth.uid);
      }
    }
    
    // 👥 INDEX UTILISATEUR-ORGANISATIONS
    match /user_organizations/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // [... Autres règles existantes ...]
  }
  
  // 🛡️ FONCTIONS DE VALIDATION ET SÉCURITÉ
  
  // Vérifier si un utilisateur est membre d'une organisation
  function isOrgMember(orgId, uid) {
    return exists(/databases/$(database)/documents/organizations/$(orgId)) &&
           uid in get(/databases/$(database)/documents/organizations/$(orgId)).data.members;
  }
  
  // Vérifier si un utilisateur est admin/owner d'une organisation
  function isOrgAdmin(orgId, uid) {
    return exists(/databases/$(database)/documents/organizations/$(orgId)) &&
           uid in get(/databases/$(database)/documents/organizations/$(orgId)).data.members &&
           get(/databases/$(database)/documents/organizations/$(orgId)).data.members[uid].role in ['owner', 'admin'];
  }
  
  // Déterminer qui peut écrire quel paramètre
  function canWriteSetting(settingType, orgId, uid) {
    // Paramètres critiques (entreprise, facturation) : admins uniquement
    return (settingType in ['entreprise', 'factureParameters', 'emailSettings'] && 
            isOrgAdmin(orgId, uid)) ||
           // Paramètres généraux : tous les membres
           (settingType in ['general', 'appearance', 'notifications'] && 
            isOrgMember(orgId, uid));
  }
  
  // Validation des données d'organisation
  function validateOrganizationData(data) {
    return data.keys().hasAll(['name', 'ownerId', 'members', 'createdAt', 'isActive']) &&
           data.name is string &&
           data.name.size() > 0 &&
           data.name.size() <= 100 &&
           data.ownerId is string &&
           data.members is map &&
           data.createdAt is timestamp &&
           data.isActive is bool;
  }
}
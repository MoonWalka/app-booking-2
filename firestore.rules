rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // üö® R√àGLE PAR D√âFAUT : TOUT INTERDIT SAUF EXCEPTIONS EXPLICITES
    match /{document=**} {
      allow read, write: if false;
    }
    
    // üè¢ ORGANISATIONS : Gestion des organisations
    match /organizations/{orgId} {
      // Lecture autoris√©e si l'utilisateur est membre
      allow read: if request.auth != null && 
                    request.auth.uid in resource.data.members;
      
      // Cr√©ation par n'importe quel utilisateur authentifi√©
      allow create: if request.auth != null &&
                      validateOrganizationData(request.resource.data) &&
                      request.resource.data.ownerId == request.auth.uid &&
                      request.auth.uid in request.resource.data.members &&
                      request.resource.data.members[request.auth.uid].role == 'owner';
      
      // Mise √† jour par les admins/propri√©taires uniquement
      allow update: if request.auth != null &&
                      request.auth.uid in resource.data.members &&
                      (resource.data.members[request.auth.uid].role == 'owner' ||
                       resource.data.members[request.auth.uid].role == 'admin') &&
                      validateOrganizationData(request.resource.data);
      
      // Suppression par le propri√©taire uniquement
      allow delete: if request.auth != null &&
                      request.auth.uid in resource.data.members &&
                      resource.data.members[request.auth.uid].role == 'owner';
    }
    
    // üë• INDEX UTILISATEUR-ORGANISATIONS
    match /user_organizations/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // üìß INVITATIONS D'ORGANISATION
    match /organization_invitations/{inviteId} {
      // Lecture par le destinataire ou les admins de l'organisation
      allow read: if request.auth != null && 
                    (resource.data.email == request.auth.token.email ||
                     isOrgAdmin(resource.data.organizationId, request.auth.uid));
      
      // Cr√©ation par les admins de l'organisation
      allow create: if request.auth != null &&
                      isOrgAdmin(request.resource.data.organizationId, request.auth.uid) &&
                      validateInvitationData(request.resource.data);
      
      // Mise √† jour par le destinataire (accepter/refuser) ou les admins
      allow update: if request.auth != null &&
                      (resource.data.email == request.auth.token.email ||
                       isOrgAdmin(resource.data.organizationId, request.auth.uid));
      
      // Suppression par les admins
      allow delete: if request.auth != null &&
                      isOrgAdmin(resource.data.organizationId, request.auth.uid);
    }
    
    // üìÇ COLLECTIONS ORGANISATIONNELLES (Pattern g√©n√©rique)
    match /{collection}_org_{orgId}/{docId} {
      // R√®gles g√©n√©riques pour toutes les collections organisationnelles
      allow read: if request.auth != null && 
                    isOrgMember(orgId, request.auth.uid);
      
      allow create: if request.auth != null && 
                      isOrgMember(orgId, request.auth.uid) &&
                      request.resource.data.organizationId == orgId;
      
      allow update: if request.auth != null && 
                      isOrgMember(orgId, request.auth.uid) &&
                      request.resource.data.organizationId == orgId;
      
      allow delete: if request.auth != null && 
                      isOrgMember(orgId, request.auth.uid);
    }
    
    // üéµ CONCERTS ORGANISATIONNELS (r√®gles sp√©cifiques si besoin)
    match /concerts_org_{orgId}/{concertId} {
      // H√©rite des r√®gles g√©n√©riques ci-dessus
      // Ajouter des r√®gles sp√©cifiques si n√©cessaire
    }
    
    // üë• PROGRAMMATEURS ORGANISATIONNELS
    match /programmateurs_org_{orgId}/{progId} {
      // H√©rite des r√®gles g√©n√©riques
    }
    
    // üé§ ARTISTES ORGANISATIONNELS
    match /artistes_org_{orgId}/{artisteId} {
      // H√©rite des r√®gles g√©n√©riques
    }
    
    // üèüÔ∏è LIEUX ORGANISATIONNELS
    match /lieux_org_{orgId}/{lieuId} {
      // H√©rite des r√®gles g√©n√©riques
    }
    
    // üè¢ STRUCTURES ORGANISATIONNELLES
    match /structures_org_{orgId}/{structureId} {
      // H√©rite des r√®gles g√©n√©riques
    }
    
    // üìù CONTRATS ORGANISATIONNELS
    match /contrats_org_{orgId}/{contratId} {
      // H√©rite des r√®gles g√©n√©riques
    }
    
    // üéµ CONCERTS : Lecture publique pour affichage, √©criture authentifi√©e
    match /concerts/{concertId} {
      allow read: if true; // Lecture publique pour l'affichage des concerts
      
      allow create: if request.auth != null && 
                      validateConcertData(request.resource.data) &&
                      request.resource.data.createdBy == request.auth.uid;
      
      allow update: if request.auth != null && 
                      validateConcertData(request.resource.data) &&
                      (resource.data.createdBy == request.auth.uid || 
                       isAdmin(request.auth.uid));
      
      allow delete: if request.auth != null && 
                      (resource.data.createdBy == request.auth.uid || 
                       isAdmin(request.auth.uid));
    }
    
    // üë• UTILISATEURS : Acc√®s priv√© strict
    match /users/{userId} {
      allow read, write: if request.auth != null && 
                           request.auth.uid == userId;
      
      allow create: if request.auth != null && 
                      request.auth.uid == userId &&
                      validateUserData(request.resource.data);
    }
    
    // üé≠ PROGRAMMATEURS : Authentification obligatoire
    match /programmateurs/{progId} {
      allow read: if request.auth != null;
      
      allow create: if request.auth != null && 
                      validateProgrammateurData(request.resource.data) &&
                      request.resource.data.createdBy == request.auth.uid;
      
      allow update: if request.auth != null && 
                      validateProgrammateurData(request.resource.data) &&
                      (resource.data.createdBy == request.auth.uid || 
                       isAdmin(request.auth.uid));
      
      allow delete: if request.auth != null && 
                      (resource.data.createdBy == request.auth.uid || 
                       isAdmin(request.auth.uid));
    }
    
    // üé§ ARTISTES : Authentification obligatoire
    match /artistes/{artisteId} {
      allow read: if request.auth != null;
      
      allow create: if request.auth != null && 
                      validateArtisteData(request.resource.data) &&
                      request.resource.data.createdBy == request.auth.uid;
      
      allow update: if request.auth != null && 
                      validateArtisteData(request.resource.data) &&
                      (resource.data.createdBy == request.auth.uid || 
                       isAdmin(request.auth.uid));
      
      allow delete: if request.auth != null && 
                      (resource.data.createdBy == request.auth.uid || 
                       isAdmin(request.auth.uid));
    }
    
    // üèüÔ∏è LIEUX : Authentification obligatoire
    match /lieux/{lieuId} {
      allow read: if request.auth != null;
      
      allow create: if request.auth != null && 
                      validateLieuData(request.resource.data) &&
                      request.resource.data.createdBy == request.auth.uid;
      
      allow update: if request.auth != null && 
                      validateLieuData(request.resource.data) &&
                      (resource.data.createdBy == request.auth.uid || 
                       isAdmin(request.auth.uid));
      
      allow delete: if request.auth != null && 
                      (resource.data.createdBy == request.auth.uid || 
                       isAdmin(request.auth.uid));
    }
    
    // üìù FORMULAIRES : Gestion des liens et r√©ponses de formulaires
    match /formLinks/{linkId} {
      allow read: if true; // Lecture publique pour acc√®s au formulaire
      allow create: if request.auth != null && 
                      request.resource.data.createdBy == request.auth.uid;
      allow update, delete: if request.auth != null && 
                              resource.data.createdBy == request.auth.uid;
    }
    
    match /formResponses/{responseId} {
      allow create: if true; // Cr√©ation publique pour soumission de formulaire
      allow read, update, delete: if request.auth != null && 
                                     (resource.data.createdBy == request.auth.uid || 
                                      isAdmin(request.auth.uid));
    }
    
    // üîî RELANCES : Gestion des relances et rappels
    match /relances/{relanceId} {
      // Lecture autoris√©e pour les membres de l'organisation
      allow read: if request.auth != null && 
                    resource.data.organizationId != null &&
                    isOrgMember(resource.data.organizationId, request.auth.uid);
      
      // Cr√©ation par les membres de l'organisation
      allow create: if request.auth != null && 
                      request.resource.data.organizationId != null &&
                      isOrgMember(request.resource.data.organizationId, request.auth.uid) &&
                      validateRelanceData(request.resource.data) &&
                      request.resource.data.userId == request.auth.uid;
      
      // Mise √† jour par le cr√©ateur ou les admins de l'organisation
      allow update: if request.auth != null && 
                      resource.data.organizationId != null &&
                      isOrgMember(resource.data.organizationId, request.auth.uid) &&
                      (resource.data.userId == request.auth.uid || 
                       isOrgAdmin(resource.data.organizationId, request.auth.uid)) &&
                      validateRelanceData(request.resource.data);
      
      // Suppression par le cr√©ateur ou les admins de l'organisation
      allow delete: if request.auth != null && 
                      resource.data.organizationId != null &&
                      (resource.data.userId == request.auth.uid || 
                       isOrgAdmin(resource.data.organizationId, request.auth.uid));
    }
    
    // üîß LOGS et AUDIT : Acc√®s admin uniquement
    match /logs/{logId} {
      allow read, write: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    match /audit/{auditId} {
      allow read, write: if request.auth != null && isAdmin(request.auth.uid);
    }
  }
  
  // üõ°Ô∏è FONCTIONS DE VALIDATION ET S√âCURIT√â
  
  // V√©rifier si un utilisateur est admin
  function isAdmin(uid) {
    return exists(/databases/$(database)/documents/users/$(uid)) &&
           get(/databases/$(database)/documents/users/$(uid)).data.role == 'admin';
  }
  
  // Validation des donn√©es de concert
  function validateConcertData(data) {
    return data.keys().hasAll(['titre', 'dateCreation']) &&
           data.titre is string &&
           data.titre.size() > 0 &&
           data.titre.size() <= 200 &&
           data.dateCreation is timestamp &&
           (!('status' in data) || data.status in ['contact', 'preaccord', 'contrat', 'acompte', 'solde', 'annule']);
  }
  
  // Validation des donn√©es de programmateur
  function validateProgrammateurData(data) {
    return data.keys().hasAll(['nom', 'contact']) &&
           data.nom is string &&
           data.nom.size() > 0 &&
           data.nom.size() <= 100 &&
           data.contact is map &&
           data.contact.keys().hasAll(['email']) &&
           data.contact.email is string &&
           data.contact.email.matches('.*@.*\\..*');
  }
  
  // Validation des donn√©es d'artiste
  function validateArtisteData(data) {
    return data.keys().hasAll(['nom']) &&
           data.nom is string &&
           data.nom.size() > 0 &&
           data.nom.size() <= 100;
  }
  
  // Validation des donn√©es de lieu
  function validateLieuData(data) {
    return data.keys().hasAll(['nom', 'ville']) &&
           data.nom is string &&
           data.nom.size() > 0 &&
           data.nom.size() <= 100 &&
           data.ville is string &&
           data.ville.size() > 0 &&
           data.ville.size() <= 100;
  }
  
  // Validation des donn√©es utilisateur
  function validateUserData(data) {
    return data.keys().hasAll(['email', 'createdAt']) &&
           data.email is string &&
           data.email.matches('.*@.*\\..*') &&
           data.createdAt is timestamp &&
           (!('role' in data) || data.role in ['user', 'admin']);
  }
  
  // V√©rifier si un utilisateur est membre d'une organisation
  function isOrgMember(orgId, uid) {
    return exists(/databases/$(database)/documents/organizations/$(orgId)) &&
           uid in get(/databases/$(database)/documents/organizations/$(orgId)).data.members;
  }
  
  // V√©rifier si un utilisateur est admin/owner d'une organisation
  function isOrgAdmin(orgId, uid) {
    return exists(/databases/$(database)/documents/organizations/$(orgId)) &&
           uid in get(/databases/$(database)/documents/organizations/$(orgId)).data.members &&
           get(/databases/$(database)/documents/organizations/$(orgId)).data.members[uid].role in ['owner', 'admin'];
  }
  
  // Validation des donn√©es d'organisation
  function validateOrganizationData(data) {
    return data.keys().hasAll(['name', 'ownerId', 'members', 'createdAt', 'isActive']) &&
           data.name is string &&
           data.name.size() > 0 &&
           data.name.size() <= 100 &&
           data.ownerId is string &&
           data.members is map &&
           data.createdAt is timestamp &&
           data.isActive is bool;
  }
  
  // Validation des donn√©es d'invitation
  function validateInvitationData(data) {
    return data.keys().hasAll(['organizationId', 'email', 'role', 'status', 'createdAt']) &&
           data.organizationId is string &&
           data.email is string &&
           data.email.matches('.*@.*\\..*') &&
           data.role in ['member', 'admin'] &&
           data.status in ['pending', 'accepted', 'rejected', 'expired'] &&
           data.createdAt is timestamp;
  }
  
  // Validation des donn√©es de relance
  function validateRelanceData(data) {
    return data.keys().hasAll(['titre', 'dateEcheance', 'priorite', 'status', 'organizationId', 'userId']) &&
           data.titre is string &&
           data.titre.size() > 0 &&
           data.titre.size() <= 200 &&
           data.dateEcheance is string &&
           data.priorite in ['low', 'medium', 'high'] &&
           data.status in ['pending', 'completed'] &&
           data.organizationId is string &&
           data.userId is string &&
           (!('description' in data) || (data.description is string && data.description.size() <= 1000)) &&
           (!('entityType' in data) || data.entityType in ['concert', 'contrat', 'contact', 'autre', '']) &&
           (!('entityId' in data) || data.entityId is string) &&
           (!('entityName' in data) || data.entityName is string);
  }
} 
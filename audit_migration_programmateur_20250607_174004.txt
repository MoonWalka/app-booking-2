AUDIT MIGRATION PROGRAMMATEUR → CONTACT
Date: Sat Jun  7 17:40:04 CEST 2025
=======================================

FICHIERS AVEC OCCURRENCES:
=========================
  37 src//hooks/contrats/contractVariables.js
  29 src//components/pdf/ContratPDFWrapper.js
  16 src//hooks/contrats/useContratGenerator.js
  13 src//components/forms/FormSubmissionViewer.js
  13 src//components/contrats/sections/ContratInfoCard.js
  12 src//components/contrats/ContratTemplateEditorSimple.js
  10 src//components/contrats/desktop/hooks/useTemplateVariables.js
   9 src//pages/ContratDetailsPage.js
   7 src//hooks/concerts/useConcertFormFixed.js
   5 src//components/lieux/desktop/LieuForm.js
   5 src//components/forms/validation/FormValidationInterfaceNew.js
   5 src//components/forms/validation/FormValidationInterface.js
   5 src//components/forms/mobile/FormValidationInterface.js
   5 src//components/forms/PublicContactForm.js
   4 src//components/contrats/desktop/hooks/useContratTemplatePreview.js
   4 src//components/contrats/desktop/ContratGenerator.js
   3 src//hooks/forms/useFormValidationData.js
   3 src//components/contrats/sections/ContratsTable.js
   3 src//components/contrats/desktop/sections/ContratDebugPanel.js
   2 src//pages/FormResponsePage.js
   2 src//components/lieux/mobile/LieuView.js
   2 src//components/lieux/desktop/sections/LieuStructuresSection.js
   2 src//components/contrats/desktop/sections/ContratGenerationActions.js
   1 src//pages/ContratGenerationPage.js
   1 src//hooks/concerts/useConcertListSimplified.js
   1 src//hooks/concerts/useConcertFilters.js
   1 src//components/debug/StructureVariableTest.js
   1 src//components/contrats/sections/ContratPdfViewer.js
   1 src//components/contrats/desktop/hooks/useTemplateEditor.js
   1 src//components/artistes/mobile/ArtisteView.js

DÉTAIL DES OCCURRENCES PAR FICHIER:
==================================
src//components/forms/mobile/FormValidationInterface.js:    programmateur, // Rétrocompatibilité
src//components/forms/mobile/FormValidationInterface.js:        existingData={contact || programmateur}
src//components/forms/mobile/FormValidationInterface.js:        formData={formData.programmateurData || formData.contactData || formData.data}
src//components/forms/mobile/FormValidationInterface.js:        existingData={contact || programmateur}
src//components/forms/mobile/FormValidationInterface.js:        formData={formData.programmateurData || formData.contactData || formData.data}
src//components/forms/FormSubmissionViewer.js:          // Rétrocompatibilité avec l'ancienne structure (programmateur → contact)
src//components/forms/FormSubmissionViewer.js:          submission.contactData?.contact || submission.programmateurData?.contact && (
src//components/forms/FormSubmissionViewer.js:                  <dd>{submission.contactData?.contact?.nom || submission.programmateurData?.contact?.nom || 'N/A'}</dd>
src//components/forms/FormSubmissionViewer.js:                  <dd>{submission.contactData?.contact?.prenom || submission.programmateurData?.contact?.prenom || 'N/A'}</dd>
src//components/forms/FormSubmissionViewer.js:                  <dd>{submission.contactData?.contact?.email || submission.programmateurData?.contact?.email || 'N/A'}</dd>
src//components/forms/FormSubmissionViewer.js:                  <dd>{submission.contactData?.contact?.telephone || submission.programmateurData?.contact?.telephone || 'N/A'}</dd>
src//components/forms/FormSubmissionViewer.js:                  <dd>{submission.contactData?.contact?.fonction || submission.programmateurData?.contact?.fonction || 'N/A'}</dd>
src//components/forms/FormSubmissionViewer.js:                {(submission.contactData?.structure || submission.programmateurData?.structure) && (
src//components/forms/FormSubmissionViewer.js:                    <dd>{submission.contactData?.structure?.raisonSociale || submission.contactData?.structure?.nom || submission.programmateurData?.structure?.raisonSociale || submission.programmateurData?.structure?.nom || 'N/A'}</dd>
src//components/forms/FormSubmissionViewer.js:                    <dd>{submission.contactData?.structure?.siret || submission.programmateurData?.structure?.siret || 'N/A'}</dd>
src//components/forms/FormSubmissionViewer.js:                    <dd>{submission.contactData?.structure?.type || submission.programmateurData?.structure?.type || 'N/A'}</dd>
src//components/forms/FormSubmissionViewer.js:                      {submission.contactData?.structure?.adresse || submission.programmateurData?.structure?.adresse || ''}<br />
src//components/forms/FormSubmissionViewer.js:                      {submission.contactData?.structure?.codePostal || submission.programmateurData?.structure?.codePostal} {submission.contactData?.structure?.ville || submission.programmateurData?.structure?.ville}
src//components/forms/validation/FormValidationInterface.js:    programmateur, // Rétrocompatibilité
src//components/forms/validation/FormValidationInterface.js:        existingData={contact || programmateur}
src//components/forms/validation/FormValidationInterface.js:        formData={formData.signataireData || formData.programmateurData || formData.contactData || formData.data}
src//components/forms/validation/FormValidationInterface.js:        existingData={contact || programmateur}
src//components/forms/validation/FormValidationInterface.js:        formData={formData.structureData || formData.programmateurData || formData.contactData || formData.data}
src//components/forms/validation/FormValidationInterfaceNew.js:    programmateur, // Rétrocompatibilité
src//components/forms/validation/FormValidationInterfaceNew.js:        existingData={contact || programmateur}
src//components/forms/validation/FormValidationInterfaceNew.js:        formData={formData.programmateurData || formData.contactData || formData.data}
src//components/forms/validation/FormValidationInterfaceNew.js:        existingData={contact || programmateur}
src//components/forms/validation/FormValidationInterfaceNew.js:        formData={formData.programmateurData || formData.contactData || formData.data}
src//components/forms/PublicContactForm.js:  programmateurEmail // Rétrocompatibilité
src//components/forms/PublicContactForm.js:    signataireEmail: contactEmail || programmateurEmail || '', // Prérempli si disponible
src//components/forms/PublicContactForm.js:          if (formLinkData.contactEmail || formLinkData.programmateurEmail) {
src//components/forms/PublicContactForm.js:              signataireEmail: prev.signataireEmail || formLinkData.contactEmail || formLinkData.programmateurEmail
src//components/forms/PublicContactForm.js:                  signataireEmail: submissionData.signataireData?.email || formLinkData.contactEmail || formLinkData.programmateurEmail || '',
src//components/pdf/ContratPDFWrapper.js:    programmateur,  // Rétrocompatibilité
src//components/pdf/ContratPDFWrapper.js:    programmateurData,  // Rétrocompatibilité
src//components/pdf/ContratPDFWrapper.js:    programmateur: programmateur || programmateurData || {},  // Rétrocompatibilité
src//components/pdf/ContratPDFWrapper.js:    'contact_nom': safeData.contact?.nom || safeData.programmateur?.nom || 'Non spécifié',
src//components/pdf/ContratPDFWrapper.js:    'contact_prenom': safeData.contact?.prenom || safeData.programmateur?.prenom || '',
src//components/pdf/ContratPDFWrapper.js:    'contact_structure': safeData.contact?.structure || safeData.programmateur?.structure || 'Non spécifiée',
src//components/pdf/ContratPDFWrapper.js:    'contact_email': safeData.contact?.email || safeData.programmateur?.email || 'Non spécifié',
src//components/pdf/ContratPDFWrapper.js:    'contact_telephone': safeData.contact?.telephone || safeData.programmateur?.telephone || 'Non spécifié',
src//components/pdf/ContratPDFWrapper.js:    'contact_adresse': safeData.contact?.adresse || safeData.programmateur?.adresse || 'Non spécifiée',
src//components/pdf/ContratPDFWrapper.js:    'contact_siret': safeData.contact?.siret || safeData.programmateur?.siret || 'Non spécifié',
src//components/pdf/ContratPDFWrapper.js:    'contact_numero_intracommunautaire': safeData.contact?.numeroIntracommunautaire || safeData.programmateur?.numeroIntracommunautaire || safeData.programmateur?.numero_intracommunautaire || 'Non spécifié',
src//components/pdf/ContratPDFWrapper.js:    'contact_representant': safeData.contact?.representant || safeData.programmateur?.representant || safeData.contact?.nom || safeData.programmateur?.nom || 'Non spécifié',
src//components/pdf/ContratPDFWrapper.js:    'contact_qualite_representant': safeData.contact?.qualiteRepresentant || safeData.programmateur?.qualiteRepresentant || safeData.programmateur?.qualite_representant || safeData.contact?.fonction || safeData.programmateur?.fonction || 'Non spécifiée',
src//components/pdf/ContratPDFWrapper.js:    'programmateur_nom': safeData.contact?.nom || safeData.programmateur?.nom || 'Non spécifié',
src//components/pdf/ContratPDFWrapper.js:    'programmateur_prenom': safeData.contact?.prenom || safeData.programmateur?.prenom || '',
src//components/pdf/ContratPDFWrapper.js:    'programmateur_structure': safeData.contact?.structure || safeData.programmateur?.structure || 'Non spécifiée',
src//components/pdf/ContratPDFWrapper.js:    'programmateur_email': safeData.contact?.email || safeData.programmateur?.email || 'Non spécifié',
src//components/pdf/ContratPDFWrapper.js:    'programmateur_telephone': safeData.contact?.telephone || safeData.programmateur?.telephone || 'Non spécifié',
src//components/pdf/ContratPDFWrapper.js:    'programmateur_adresse': safeData.contact?.adresse || safeData.programmateur?.adresse || 'Non spécifiée',
src//components/pdf/ContratPDFWrapper.js:    'programmateur_siret': safeData.contact?.siret || safeData.programmateur?.siret || 'Non spécifié',
src//components/pdf/ContratPDFWrapper.js:    'programmateur_numero_intracommunautaire': safeData.contact?.numeroIntracommunautaire || safeData.programmateur?.numeroIntracommunautaire || safeData.programmateur?.numero_intracommunautaire || 'Non spécifié',
src//components/pdf/ContratPDFWrapper.js:    'programmateur_representant': safeData.contact?.representant || safeData.programmateur?.representant || safeData.contact?.nom || safeData.programmateur?.nom || 'Non spécifié',
src//components/pdf/ContratPDFWrapper.js:    'programmateur_qualite_representant': safeData.contact?.qualiteRepresentant || safeData.programmateur?.qualiteRepresentant || safeData.programmateur?.qualite_representant || safeData.contact?.fonction || safeData.programmateur?.fonction || 'Non spécifiée',
src//components/pdf/ContratPDFWrapper.js:    'structure_nom': safeData.structure?.nom || safeData.structure?.raisonSociale || safeData.contact?.structure || safeData.programmateur?.structure || 'Non spécifiée',
src//components/pdf/ContratPDFWrapper.js:    'structure_siret': safeData.structure?.siret || safeData.contact?.siret || safeData.programmateur?.siret || 'Non spécifié',
src//components/pdf/ContratPDFWrapper.js:      return safeData.structure?.adresse || safeData.contact?.adresse || safeData.programmateur?.adresse || 'Non spécifiée';
src//components/pdf/ContratPDFWrapper.js:  programmateurData, 
src//components/pdf/ContratPDFWrapper.js:    programmateur: programmateurData || {},
src//components/pdf/ContratPDFWrapper.js:            Programmateur: {safeData.programmateur.structure || 'Non spécifié'}
src//components/lieux/desktop/sections/LieuStructuresSection.js:                            {(structure.contact || structure.programmateur) && (
src//components/lieux/desktop/sections/LieuStructuresSection.js:                                Contact: {structure.contact || structure.programmateur}
src//components/lieux/desktop/LieuForm.js:    contactSearch: programmateurSearch, // Alias pour rétrocompatibilité
src//components/lieux/desktop/LieuForm.js:                contact={programmateurSearch?.selectedEntity}
src//components/lieux/desktop/LieuForm.js:                programmateur={programmateurSearch?.selectedEntity}
src//components/lieux/desktop/LieuForm.js:                onContactChange={programmateurSearch?.setSelectedEntity}
src//components/lieux/desktop/LieuForm.js:                onProgrammateurChange={programmateurSearch?.setSelectedEntity}
src//components/lieux/mobile/LieuView.js:  const contact = relatedData?.programmateur; // Rétrocompatibilité - données mappées depuis programmateur
src//components/lieux/mobile/LieuView.js:  const loadingContact = loadingRelated?.programmateur; // Rétrocompatibilité
src//components/contrats/sections/ContratInfoCard.js:  // Support rétrocompatibilité pour l'ancien paramètre 'programmateur'
src//components/contrats/sections/ContratInfoCard.js:  const programmateur = contact;
src//components/contrats/sections/ContratInfoCard.js:    programmateur // Rétrocompatibilité
src//components/contrats/sections/ContratInfoCard.js:    console.log('[DEBUG ContratInfoCard] formatContact - contact:', programmateur, 'concert?.programmateurNom:', concert?.programmateurNom);
src//components/contrats/sections/ContratInfoCard.js:    if (!programmateur && !concert?.programmateurNom) {
src//components/contrats/sections/ContratInfoCard.js:    if (programmateur) {
src//components/contrats/sections/ContratInfoCard.js:      const nomComplet = programmateur.prenom && programmateur.nom 
src//components/contrats/sections/ContratInfoCard.js:        ? `${programmateur.prenom} ${programmateur.nom}`
src//components/contrats/sections/ContratInfoCard.js:        : programmateur.nom || 'Nom non spécifié';
src//components/contrats/sections/ContratInfoCard.js:      const structure = programmateur.structureCache?.raisonSociale 
src//components/contrats/sections/ContratInfoCard.js:        || programmateur.structure?.nom 
src//components/contrats/sections/ContratInfoCard.js:        || programmateur.structure 
src//components/contrats/sections/ContratInfoCard.js:    return concert.programmateurNom;
src//components/contrats/sections/ContratPdfViewer.js:    programmateurData: pdfData.programmateur,
src//components/contrats/sections/ContratsTable.js:      key: 'concert.programmateurNom',
src//components/contrats/sections/ContratsTable.js:        <div className={styles.programmateurInfo}>
src//components/contrats/sections/ContratsTable.js:          {contrat.concert?.contactNom || contrat.concert?.programmateurNom || 'N/A'}
src//components/contrats/desktop/sections/ContratDebugPanel.js:  programmateur,
src//components/contrats/desktop/sections/ContratDebugPanel.js:          <h6>Données du programmateur</h6>
src//components/contrats/desktop/sections/ContratDebugPanel.js:            {JSON.stringify(programmateur, null, 2)}
src//components/contrats/desktop/sections/ContratGenerationActions.js:  programmateur,
src//components/contrats/desktop/sections/ContratGenerationActions.js:                programmateurData={programmateur}
src//components/contrats/desktop/ContratGenerator.js:  // Support rétrocompatibilité pour l'ancien paramètre 'programmateur'
src//components/contrats/desktop/ContratGenerator.js:  const programmateur = contact;
src//components/contrats/desktop/ContratGenerator.js:                programmateur={programmateur}
src//components/contrats/desktop/ContratGenerator.js:          programmateur={programmateur}
src//components/contrats/desktop/hooks/useTemplateVariables.js:    { label: 'Contact', value: 'programmateur_nom' }, // Variable rétrocompatible
src//components/contrats/desktop/hooks/useTemplateVariables.js:    { label: 'Structure du contact', value: 'programmateur_structure_nom' }, // Variable rétrocompatible
src//components/contrats/desktop/hooks/useTemplateVariables.js:    // Variables contact (rétrocompatibilité - utilisent les variables programmateur_*)
src//components/contrats/desktop/hooks/useTemplateVariables.js:    { label: 'Contact - Nom', value: 'programmateur_nom' },
src//components/contrats/desktop/hooks/useTemplateVariables.js:    { label: 'Contact - Email', value: 'programmateur_email' },
src//components/contrats/desktop/hooks/useTemplateVariables.js:    { label: 'Contact - Téléphone', value: 'programmateur_telephone' },
src//components/contrats/desktop/hooks/useTemplateVariables.js:    { label: 'Contact - Structure', value: 'programmateur_structure_nom' },
src//components/contrats/desktop/hooks/useTemplateVariables.js:    { label: 'Contact - Nom', value: 'programmateur_nom' }, // Variable rétrocompatible
src//components/contrats/desktop/hooks/useTemplateVariables.js:    { label: 'Contact - Fonction', value: 'programmateur_fonction' }, // Variable rétrocompatible
src//components/contrats/desktop/hooks/useTemplateVariables.js:    { label: 'Contact - Structure', value: 'programmateur_structure_nom' }, // Variable rétrocompatible
src//components/contrats/desktop/hooks/useTemplateEditor.js:        programmateur_nom: 'Jean Dupont', // Maintenu pour rétrocompatibilité
src//components/contrats/desktop/hooks/useContratTemplatePreview.js:      .replace(/{programmateur_nom}/g, 'Jean Dupont') // Rétrocompatibilité
src//components/contrats/desktop/hooks/useContratTemplatePreview.js:      .replace(/{programmateur_structure}/g, 'Association Culturelle XYZ') // Rétrocompatibilité
src//components/contrats/desktop/hooks/useContratTemplatePreview.js:      .replace(/{programmateur_email}/g, 'contact@asso-xyz.fr') // Rétrocompatibilité
src//components/contrats/desktop/hooks/useContratTemplatePreview.js:      .replace(/{programmateur_siret}/g, '123 456 789 00012') // Rétrocompatibilité
src//components/contrats/ContratTemplateEditorSimple.js:    // Variables programmateur (rétrocompatibilité - maintenant équivalent aux variables contact)
src//components/contrats/ContratTemplateEditorSimple.js:    { category: 'Contact (Compat.)', label: 'Nom du contact', value: '{programmateur_nom}' },
src//components/contrats/ContratTemplateEditorSimple.js:    { category: 'Contact (Compat.)', label: 'Prénom du contact', value: '{programmateur_prenom}' },
src//components/contrats/ContratTemplateEditorSimple.js:    { category: 'Contact (Compat.)', label: 'Structure du contact', value: '{programmateur_structure}' },
src//components/contrats/ContratTemplateEditorSimple.js:    { category: 'Contact (Compat.)', label: 'Email du contact', value: '{programmateur_email}' },
src//components/contrats/ContratTemplateEditorSimple.js:    { category: 'Contact (Compat.)', label: 'Téléphone du contact', value: '{programmateur_telephone}' },
src//components/contrats/ContratTemplateEditorSimple.js:    { category: 'Contact (Compat.)', label: 'Adresse du contact', value: '{programmateur_adresse}' },
src//components/contrats/ContratTemplateEditorSimple.js:    { category: 'Contact (Compat.)', label: 'SIRET du contact', value: '{programmateur_siret}' },
src//components/contrats/ContratTemplateEditorSimple.js:    { category: 'Contact (Compat.)', label: 'N° TVA du contact', value: '{programmateur_numero_intracommunautaire}' },
src//components/contrats/ContratTemplateEditorSimple.js:    { category: 'Contact (Compat.)', label: 'Représentant légal', value: '{programmateur_representant}' },
src//components/contrats/ContratTemplateEditorSimple.js:    { category: 'Contact (Compat.)', label: 'Qualité du représentant', value: '{programmateur_qualite_representant}' },
src//components/contrats/ContratTemplateEditorSimple.js:    { category: 'Signature', label: 'Fonction programmateur', value: '{programmateur_fonction}' },
src//components/artistes/mobile/ArtisteView.js:                        <div className={styles.concertProgrammateur}>{concert.contactNom || concert.programmateurNom || '-'}</div>
src//components/debug/StructureVariableTest.js:        programmateur: { ...mockProgrammateur, structureId: structure.id }, // Rétrocompatibilité
src//hooks/concerts/useConcertFilters.js:        concert.programmateurNom?.toLowerCase().includes(term) ||
src//hooks/concerts/useConcertFormFixed.js:      programmateurNom: '', // Rétrocompatibilité
src//hooks/concerts/useConcertFormFixed.js:      if (formData.contactId && (formData.contactNom || formData.programmateurNom)) {
src//hooks/concerts/useConcertFormFixed.js:          nom: formData.contactNom || formData.programmateurNom,
src//hooks/concerts/useConcertFormFixed.js:          prenom: formData.contactPrenom || formData.programmateurPrenom || ''
src//hooks/concerts/useConcertFormFixed.js:          name: 'programmateurNom', // Rétrocompatibilité
src//hooks/concerts/useConcertFormFixed.js:    genericFormHook.handleChange({ target: { name: 'programmateurNom', value: '' } }); // Rétrocompatibilité
src//hooks/concerts/useConcertFormFixed.js:    programmateur: localProgrammateur,
src//hooks/concerts/useConcertListSimplified.js:          concert.programmateur?.nom
src//hooks/forms/useFormValidationData.js: * @returns {Object|null} returns.contact - Données du contact existant (rétrocompatibilité avec programmateur)
src//hooks/forms/useFormValidationData.js:        const contactIdToUse = formDocData.programmId || concertData.contactId || concertData.programmateurId;
src//hooks/forms/useFormValidationData.js:    programmateur: contact, // Rétrocompatibilité
src//hooks/contrats/useContratGenerator.js: * @param {Object} contact - Données du contact (anciennement programmateur)
src//hooks/contrats/useContratGenerator.js:  // Support rétrocompatibilité pour l'ancien paramètre 'programmateur'
src//hooks/contrats/useContratGenerator.js:  const programmateur = contact;
src//hooks/contrats/useContratGenerator.js:      // Variables contact (compatibilité rétrograde - ancienne nomenclature programmateur)
src//hooks/contrats/useContratGenerator.js:      programmateur_nom: contact?.nom || 'Non spécifié',
src//hooks/contrats/useContratGenerator.js:      programmateur_prenom: contact?.prenom || '',
src//hooks/contrats/useContratGenerator.js:      programmateur_structure: structureData?.nom || contact?.structure || 'Non spécifiée',
src//hooks/contrats/useContratGenerator.js:      programmateur_email: contact?.email || 'Non spécifié',
src//hooks/contrats/useContratGenerator.js:      programmateur_telephone: contact?.telephone || 'Non spécifié',
src//hooks/contrats/useContratGenerator.js:      programmateur_siret: structureData?.siret || contact?.siret || 'Non spécifié',
src//hooks/contrats/useContratGenerator.js:      programmateur_adresse: (() => {
src//hooks/contrats/useContratGenerator.js:      programmateur_numero_intracommunautaire: structureData?.numeroIntracommunautaire || contact?.numeroIntracommunautaire || contact?.numero_intracommunautaire || 'Non spécifié',
src//hooks/contrats/useContratGenerator.js:      programmateur_representant: contact?.representant || contact?.nom || 'Non spécifié',
src//hooks/contrats/useContratGenerator.js:      programmateur_qualite_representant: contact?.qualiteRepresentant || contact?.qualite_representant || contact?.fonction || 'Non spécifiée',
src//hooks/contrats/useContratGenerator.js:      structureProgrammateur: programmateur?.structure || 'Non spécifiée',
src//hooks/contrats/useContratGenerator.js:  }, [structureData, programmateur, artiste, lieu, concert, entrepriseInfo]);
src//hooks/contrats/contractVariables.js:  // Variables programmateur (compatibilité rétrograde - maintenant équivalent aux variables contact)
src//hooks/contrats/contractVariables.js:  'programmateur_nom': { label: 'Nom du contact', category: 'contact', source: 'programmateur.nom' },
src//hooks/contrats/contractVariables.js:  'programmateur_prenom': { label: 'Prénom du contact', category: 'contact', source: 'programmateur.prenom' },
src//hooks/contrats/contractVariables.js:  'programmateur_structure': { label: 'Structure du contact', category: 'contact', source: 'programmateur.structure' },
src//hooks/contrats/contractVariables.js:  'programmateur_email': { label: 'Email du contact', category: 'contact', source: 'programmateur.email' },
src//hooks/contrats/contractVariables.js:  'programmateur_telephone': { label: 'Téléphone du contact', category: 'contact', source: 'programmateur.telephone' },
src//hooks/contrats/contractVariables.js:  'programmateur_adresse': { label: 'Adresse du contact', category: 'contact', source: 'programmateur.adresse' },
src//hooks/contrats/contractVariables.js:  'programmateur_siret': { label: 'SIRET du contact', category: 'contact', source: 'programmateur.siret' },
src//hooks/contrats/contractVariables.js:  'programmateur_numero_intracommunautaire': { label: 'N° TVA du contact', category: 'contact', source: 'programmateur.numeroIntracommunautaire' },
src//hooks/contrats/contractVariables.js:  'programmateur_representant': { label: 'Représentant légal', category: 'contact', source: 'programmateur.representant' },
src//hooks/contrats/contractVariables.js:  'programmateur_qualite_representant': { label: 'Qualité du représentant', category: 'contact', source: 'programmateur.qualiteRepresentant' },
src//hooks/contrats/contractVariables.js: * @param {Object} contactData - Les données du contact (anciennement programmateurData)
src//hooks/contrats/contractVariables.js:  const programmateur = {
src//hooks/contrats/contractVariables.js:    'programmateur_nom': contactData?.nom || '',
src//hooks/contrats/contractVariables.js:    'programmateur_prenom': contactData?.prenom || '',
src//hooks/contrats/contractVariables.js:    'programmateur_email': contactData?.email || '',
src//hooks/contrats/contractVariables.js:    'programmateur_telephone': contactData?.telephone || '',
src//hooks/contrats/contractVariables.js:    'programmateur_representant': `${contactData?.prenom || ''} ${contactData?.nom || ''}`.trim(),
src//hooks/contrats/contractVariables.js:    'programmateur_qualite_representant': contactData?.fonction || ''
src//hooks/contrats/contractVariables.js:    programmateur['programmateur_structure'] = structureData.nom || '';
src//hooks/contrats/contractVariables.js:    programmateur['programmateur_siret'] = structureData.siret || '';
src//hooks/contrats/contractVariables.js:    programmateur['programmateur_adresse'] = structureData.adresse || '';
src//hooks/contrats/contractVariables.js:    programmateur['programmateur_numero_intracommunautaire'] = structureData.numeroIntracommunautaire || '';
src//hooks/contrats/contractVariables.js:  return programmateur;
src//hooks/contrats/contractVariables.js:  "programmateur_nom", "programmateur_structure", "programmateur_email", "programmateur_siret",
src//hooks/contrats/contractVariables.js:  "programmateur_numero_intracommunautaire",
src//hooks/contrats/contractVariables.js:  "programmateur_adresse",
src//hooks/contrats/contractVariables.js:  "programmateur_representant",
src//hooks/contrats/contractVariables.js:  "programmateur_qualite_representant",
src//hooks/contrats/contractVariables.js:  "programmateur_nom", "programmateur_structure", "programmateur_email", "programmateur_siret",
src//hooks/contrats/contractVariables.js:  "programmateur_numero_intracommunautaire",
src//hooks/contrats/contractVariables.js:  "programmateur_adresse",
src//hooks/contrats/contractVariables.js:  "programmateur_representant",
src//hooks/contrats/contractVariables.js:  "programmateur_qualite_representant",
src//hooks/contrats/contractVariables.js:  "programmateur_nom", "programmateur_structure", "artiste_nom", "lieu_ville",
src//hooks/contrats/contractVariables.js:  "programmateur_representant",
src//hooks/contrats/contractVariables.js:  "programmateur_qualite_representant",
src//pages/ContratDetailsPage.js:    programmateur, // Rétrocompatibilité
src//pages/ContratDetailsPage.js:    programmateur,
src//pages/ContratDetailsPage.js:            contact: contact || programmateur, // Priorité au contact, fallback programmateur
src//pages/ContratDetailsPage.js:            programmateur: contact || programmateur, // Rétrocompatibilité
src//pages/ContratDetailsPage.js:  }, [searchParams, loading, contrat, showPdfViewer, contratId, navigate, togglePdfViewer, setPreviewType, generatePDFPreview, concert, template, contact, programmateur, lieu, artiste, entreprise]);
src//pages/ContratDetailsPage.js:    contact: contact || programmateur, // Priorité au contact, fallback programmateur
src//pages/ContratDetailsPage.js:    programmateur: contact || programmateur, // Rétrocompatibilité
src//pages/ContratDetailsPage.js:        contact={contact || programmateur}
src//pages/ContratDetailsPage.js:        programmateur={contact || programmateur} // Rétrocompatibilité
src//pages/ContratGenerationPage.js:            programmateur={contact} // Rétrocompatibilité
src//pages/FormResponsePage.js:          if (formLinkData.contactEmail || formLinkData.programmateurEmail) {
src//pages/FormResponsePage.js:            setContactEmail(formLinkData.contactEmail || formLinkData.programmateurEmail);

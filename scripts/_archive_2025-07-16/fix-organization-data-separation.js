#!/usr/bin/env node
/**
 * Script pour corriger le probl√®me de s√©paration des donn√©es entre organisations
 * Ce script applique les corrections n√©cessaires pour garantir que toutes les donn√©es
 * sont correctement filtr√©es par entrepriseId
 */

const fs = require('fs');
const path = require('path');

console.log('üîß Application des correctifs de s√©curit√© pour la s√©paration des donn√©es\n');

// Fichier √† corriger
const listWithFiltersPath = path.join(__dirname, '../src/components/ui/ListWithFilters.js');

// V√©rifier si le fichier existe
if (!fs.existsSync(listWithFiltersPath)) {
  console.error('‚ùå Fichier ListWithFilters.js non trouv√©!');
  process.exit(1);
}

// Lire le contenu actuel
let content = fs.readFileSync(listWithFiltersPath, 'utf8');
const originalContent = content;

// V√©rifier si les corrections ont d√©j√† √©t√© appliqu√©es
if (content.includes('useOrganization') && content.includes('currentOrganization?.id')) {
  console.log('‚úÖ Les corrections semblent d√©j√† appliqu√©es!');
  console.log('   - Import de useOrganization: ‚úì');
  console.log('   - Utilisation de currentOrganization: ‚úì');
  console.log('   - Filtre entrepriseId: ‚úì');
  process.exit(0);
}

console.log('üìù Application des corrections...\n');

// 1. Ajouter l'import de useOrganization si n√©cessaire
if (!content.includes("import { useOrganization }")) {
  console.log('1. Ajout de l\'import useOrganization...');
  
  // Trouver la position apr√®s les autres imports
  const lastImportMatch = content.match(/import[^;]+from[^;]+;(?=\s*\/\*\*|\s*const)/g);
  if (lastImportMatch) {
    const lastImport = lastImportMatch[lastImportMatch.length - 1];
    const insertPosition = content.indexOf(lastImport) + lastImport.length;
    
    content = content.slice(0, insertPosition) + 
      "\nimport { useOrganization } from '@/context/OrganizationContext';" + 
      content.slice(insertPosition);
    
    console.log('   ‚úì Import ajout√©');
  }
}

// 2. Ajouter currentOrganization dans le composant
if (!content.includes('const { currentOrganization }')) {
  console.log('2. Ajout de currentOrganization dans le composant...');
  
  // Trouver la ligne avec useResponsive
  const useResponsiveMatch = content.match(/const\s*{\s*isMobile\s*}\s*=\s*useResponsive\(\);/);
  if (useResponsiveMatch) {
    const insertPosition = content.indexOf(useResponsiveMatch[0]) + useResponsiveMatch[0].length;
    
    content = content.slice(0, insertPosition) + 
      "\n  const { currentOrganization } = useOrganization();" + 
      content.slice(insertPosition);
    
    console.log('   ‚úì Hook useOrganization ajout√©');
  }
}

// 3. Modifier la fonction loadData pour ajouter le filtre entrepriseId
console.log('3. Modification de la fonction loadData...');

// Chercher le pattern de construction de la requ√™te
const queryPattern = /const collectionRef = collection\(db, collectionName\);\s*\/\/ Construction de la requ√™te\s*let q = collectionRef;/;

if (queryPattern.test(content)) {
  content = content.replace(queryPattern, `const collectionRef = collection(db, collectionName);
      
      // Construction de la requ√™te avec les filtres
      const queryConditions = [];
      
      // IMPORTANT: Toujours filtrer par entrepriseId pour la s√©curit√©
      if (currentOrganization?.id) {
        queryConditions.push(where('entrepriseId', '==', currentOrganization.id));
      } else {
        console.warn('‚ö†Ô∏è Pas d\\'organisation courante - impossible de filtrer les donn√©es');
        setItems([]);
        setLoading(false);
        return;
      }`);
  
  console.log('   ‚úì Filtre entrepriseId ajout√©');
}

// 4. Mettre √† jour la construction de la requ√™te avec les conditions
const oldQueryBuild = /if \(filterConditions\.length > 0\) {\s*q = query\(q, \.\.\.filterConditions\);\s*}/;
const newQueryBuild = `queryConditions.push(...filterConditions);
      }
      
      // Construire la requ√™te initiale avec les conditions
      let q = queryConditions.length > 0 ? query(collectionRef, ...queryConditions) : collectionRef`;

if (oldQueryBuild.test(content)) {
  content = content.replace(oldQueryBuild, newQueryBuild);
  console.log('   ‚úì Construction de requ√™te mise √† jour');
}

// 5. Ajouter currentOrganization?.id dans les d√©pendances du useCallback
const dependenciesPattern = /}, \[entityType, filters, sort, pageSize\]\);/;
if (dependenciesPattern.test(content) && !content.includes('currentOrganization?.id')) {
  content = content.replace(dependenciesPattern, '}, [entityType, filters, sort, pageSize, currentOrganization?.id]);');
  console.log('   ‚úì D√©pendances du useCallback mises √† jour');
}

// Sauvegarder si des modifications ont √©t√© faites
if (content !== originalContent) {
  // Cr√©er une sauvegarde
  const backupPath = listWithFiltersPath + '.backup-' + Date.now();
  fs.writeFileSync(backupPath, originalContent);
  console.log(`\nüì¶ Sauvegarde cr√©√©e: ${path.basename(backupPath)}`);
  
  // √âcrire les modifications
  fs.writeFileSync(listWithFiltersPath, content);
  console.log('\n‚úÖ Corrections appliqu√©es avec succ√®s!');
  
  console.log('\nüìã R√©sum√© des modifications:');
  console.log('   - Import de useOrganization ajout√©');
  console.log('   - Hook useOrganization utilis√© dans le composant');
  console.log('   - Filtre entrepriseId ajout√© dans loadData');
  console.log('   - Gestion des cas sans organisation');
  console.log('   - D√©pendances du useCallback mises √† jour');
  
  console.log('\n‚ö†Ô∏è  Actions suppl√©mentaires recommand√©es:');
  console.log('   1. Tester l\'application avec plusieurs organisations');
  console.log('   2. V√©rifier que les donn√©es sont bien filtr√©es');
  console.log('   3. Appliquer des r√®gles de s√©curit√© Firestore');
  
} else {
  console.log('\n‚úÖ Aucune modification n√©cessaire - Le fichier semble d√©j√† corrig√©');
}

console.log('\nüéØ Prochaines √©tapes:');
console.log('   1. Red√©marrer l\'application: npm start');
console.log('   2. Tester avec diff√©rentes organisations');
console.log('   3. Ex√©cuter le script d\'audit: node scripts/audit-organization-data-separation.js');

process.exit(0);
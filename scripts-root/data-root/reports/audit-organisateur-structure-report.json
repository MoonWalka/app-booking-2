{
  "organisateur": {
    "files": {},
    "usage": {
      "id": [
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 34,
          "content": "organisateurId: prefilledData.structureId || '',",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 203,
          "content": "organisateurId: structure.id,",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 227,
          "content": "organisateurId: prefilledData.structureId || '',",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 245,
          "content": "if (!formData.date || !formData.artisteId || !formData.organisateurId) {",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 264,
          "content": "organisateurId: formData.organisateurId,",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 40,
          "content": "organisateurId: prefilledData.structureId || '',",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 241,
          "content": "organisateurId: structure.id,",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 265,
          "content": "organisateurId: prefilledData.structureId || '',",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 283,
          "content": "if (!formData.date || !formData.artisteId || !formData.organisateurId) {",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 302,
          "content": "organisateurId: formData.organisateurId,",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 609,
          "content": "organisateurId: formData.organisateurId,",
          "module": "other"
        }
      ],
      "nom": [
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 35,
          "content": "organisateurNom: prefilledData.structureName || '',",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 204,
          "content": "organisateurNom: structure.nom",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 228,
          "content": "organisateurNom: prefilledData.structureName || '',",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 265,
          "content": "organisateurNom: formData.organisateurNom,",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 41,
          "content": "organisateurNom: prefilledData.structureName || '',",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 242,
          "content": "organisateurNom: structure.nom",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 266,
          "content": "organisateurNom: prefilledData.structureName || '',",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 303,
          "content": "organisateurNom: formData.organisateurNom,",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 610,
          "content": "organisateurNom: formData.organisateurNom,",
          "module": "other"
        }
      ],
      "general": [
        {
          "file": "src/components/common/__tests__/UnifiedContactSelector.test.js",
          "line": 383,
          "content": "label=\"Organisateur(s)\"",
          "module": "other"
        },
        {
          "file": "src/components/common/__tests__/UnifiedContactSelector.test.js",
          "line": 387,
          "content": "expect(screen.getByText('Organisateur(s)')).toBeInTheDocument();",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 18,
          "content": "const [organisateurSearch, setOrganisateurSearch] = useState(prefilledData.structureName || '');",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 21,
          "content": "const [showOrganisateurDropdown, setShowOrganisateurDropdown] = useState(false);",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 26,
          "content": "const organisateurDropdownRef = useRef(null);",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 34,
          "content": "organisateurId: prefilledData.structureId || '',",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 57,
          "content": "if (organisateurDropdownRef.current && !organisateurDropdownRef.current.contains(event.target)) {",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 181,
          "content": "structure.searchText.includes(organisateurSearch.toLowerCase())",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 200,
          "content": "const handleOrganisateurSelect = (structure) => {",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 203,
          "content": "organisateurId: structure.id,",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 206,
          "content": "setOrganisateurSearch(structure.nom);",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 227,
          "content": "organisateurId: prefilledData.structureId || '',",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 235,
          "content": "setOrganisateurSearch(prefilledData.structureName || '');",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 238,
          "content": "setShowOrganisateurDropdown(false);",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 245,
          "content": "if (!formData.date || !formData.artisteId || !formData.organisateurId) {",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 264,
          "content": "organisateurId: formData.organisateurId,",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 265,
          "content": "organisateurNom: formData.organisateurNom,",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 371,
          "content": "{/* Organisateur */}",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 373,
          "content": "<Form.Label>Organisateur *</Form.Label>",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 374,
          "content": "<div className={styles.dropdownContainer} ref={organisateurDropdownRef}>",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 378,
          "content": "value={organisateurSearch}",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 380,
          "content": "setOrganisateurSearch(e.target.value);",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 383,
          "content": "onFocus={() => setShowOrganisateurDropdown(true)}",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 385,
          "content": "{showOrganisateurDropdown && filteredStructures.length > 0 && (",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 391,
          "content": "onClick={() => handleOrganisateurSelect(structure)}",
          "module": "other"
        },
        {
          "file": "src/components/concerts/DatesList.js",
          "line": 56,
          "content": "organisateur: concert.contactNom || '-',",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/DatesList.js",
          "line": 148,
          "content": "id: 'organisateur',",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/DatesList.js",
          "line": 150,
          "content": "field: 'organisateur',",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/DatesList.js",
          "line": 153,
          "content": "render: (item) => item.organisateur || '-',",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertForm.js",
          "line": 202,
          "content": "label=\"Organisateurs\"",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertView.js",
          "line": 243,
          "content": "{/* Contact/Organisateur */}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertView.js",
          "line": 248,
          "content": "subtitle=\"Organisateur\"",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertViewWithRelances.js",
          "line": 240,
          "content": "{/* Contacts/Organisateurs */}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertViewWithRelances.js",
          "line": 247,
          "content": "subtitle={contacts.length > 1 ? `Organisateur ${index + 1}` : 'Organisateur'}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertViewWithRelances.js",
          "line": 262,
          "content": "subtitle=\"Organisateur\"",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertViewWithRelancesWithRoles.js",
          "line": 237,
          "content": "subtitle=\"Organisateur\"",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/mobile/sections/ConcertOrganizerSectionMobile.js",
          "line": 6,
          "content": "* Section Organisateur (Contact) de la fiche concert pour mobile",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/mobile/sections/ConcertOrganizerSectionMobile.js",
          "line": 7,
          "content": "* Affiche les informations de l'organisateur et gère l'envoi de formulaire",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/mobile/sections/ConcertOrganizerSectionMobile.js",
          "line": 40,
          "content": "<h3 className={styles.sectionTitle}>Organisateur</h3>",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/mobile/sections/ConcertOrganizerSectionMobile.js",
          "line": 46,
          "content": "Rechercher un organisateur",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/mobile/sections/ConcertOrganizerSectionMobile.js",
          "line": 53,
          "content": "placeholder=\"Nom de l'organisateur ou structure\"",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/mobile/sections/ConcertOrganizerSectionMobile.js",
          "line": 96,
          "content": "Aucun organisateur trouvé",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/mobile/sections/ConcertOrganizerSectionMobile.js",
          "line": 109,
          "content": "{/* Organisateur sélectionné */}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/mobile/sections/ConcertOrganizerSectionMobile.js",
          "line": 149,
          "content": "<h3 className={styles.sectionTitle}>Organisateur</h3>",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/mobile/sections/ConcertOrganizerSectionMobile.js",
          "line": 289,
          "content": "<p>Aucun organisateur sélectionné</p>",
          "module": "concerts"
        },
        {
          "file": "src/components/contacts/ContactDatesTable.js",
          "line": 285,
          "content": "title = 'En attente des données organisateur';",
          "module": "contacts"
        },
        {
          "file": "src/components/contrats/ContratTemplateEditorSimple.js",
          "line": 74,
          "content": "description: 'Le plus courant - L\\'organisateur achète un spectacle clé en main'",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/ContratTemplateEditorSimple.js",
          "line": 513,
          "content": "'Le plus courant - L\\'organisateur achète un spectacle clé en main'}",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 27,
          "content": "// Contractants - Partie A (Organisateur)",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 111,
          "content": "organisateur: {",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 346,
          "content": "{/* Partie A - Organisateur */}",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 349,
          "content": "<h5>{contratData.organisateur.raisonSociale || 'Organisateur'}</h5>",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 370,
          "content": "onChange={(e) => handleInputChange('organisateur', 'raisonSociale', e.target.value)}",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 375,
          "content": "onChange={(e) => handleInputChange('organisateur', 'adresse', e.target.value)}",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 380,
          "content": "onChange={(e) => handleInputChange('organisateur', 'suiteAdresse2', e.target.value)}",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 385,
          "content": "onChange={(e) => handleInputChange('organisateur', 'codePostal', e.target.value)}",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 389,
          "content": "onChange={(e) => handleInputChange('organisateur', 'pays', e.target.value)}",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 399,
          "content": "onChange={(e) => handleInputChange('organisateur', 'departement', e.target.value)}",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 404,
          "content": "onChange={(e) => handleInputChange('organisateur', 'email', e.target.value)}",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 409,
          "content": "onChange={(e) => handleInputChange('organisateur', 'fax', e.target.value)}",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 414,
          "content": "onChange={(e) => handleInputChange('organisateur', 'signataire', e.target.value)}",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 419,
          "content": "onChange={(e) => handleInputChange('organisateur', 'siret', e.target.value)}",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 424,
          "content": "onChange={(e) => handleInputChange('organisateur', 'numeroLicence', e.target.value)}",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 442,
          "content": "onChange={(e) => handleInputChange('organisateur', 'suiteAdresse', e.target.value)}",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 447,
          "content": "onChange={(e) => handleInputChange('organisateur', 'suiteAdresse3', e.target.value)}",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 452,
          "content": "onChange={(e) => handleInputChange('organisateur', 'ville', e.target.value)}",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 457,
          "content": "onChange={(e) => handleInputChange('organisateur', 'region', e.target.value)}",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 462,
          "content": "onChange={(e) => handleInputChange('organisateur', 'telephone', e.target.value)}",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 467,
          "content": "onChange={(e) => handleInputChange('organisateur', 'site', e.target.value)}",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 472,
          "content": "onChange={(e) => handleInputChange('organisateur', 'qualite', e.target.value)}",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 477,
          "content": "onChange={(e) => handleInputChange('organisateur', 'numeroTva', e.target.value)}",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 482,
          "content": "onChange={(e) => handleInputChange('organisateur', 'codeApe', e.target.value)}",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 638,
          "content": "+ Gérer les salles utilisées par l'organisateur",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 1056,
          "content": "<option value=\"Organisateur\">Organisateur</option>",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/sections/ContratTemplateSignatureSection.js",
          "line": 65,
          "content": "Pour l'Organisateur,                    Pour l'Artiste,",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/sections/UserGuide.js",
          "line": 36,
          "content": "<li><strong>Contrat de cession</strong> : Le plus courant - L'organisateur achète un spectacle clé en main</li>",
          "module": "contrats"
        },
        {
          "file": "src/components/dates/DatesTable.js",
          "line": 82,
          "content": "organisateur: concert.contactNom || '-',",
          "module": "other"
        },
        {
          "file": "src/components/dates/configs/datesDirectoryConfig.js",
          "line": 69,
          "content": "id: 'organisateur',",
          "module": "other"
        },
        {
          "file": "src/components/dates/configs/datesDirectoryConfig.js",
          "line": 71,
          "content": "field: 'organisateur',",
          "module": "other"
        },
        {
          "file": "src/components/dates/configs/datesDirectoryConfig.js",
          "line": 74,
          "content": "render: (item) => item.organisateur || '-',",
          "module": "other"
        },
        {
          "file": "src/components/dates/configs/datesDirectoryConfig.js",
          "line": 176,
          "content": "id: 'organisateur',",
          "module": "other"
        },
        {
          "file": "src/components/dates/configs/datesDirectoryConfig.js",
          "line": 178,
          "content": "field: 'organisateur',",
          "module": "other"
        },
        {
          "file": "src/components/dates/configs/datesDirectoryConfig.js",
          "line": 180,
          "content": "placeholder: 'Nom organisateur'",
          "module": "other"
        },
        {
          "file": "src/components/debug/UnifiedContactSelectorTest.js",
          "line": 165,
          "content": "label=\"Organisateur principal\"",
          "module": "other"
        },
        {
          "file": "src/components/forms/public/PreContratFormContainer.js",
          "line": 59,
          "content": "message=\"Ce lien de pré-contrat a expiré. Veuillez contacter l'organisateur pour obtenir un nouveau lien.\"",
          "module": "forms"
        },
        {
          "file": "src/components/forms/public/PreContratFormContainer.js",
          "line": 99,
          "content": "// Organisateur",
          "module": "forms"
        },
        {
          "file": "src/components/forms/public/PreContratFormPublic.js",
          "line": 63,
          "content": "// Organisateur",
          "module": "forms"
        },
        {
          "file": "src/components/forms/public/PreContratFormPublic.js",
          "line": 138,
          "content": "// Organisateur",
          "module": "forms"
        },
        {
          "file": "src/components/forms/public/PreContratFormPublic.js",
          "line": 520,
          "content": "{/* Section Organisateur */}",
          "module": "forms"
        },
        {
          "file": "src/components/forms/public/PreContratFormPublic.js",
          "line": 522,
          "content": "<h2>Organisateur</h2>",
          "module": "forms"
        },
        {
          "file": "src/components/forms/public/PublicFormContainer.js",
          "line": 44,
          "content": "message=\"Ce lien de formulaire a expiré. Veuillez contacter l'organisateur pour obtenir un nouveau lien.\"",
          "module": "forms"
        },
        {
          "file": "src/components/parametrage/MentionsManager.js",
          "line": 63,
          "content": "texte: 'Hébergement à la charge de l\\'organisateur',",
          "module": "other"
        },
        {
          "file": "src/components/parametrage/ModeleContratContent.js",
          "line": 131,
          "content": "<div style=\"margin-bottom: 50px;\"><strong>Pour l'Organisateur:</strong></div>",
          "module": "other"
        },
        {
          "file": "src/components/parametres/sync/SyncManager.js",
          "line": 235,
          "content": "{name === 'contacts' && 'Contacts et organisateurs'}",
          "module": "other"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 149,
          "content": "// Données organisateur du formulaire public",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 500,
          "content": "Ce pré-contrat contient des données soumises par l'organisateur via le formulaire public.",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 786,
          "content": "Gérer les salles utilisées par l'organisateur",
          "module": "precontrats"
        },
        {
          "file": "src/config/tagsHierarchy.js",
          "line": 151,
          "content": "{ id: 'organisateur-sans-lieu', label: 'Organisateur sans lieu' },",
          "module": "other"
        },
        {
          "file": "src/pages/ConfirmationPage.js",
          "line": 9,
          "content": "* Deux colonnes : Mes informations (éditable) | Informations organisateur (lecture seule)",
          "module": "other"
        },
        {
          "file": "src/pages/ConfirmationPage.js",
          "line": 97,
          "content": "const [infosOrganisateur, setInfosOrganisateur] = useState({});",
          "module": "other"
        },
        {
          "file": "src/pages/ConfirmationPage.js",
          "line": 133,
          "content": "// Données de l'organisateur (colonne droite)",
          "module": "other"
        },
        {
          "file": "src/pages/ConfirmationPage.js",
          "line": 177,
          "content": "[champ]: infosOrganisateur[champ] || ''",
          "module": "other"
        },
        {
          "file": "src/pages/ConfirmationPage.js",
          "line": 185,
          "content": "nouveauxChamps[champ] = infosOrganisateur[champ] || '';",
          "module": "other"
        },
        {
          "file": "src/pages/ConfirmationPage.js",
          "line": 257,
          "content": "Deux colonnes : Mes informations (éditable) à gauche, Informations de l'organisateur (lecture seule) à droite",
          "module": "other"
        },
        {
          "file": "src/pages/ConfirmationPage.js",
          "line": 292,
          "content": "<Col md={5} className={styles.organisateurCol}>",
          "module": "other"
        },
        {
          "file": "src/pages/ConfirmationPage.js",
          "line": 293,
          "content": "<h6 className={styles.columnTitle}>Informations organisateur</h6>",
          "module": "other"
        },
        {
          "file": "src/pages/ConfirmationPage.js",
          "line": 1127,
          "content": "<Col md={5} className={styles.organisateurCol}>",
          "module": "other"
        },
        {
          "file": "src/pages/ConfirmationPage.js",
          "line": 1128,
          "content": "<h6 className={styles.columnTitle}>Informations organisateur</h6>",
          "module": "other"
        },
        {
          "file": "src/pages/ConfirmationPage.js",
          "line": 1316,
          "content": "<Col md={5} className={styles.organisateurCol}>",
          "module": "other"
        },
        {
          "file": "src/pages/ConfirmationPage.js",
          "line": 1317,
          "content": "<h6 className={styles.columnTitle}>Informations organisateur</h6>",
          "module": "other"
        },
        {
          "file": "src/pages/ConfirmationPage.js",
          "line": 1839,
          "content": "<Col md={5} className={styles.organisateurCol}>",
          "module": "other"
        },
        {
          "file": "src/pages/ConfirmationPage.js",
          "line": 1840,
          "content": "<h6 className={styles.columnTitle}>Informations organisateur</h6>",
          "module": "other"
        },
        {
          "file": "src/pages/ConfirmationPage.js",
          "line": 2155,
          "content": "<Col md={5} className={styles.organisateurCol}>",
          "module": "other"
        },
        {
          "file": "src/pages/ConfirmationPage.js",
          "line": 2156,
          "content": "<h6 className={styles.columnTitle}>Informations organisateur</h6>",
          "module": "other"
        },
        {
          "file": "src/pages/ConfirmationPage.js",
          "line": 2428,
          "content": "<Col md={5} className={styles.organisateurCol}>",
          "module": "other"
        },
        {
          "file": "src/pages/ConfirmationPage.js",
          "line": 2429,
          "content": "<h6 className={styles.columnTitle}>Informations organisateur</h6>",
          "module": "other"
        },
        {
          "file": "src/pages/ConfirmationPage.js",
          "line": 2701,
          "content": "<Col md={5} className={styles.organisateurCol}>",
          "module": "other"
        },
        {
          "file": "src/pages/ConfirmationPage.js",
          "line": 2702,
          "content": "<h6 className={styles.columnTitle}>Informations organisateur</h6>",
          "module": "other"
        },
        {
          "file": "src/pages/ContratRedactionPage.js",
          "line": 70,
          "content": "<p>D'une part, [ORGANISATEUR] ci-après dénommé \"l'Organisateur\"</p>",
          "module": "other"
        },
        {
          "file": "src/pages/ContratRedactionPage.js",
          "line": 77,
          "content": "<p>L'organisateur s'engage à mettre à disposition de l'artiste tous les moyens techniques nécessaires à la bonne réalisation de la prestation.</p>",
          "module": "other"
        },
        {
          "file": "src/pages/ContratRedactionPage.js",
          "line": 80,
          "content": "<p>En contrepartie de cette prestation, l'organisateur versera à l'artiste la somme de [MONTANT] euros.</p>",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 24,
          "content": "const [organisateurSearch, setOrganisateurSearch] = useState(prefilledData.structureName || '');",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 27,
          "content": "const [showOrganisateurDropdown, setShowOrganisateurDropdown] = useState(false);",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 32,
          "content": "const organisateurDropdownRef = useRef(null);",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 40,
          "content": "organisateurId: prefilledData.structureId || '',",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 55,
          "content": "if (organisateurDropdownRef.current && !organisateurDropdownRef.current.contains(event.target)) {",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 220,
          "content": "structure.searchText.includes(organisateurSearch.toLowerCase())",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 238,
          "content": "const handleOrganisateurSelect = (structure) => {",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 241,
          "content": "organisateurId: structure.id,",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 244,
          "content": "setOrganisateurSearch(structure.nom);",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 265,
          "content": "organisateurId: prefilledData.structureId || '',",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 273,
          "content": "setOrganisateurSearch(prefilledData.structureName || '');",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 276,
          "content": "setShowOrganisateurDropdown(false);",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 283,
          "content": "if (!formData.date || !formData.artisteId || !formData.organisateurId) {",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 302,
          "content": "organisateurId: formData.organisateurId,",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 303,
          "content": "organisateurNom: formData.organisateurNom,",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 357,
          "content": "Créez une nouvelle date en associant un artiste/projet avec un organisateur",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 516,
          "content": "{/* Organisateur */}",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 517,
          "content": "<Form.Group className=\"mb-4\" ref={organisateurDropdownRef} style={{ position: 'relative' }}>",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 520,
          "content": "Organisateur *",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 525,
          "content": "value={organisateurSearch}",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 527,
          "content": "setOrganisateurSearch(e.target.value);",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 530,
          "content": "onFocus={() => setShowOrganisateurDropdown(true)}",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 533,
          "content": "{showOrganisateurDropdown && filteredStructures.length > 0 && (",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 539,
          "content": "onClick={() => handleOrganisateurSelect(structure)}",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 609,
          "content": "organisateurId: formData.organisateurId,",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 610,
          "content": "organisateurNom: formData.organisateurNom,",
          "module": "other"
        },
        {
          "file": "src/pages/FormResponsePage.js",
          "line": 232,
          "content": "<p>Ce lien de formulaire a expiré. Veuillez contacter l'organisateur pour obtenir un nouveau lien.</p>",
          "module": "other"
        },
        {
          "file": "src/pages/contratTemplatesPage.js",
          "line": 153,
          "content": "<div style=\"margin-bottom: 50px;\"><strong>Pour l'Organisateur:</strong></div>",
          "module": "other"
        },
        {
          "file": "src/types/brevoTypes.js",
          "line": 21,
          "content": "contact_organisateur: 'string',",
          "module": "other"
        },
        {
          "file": "src/types/brevoTypes.js",
          "line": 23,
          "content": "telephone_organisateur: 'string'",
          "module": "other"
        },
        {
          "file": "src/types/brevoTypes.js",
          "line": 136,
          "content": "contact_organisateur: 'Équipe TourCraft',",
          "module": "other"
        },
        {
          "file": "src/types/brevoTypes.js",
          "line": 138,
          "content": "telephone_organisateur: '01 00 00 00 00',",
          "module": "other"
        },
        {
          "file": "src/utils/createDefaultContractTemplate.js",
          "line": 58,
          "content": "Ci-après dénommé \"<strong>L'ORGANISATEUR</strong>\"</p>",
          "module": "other"
        },
        {
          "file": "src/utils/createDefaultContractTemplate.js",
          "line": 74,
          "content": "<p>En contrepartie de la cession des droits d'exploitation du spectacle, L'ORGANISATEUR s'engage à verser au PRODUCTEUR la somme de :</p>",
          "module": "other"
        },
        {
          "file": "src/utils/createDefaultContractTemplate.js",
          "line": 86,
          "content": "<h4>Article 4 - OBLIGATIONS DE L'ORGANISATEUR</h4>",
          "module": "other"
        },
        {
          "file": "src/utils/createDefaultContractTemplate.js",
          "line": 120,
          "content": "<p><strong>L'ORGANISATEUR</strong></p>",
          "module": "other"
        },
        {
          "file": "src/utils/templateDiagnostic.js",
          "line": 116,
          "content": "<div style=\"margin-bottom: 50px;\"><strong>Pour l'Organisateur:</strong></div>",
          "module": "other"
        },
        {
          "file": "src/utils/templateVariables.js",
          "line": 44,
          "content": "// Contacts organisateur",
          "module": "other"
        },
        {
          "file": "src/utils/templateVariables.js",
          "line": 45,
          "content": "contact_organisateur: DefaultVariables.contact_organisateur,",
          "module": "other"
        },
        {
          "file": "src/utils/templateVariables.js",
          "line": 47,
          "content": "telephone_organisateur: DefaultVariables.telephone_organisateur",
          "module": "other"
        },
        {
          "file": "src/utils/templateVariables.js",
          "line": 95,
          "content": "contact_urgence: `${DefaultVariables.contact_organisateur} - ${DefaultVariables.telephone_organisateur}`",
          "module": "other"
        },
        {
          "file": "src/utils/templateVariables.js",
          "line": 147,
          "content": "contact_juridique: DefaultVariables.contact_organisateur",
          "module": "other"
        }
      ]
    },
    "totalOccurrences": 234
  },
  "structure": {
    "files": {},
    "usage": {
      "id": [
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 34,
          "content": "organisateurId: prefilledData.structureId || '',",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 227,
          "content": "organisateurId: prefilledData.structureId || '',",
          "module": "other"
        },
        {
          "file": "src/components/concerts/ConcertsList.js",
          "line": 469,
          "content": "if (!concert.structureId) {",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertForm.js",
          "line": 228,
          "content": "selectedStructure={structure || (formData.structureId ? { id: formData.structureId, nom: formData.structureNom || 'Structure sélectionnée' } : null)}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertView.js",
          "line": 60,
          "content": "structureId: structure.structureId,",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertView.js",
          "line": 266,
          "content": "const structureId = structure.id || structure.structureId;",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertView.js",
          "line": 267,
          "content": "console.log('[ConcertView] ID structure trouvé:', structureId);",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertViewWithRelances.js",
          "line": 66,
          "content": "structureId: structure.structureId,",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertViewWithRelances.js",
          "line": 281,
          "content": "const structureId = structure.id || structure.structureId;",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertViewWithRelances.js",
          "line": 282,
          "content": "console.log('[ConcertViewWithRelances] ID structure trouvé:', structureId);",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertViewWithRelancesWithRoles.js",
          "line": 291,
          "content": "const structureId = structure.id || structure.structureId;",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertViewWithRelancesWithRoles.js",
          "line": 292,
          "content": "navigateToEntity('structure', structureId);",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/mobile/ConcertView.js",
          "line": 157,
          "content": "navigateToStructureDetails={(structureId) => navigate(`/structures/${structureId}`)}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/sections/ConcertActions.js",
          "line": 85,
          "content": "if (!concert.structureId) {",
          "module": "concerts"
        },
        {
          "file": "src/components/contacts/ContactDatesTable.js",
          "line": 225,
          "content": "path: `/devis/nouveau?concertId=${item.id}&structureId=${item.structureId}`,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactDatesTable.js",
          "line": 227,
          "content": "params: { concertId: item.id, structureId: item.structureId },",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 36,
          "content": "// Amélioration: gérer aussi les cas comme _in_structureId",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 39,
          "content": "// D'abord, gérer le cas spécial _in_structureId pour les personnes dans une structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 219,
          "content": "if (structureData?.structureId) {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 220,
          "content": "navigateToEntity('structure', structureData.structureId, structureData.structureRaisonSociale);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 274,
          "content": "structureId: contact.id,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 448,
          "content": "console.log('[ContactViewTabs] Chargement des dates par structureId:', cleanId);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 718,
          "content": "onClick: () => openPersonneModal({ structureId: cleanId })",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 832,
          "content": "structureId={id}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 108,
          "content": "_structureId: structure.id,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListRelational.js",
          "line": 27,
          "content": "const toggleStructure = (structureId) => {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListRelational.js",
          "line": 29,
          "content": "if (newExpanded.has(structureId)) {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListRelational.js",
          "line": 32,
          "content": "newExpanded.add(structureId);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 83,
          "content": "structureId: structure.id,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 99,
          "content": "structureId: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 267,
          "content": "structureId: data.structureId || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 280,
          "content": "// Charger la structure liée si un structureId existe",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 283,
          "content": "const structureRef = doc(db, 'structures', data.structureId);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 563,
          "content": "structureId: selectedStructure?.id || formData.structureId || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactView.js",
          "line": 43,
          "content": "structureId: contact.structureId,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/mobile/ContactView.js",
          "line": 167,
          "content": "{contact.structureId ? (",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/ContactModalsContainer.js",
          "line": 73,
          "content": "structureId={personneModalData?.structureId}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/PersonneCreationModal.js",
          "line": 16,
          "content": "function PersonneCreationModal({ show, onHide, onCreated, editMode = false, initialData = null, structureId = null }) {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/PersonneCreationModal.js",
          "line": 189,
          "content": "isPersonneLibre: !structureId, // Personne libre seulement si pas de structureId",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/PersonneCreationModal.js",
          "line": 194,
          "content": "console.log('📎 [PersonneCreationModal] Structure ID fourni:', structureId);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/PersonneCreationModal.js",
          "line": 204,
          "content": "// Si un structureId est fourni, créer automatiquement la liaison",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/PersonneCreationModal.js",
          "line": 206,
          "content": "console.log('🔗 [PersonneCreationModal] Création de la liaison avec la structure:', structureId);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/PersonneCreationModal.js",
          "line": 210,
          "content": "structureId: structureId,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/PersonneCreationModal.js",
          "line": 237,
          "content": "structureId: structureId // Inclure le structureId pour que le parent sache qu'il y a une liaison",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactBottomTabs.js",
          "line": 153,
          "content": "structureId: extractedData.id || contactId,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 198,
          "content": "if (structureData?.structureId) {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 199,
          "content": "navigateToEntity('structure', structureData.structureId, structureData.structureRaisonSociale);",
          "module": "contacts"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 10,
          "content": "const [structureId, setStructureId] = useState('structure_1750614430892_trixam2ig');",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 27,
          "content": "structureId,",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 38,
          "content": "console.log(`🔍 Vérification de la structure: ${structureId}`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 43,
          "content": "const unifiedDoc = await getDoc(doc(db, 'contacts_unified', structureId));",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 66,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', structureId));",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 92,
          "content": "where('structureId', '==', structureId),",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 205,
          "content": "const structureId = unifiedDoc.id;",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 210,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', structureId));",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 215,
          "content": "where('structureId', '==', structureId),",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 221,
          "content": "id: structureId,",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 244,
          "content": "const structureId = structureDoc.id;",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 248,
          "content": "const unifiedDoc = await getDoc(doc(db, 'contacts_unified', structureId));",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 251,
          "content": "id: structureId,",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 303,
          "content": "value={structureId}",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 316,
          "content": "disabled={loading || !structureId}",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 60,
          "content": "structureId: '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 162,
          "content": "structureId: '', // Sera mis à jour après",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 191,
          "content": "const { id: structureId } = await createEntity('structures', structureData);",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 194,
          "content": "await updateBidirectionalRelation('structure', structureId, 'contact', contactId);",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 197,
          "content": "`Contact créé (${contactId}) et associé à la structure (${structureId})`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 200,
          "content": "await verifyBidirectionalRelation(structureId, contactId, 'structure-contact');",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 225,
          "content": "structureId: '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 269,
          "content": "const { id: structureId } = await createEntity('structures', structureData);",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 274,
          "content": "await updateBidirectionalRelation('structure', structureId, 'contact', contactId);",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 277,
          "content": "`Contact (${contactId}) associé au lieu (${lieuId}), concert (${concertId}) ET structure (${structureId})`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 285,
          "content": "contactFinal.structureId === structureId) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 392,
          "content": "structureId: sourceId,",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 439,
          "content": "if (structureData.contactIds?.includes(contactId) && contactData.structureId === entityId) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 353,
          "content": "Cet outil migre automatiquement les contacts avec structureId vers le format unifié",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 111,
          "content": "structureId: data.structureId || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 67,
          "content": "structureId: '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 263,
          "content": "const { id: structureId } = await createEntity('structures', structureData);",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 270,
          "content": "structureId: structureId,",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 283,
          "content": "await updateDoc(doc(db, 'structures', structureId), {",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 289,
          "content": "`✅ Structure créée (${structureId}) et associée au contact (${contactId})`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 315,
          "content": "const { id: structureId } = await createEntity('structures', structureData);",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 337,
          "content": "structureId: structureId,",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 355,
          "content": "structureId: structureId,",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 364,
          "content": "await updateDoc(doc(db, 'structures', structureId), {",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 379,
          "content": "`✅ Création complexe réussie: Concert (${concertId}) + Contact (${contactId}) + Lieu (${lieuId}) + Structure (${structureId})`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/FestitestContactFinder.js",
          "line": 195,
          "content": "'Structure ID': data.structureId || 'N/A',",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 104,
          "content": "liaisonsExistantes.add(`${liaison.structureId}-${liaison.personneId}`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 205,
          "content": "const structureId = `structure_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 232,
          "content": "await setDoc(doc(db, 'structures', structureId), structureData);",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 297,
          "content": "structureId: structureData.id,",
          "module": "other"
        },
        {
          "file": "src/components/debug/SophieMadetMigration.js",
          "line": 28,
          "content": "structureId: \"85011847200016\",",
          "module": "other"
        },
        {
          "file": "src/components/debug/SophieMadetMigration.js",
          "line": 120,
          "content": "if (completeData.structureId) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/SophieMadetMigration.js",
          "line": 133,
          "content": "if (data.metadata && data.metadata.originalStructureId === completeData.structureId) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/SystemAuditTool.js",
          "line": 84,
          "content": "structureId: data.structureId || null",
          "module": "other"
        },
        {
          "file": "src/components/debug/SystemAuditTool.js",
          "line": 101,
          "content": "structureId: data.structureId || null",
          "module": "other"
        },
        {
          "file": "src/components/debug/TestDeleteContactDebug.js",
          "line": 44,
          "content": "const structureId = doc.id;",
          "module": "other"
        },
        {
          "file": "src/components/debug/TestDeleteContactDebug.js",
          "line": 47,
          "content": "where('structureId', '==', structureId),",
          "module": "other"
        },
        {
          "file": "src/components/devis/DevisEditor.js",
          "line": 30,
          "content": "const structureId = searchParams.get('structureId');",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisEditor.js",
          "line": 40,
          "content": "structureId: structureId || '',",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 165,
          "content": "if (devisData.structureId && !devisData.adresseAdministrative) {",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 167,
          "content": "const structure = await getStructureById(devisData.structureId);",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 191,
          "content": "}, [devisData.structureId, devisData.adresseAdministrative, setDevisData]);",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 200,
          "content": "if (devisData.structureId) {",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 202,
          "content": "const structure = await getStructureById(devisData.structureId);",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 228,
          "content": "console.log('devisData.structureId:', devisData.structureId);",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 230,
          "content": "// Si pas de structureId, créer quand même quelques adresses d'exemple",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 232,
          "content": "console.log('Pas de structureId, création d\\'adresses d\\'exemple');",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 252,
          "content": "const structure = await getStructureById(devisData.structureId);",
          "module": "devis"
        },
        {
          "file": "src/components/lieux/desktop/LieuView.js",
          "line": 176,
          "content": "const structureId = structure.id || structure.structureId;",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/LieuView.js",
          "line": 177,
          "content": "navigateToEntity('structure', structureId);",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 157,
          "content": "const handleRemoveStructure = async (structureId) => {",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 160,
          "content": "const structureRef = doc(db, 'structures', structureId);",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 166,
          "content": "setStructures(prev => prev.filter(s => s.id !== structureId));",
          "module": "other"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 335,
          "content": "structureId: doc.id,",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 343,
          "content": "if (data.entityType === 'personne_libre' && data.structureId === structure.id) {",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 351,
          "content": "structureId: structure.id,",
          "module": "precontrats"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 226,
          "content": "console.log('🎯 onAddClick appelé pour dates!', { structureId: structure?.id || id, structureName: structure?.nom || structure?.structureRaisonSociale || 'Structure' });",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 228,
          "content": "structureId: structure?.id || id,",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 208,
          "content": "return contact.structureSiret || contact.structureId || 'Structure';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 107,
          "content": "// Si le contact a une structureId correspondant à cette structure,",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 109,
          "content": "if (progData.structureId === id) {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 111,
          "content": "structureId: null,",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 109,
          "content": "where('structureId', '==', structureToDelete.id)",
          "module": "structures"
        },
        {
          "file": "src/components/tabs/TabManagerProduction.js",
          "line": 230,
          "content": "id={activeTab.params?.structureId}",
          "module": "other"
        },
        {
          "file": "src/components/ui/AssociatePersonModal.js",
          "line": 12,
          "content": "function AssociatePersonModal({ isOpen, onClose, onAssociate, structureId, allowMultiple = true, existingPersonIds = [] }) {",
          "module": "other"
        },
        {
          "file": "src/components/ui/ListWithFilters.js",
          "line": 360,
          "content": "structureId: loadedItems[0].structureId,",
          "module": "other"
        },
        {
          "file": "src/config/entityConfigurations.js",
          "line": 235,
          "content": "field: 'structureId',",
          "module": "other"
        },
        {
          "file": "src/config/entityConfigurations.js",
          "line": 346,
          "content": "field: 'structureId',",
          "module": "other"
        },
        {
          "file": "src/config/entityConfigurations.js",
          "line": 430,
          "content": "inverseField: 'structureId',",
          "module": "other"
        },
        {
          "file": "src/config/entityConfigurations.js",
          "line": 438,
          "content": "inverseField: 'structureId',",
          "module": "other"
        },
        {
          "file": "src/context/TabsContext.js",
          "line": 177,
          "content": "const openStructureTab = useCallback((structureId, structureName) => {",
          "module": "other"
        },
        {
          "file": "src/context/TabsContext.js",
          "line": 179,
          "content": "id: `structure-${structureId}`,",
          "module": "other"
        },
        {
          "file": "src/context/TabsContext.js",
          "line": 181,
          "content": "path: `/structures/${structureId}`,",
          "module": "other"
        },
        {
          "file": "src/context/TabsContext.js",
          "line": 183,
          "content": "params: { structureId },",
          "module": "other"
        },
        {
          "file": "src/context/TabsContext.js",
          "line": 260,
          "content": "const tabId = prefilledData.structureId ? `date-creation-${prefilledData.structureId}` : 'date-creation';",
          "module": "other"
        },
        {
          "file": "src/hooks/artistes/useArtisteDetails.js",
          "line": 64,
          "content": "idField: 'structureId',",
          "module": "other"
        },
        {
          "file": "src/hooks/artistes/useArtisteDetails.js",
          "line": 246,
          "content": "structureId: structure?.id || null,",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useEntitySearch.js",
          "line": 330,
          "content": "structureId: '',",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useFormSubmission.js",
          "line": 158,
          "content": "structureId: processedData.structureId || '',",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useFormSubmission.js",
          "line": 173,
          "content": "structureId: processedData.structureId || '',",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useSafeRelations.js",
          "line": 36,
          "content": "structure: { collection: 'structures', field: 'structureId', isArray: false, reverseField: 'concertsIds' }",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useSafeRelations.js",
          "line": 47,
          "content": "structure: { collection: 'structures', field: 'structureId', isArray: false }",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useSafeRelations.js",
          "line": 50,
          "content": "contacts: { collection: 'contacts', field: 'contactsIds', isArray: true, reverseField: 'structureId' },",
          "module": "other"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 129,
          "content": "idField: 'structureId',",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 161,
          "content": "if (data.structureId) {",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 162,
          "content": "setInitialStructureId(data.structureId);",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 203,
          "content": "setInitialStructureId(data.structureId || null);",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 245,
          "content": "// D'abord vérifier si le concert a directement un structureId",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 249,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', concertData.structureId));",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 279,
          "content": "if (!contactData.structureId) {",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 286,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', contactData.structureId));",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 528,
          "content": "const structureId = relatedData.structure?.id || initialStructureId;",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 533,
          "content": "const docRef = doc(db, 'structures', structureId);",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 535,
          "content": "results.structure = docSnap.exists() ? { id: structureId, ...docSnap.data() } : null;",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 76,
          "content": "idField: 'structureId',",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 109,
          "content": "// D'abord vérifier si le concert a directement un structureId",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 113,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', concertData.structureId));",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 149,
          "content": "if (!contactData.structureId) {",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 156,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', contactData.structureId));",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsWithRoles.js",
          "line": 60,
          "content": "idField: 'structureId',",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertForm.js",
          "line": 56,
          "content": "console.log('[WORKFLOW_TEST] 2. Sauvegarde du concert avec structureId - transformation des données', {",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertFormWithRelations.js",
          "line": 80,
          "content": "if (baseHook.formData.structureId) {",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertFormWithRelations.js",
          "line": 81,
          "content": "const structDoc = await getDoc(doc(db, 'structures', baseHook.formData.structureId));",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertFormWithRelations.js",
          "line": 104,
          "content": "baseHook.formData?.structureId,",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertFormWithRelations.js",
          "line": 140,
          "content": "console.log('[WORKFLOW_TEST] 2. Sauvegarde du concert avec structureId - gestion de la structure:', newStructure);",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertFormWithRelations.js",
          "line": 147,
          "content": "console.log('[WORKFLOW_TEST] 2. Sauvegarde du concert avec structureId - mise à jour manuelle des données');",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertFormWithRelations.js",
          "line": 150,
          "content": "structureId: newStructure?.id || null,",
          "module": "concerts"
        },
        {
          "file": "src/hooks/contacts/useContactDetails.js",
          "line": 383,
          "content": "console.log(`[DEBUG] useContactDetails - structureId:`, details.entity.structureId);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactDetails.js",
          "line": 385,
          "content": "// Vérifier si le contact a un structureId",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactDetails.js",
          "line": 387,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', details.entity.structureId));",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactDetails.js",
          "line": 393,
          "content": "console.log(`[DIAGNOSTIC] useContactDetails - Structure ${details.entity.structureId} n'existe pas`);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactDetails.js",
          "line": 397,
          "content": "console.log(`[DIAGNOSTIC] useContactDetails - Contact sans structureId`);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 60,
          "content": "if (!data.structureId && !data.structureRaisonSociale) {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 85,
          "content": "structureId: data.structureId || '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 167,
          "content": "if (savedData.structureId) {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 173,
          "content": "targetId: savedData.structureId,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 231,
          "content": "structureId: data.structureId || '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 260,
          "content": "structureId: '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 288,
          "content": "idField: 'structureId',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 318,
          "content": "structureId: structure.id,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 328,
          "content": "structureId: '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 372,
          "content": "structureId: company.id || '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 386,
          "content": "structureId: '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactSearchRelational.js",
          "line": 142,
          "content": "const structure = structures.find(s => s.id === liaison.structureId);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 140,
          "content": "const updateStructure = useCallback(async (structureId, updates) => {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 145,
          "content": "structureId,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 156,
          "content": "const deleteStructure = useCallback(async (structureId) => {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 158,
          "content": "const result = await structuresService.deleteStructure(structureId);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 212,
          "content": "const associatePersonToStructure = useCallback(async (structureId, personneId, data = {}) => {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 218,
          "content": "structureId,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 267,
          "content": "const setPrioritaire = useCallback(async (structureId, personneId) => {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 272,
          "content": "structureId,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 288,
          "content": "const getStructureWithPersonnes = useCallback((structureId) => {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 294,
          "content": "l.structureId === structureId &&",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 352,
          "content": "const structure = structures.find(s => s.id === liaison.structureId);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useSimpleContactDetails.js",
          "line": 277,
          "content": "console.log(`[DEBUG] useSimpleContactDetails - structureId:`, contactEntity.structureId);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useSimpleContactDetails.js",
          "line": 279,
          "content": "// Vérifier si le contact a un structureId",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useSimpleContactDetails.js",
          "line": 281,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', contactEntity.structureId));",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useSimpleContactDetails.js",
          "line": 287,
          "content": "console.log(`[DIAGNOSTIC] useSimpleContactDetails - Structure ${contactEntity.structureId} n'existe pas`);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useSimpleContactDetails.js",
          "line": 291,
          "content": "console.log(`[DIAGNOSTIC] useSimpleContactDetails - Contact sans structureId`);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useSimpleContactDetails.js",
          "line": 332,
          "content": "structureId: contactData.structureId,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 121,
          "content": "where('structureId', '==', contactId),",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 240,
          "content": "const structureResult = await structuresService.getStructure(liaison.structureId);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contrats/useContratDetails.js",
          "line": 66,
          "content": "idField: 'structureId',",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratDetails.js",
          "line": 256,
          "content": "if (!contactData.structureId) {",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratDetails.js",
          "line": 257,
          "content": "console.log('[DEBUG] Pas de structureId dans le contact');",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratDetails.js",
          "line": 262,
          "content": "console.log('[DEBUG] Récupération de la structure:', contactData.structureId);",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 306,
          "content": "if (contact?.structureId) {",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 307,
          "content": "console.log(\"Chargement de la structure du contact:\", contact.structureId);",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 309,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', contact.structureId));",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 327,
          "content": "console.warn(\"Structure non trouvée avec l'ID:\", contact.structureId);",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 391,
          "content": "}, [concert?.id, contact?.structureId, currentOrganization?.id]);",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 422,
          "content": "console.log(\"🔍 contact.structureId:\", contact?.structureId);",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGeneratorWithRoles.js",
          "line": 231,
          "content": "structureId: '',",
          "module": "contrats"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 91,
          "content": "let structureId = null;",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 169,
          "content": "structureId: structureId || '',",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 240,
          "content": "existingStructureId = progData.structureId;",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 246,
          "content": "structureId = existingStructureId;",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 247,
          "content": "await ensureStructureEntity(structureId, structureData, currentOrganization?.id);",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 248,
          "content": "console.log(\"Structure existante mise à jour:\", structureId, structureData);",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 253,
          "content": "structureId = structureFields.siret;",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 254,
          "content": "await ensureStructureEntity(structureId, structureData, currentOrganization?.id);",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 263,
          "content": "structureId = newStructureRef.id;",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 266,
          "content": "console.log(\"Nouvelle structure créée:\", structureId, structureData);",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 270,
          "content": "if (programmId && structureId) {",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 272,
          "content": "structureId: structureId,",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 278,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', structureId));",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 297,
          "content": "await updateDoc(doc(db, 'structures', structureId), {",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 426,
          "content": "if (structureId) {",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 427,
          "content": "concertUpdates.structureId = structureId;",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 476,
          "content": "console.log(\"- Structure ID:\", structureId);",
          "module": "forms"
        },
        {
          "file": "src/hooks/generics/actions/useGenericAction.js",
          "line": 141,
          "content": "structureId: entityData.structureId || '',",
          "module": "other"
        },
        {
          "file": "src/hooks/generics/actions/useGenericAction.js",
          "line": 272,
          "content": "structureId: updateData.structureId || '',",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 233,
          "content": "// Méthode 1: structureId direct dans le lieu",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 235,
          "content": "console.log('[useLieuDetails] Tentative chargement structure via structureId:', lieuData.structureId);",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 239,
          "content": "console.log('[useLieuDetails] ✅ Structure trouvée via structureId:', structure);",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 250,
          "content": "if (contactData.structureId) {",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 251,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', contactData.structureId));",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 299,
          "content": "if (contactData.structureId) {",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 300,
          "content": "console.log('[useLieuDetails] 🚀 Chargement structure via contact du concert:', contactData.structureId);",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 446,
          "content": "idField: 'structureId',",
          "module": "other"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 37,
          "content": "field: 'structureId',",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 45,
          "content": "field: 'structureId',",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 88,
          "content": "const structureId = typeof structureToDelete === 'object' ? structureToDelete.id : structureToDelete;",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 90,
          "content": "if (!structureId) {",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 96,
          "content": "await handleDelete(structureId);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 104,
          "content": "const structureId = typeof structure === 'object' ? structure.id : structure;",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 106,
          "content": "if (!structureId) {",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 111,
          "content": "return handleDelete(structureId);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 115,
          "content": "const canDeleteStructure = useCallback(async (structureId) => {",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 119,
          "content": "const result = await checkRelatedEntities(structureId);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 135,
          "content": "// chercher par référence inverse (contacts avec structureId)",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 137,
          "content": "console.log('[DEBUG] Recherche par référence inverse (structureId)');",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 139,
          "content": "const constraints = [where('structureId', '==', structureData.id)];",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 214,
          "content": "// Méthode 2: Chercher par structureId (référence dans le concert)",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 236,
          "content": "console.log('[DEBUG] Concerts trouvés par structureId:', concerts.length);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 326,
          "content": "const lieuxConstraints = [where('structureId', '==', structureData.id)];",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 349,
          "content": "const concertConstraints2 = [where('structureId', '==', structureData.id)];",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 453,
          "content": "const concertConstraints3 = [where('structureId', '==', structureData.id)];",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 23,
          "content": "* @param {string} structureId - ID de la structure ou 'nouveau' pour une nouvelle structure",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 26,
          "content": "export const useStructureForm = (structureId) => {",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 28,
          "content": "const isNewStructure = !structureId || structureId === 'nouveau';",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 34,
          "content": "debugLog(`Initialisation du formulaire de structure optimisé: ${isNewStructure ? 'nouvelle structure' : `structure ${structureId}`}`, 'info', 'useStructureForm');",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 191,
          "content": "entityId: isNewStructure ? null : structureId,",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 240,
          "content": "navigate(structureId && structureId !== 'nouveau' ? `/structures/${structureId}` : '/structures');",
          "module": "structures"
        },
        {
          "file": "src/pages/ContratGenerationNewPage.js",
          "line": 62,
          "content": "if (concertData.structureId) {",
          "module": "other"
        },
        {
          "file": "src/pages/ContratGenerationNewPage.js",
          "line": 63,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', concertData.structureId));",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 40,
          "content": "organisateurId: prefilledData.structureId || '',",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 265,
          "content": "organisateurId: prefilledData.structureId || '',",
          "module": "other"
        },
        {
          "file": "src/pages/DevisPage.js",
          "line": 23,
          "content": "const { devisId, concertId, structureId } = activeTab.params;",
          "module": "other"
        },
        {
          "file": "src/pages/DevisPage.js",
          "line": 32,
          "content": "return <DevisEditor concertId={concertId} structureId={structureId} />;",
          "module": "other"
        },
        {
          "file": "src/pages/DevisPage.js",
          "line": 43,
          "content": "const structureId = urlParams.get('structureId');",
          "module": "other"
        },
        {
          "file": "src/pages/DevisPage.js",
          "line": 45,
          "content": "return <DevisEditor concertId={concertId} structureId={structureId} />;",
          "module": "other"
        },
        {
          "file": "src/pages/FactureDetailsPage.js",
          "line": 151,
          "content": "if (facture.structureId) {",
          "module": "other"
        },
        {
          "file": "src/pages/FactureDetailsPage.js",
          "line": 152,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', facture.structureId));",
          "module": "other"
        },
        {
          "file": "src/pages/FactureGenerationPage.js",
          "line": 84,
          "content": "if (concertData.structureId) {",
          "module": "other"
        },
        {
          "file": "src/pages/FactureGenerationPage.js",
          "line": 85,
          "content": "const structureRef = doc(db, 'structures', concertData.structureId);",
          "module": "other"
        },
        {
          "file": "src/pages/FactureGenerationPage.js",
          "line": 264,
          "content": "structureId: structure?.id,",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 65,
          "content": "console.log('[PreContratGenerationPage] structureId:', concertData.structureId);",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 69,
          "content": "if (concertData.structureId) {",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 70,
          "content": "console.log('[WORKFLOW_TEST] 4. Chargement des données de structure - structureId trouvé:', concertData.structureId);",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 79,
          "content": "console.log('[WORKFLOW_TEST] 4. Chargement des données de structure - structure non trouvée avec ID:', concertData.structureId);",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 83,
          "content": "console.log('[WORKFLOW_TEST] 4. Chargement des données de structure - pas de structureId dans le concert');",
          "module": "other"
        },
        {
          "file": "src/pages/TableauDeBordPage.js",
          "line": 302,
          "content": "path: `/devis/nouveau?concertId=${item.id}&structureId=${item.structureId}`,",
          "module": "other"
        },
        {
          "file": "src/pages/TableauDeBordPage.js",
          "line": 304,
          "content": "params: { concertId: item.id, structureId: item.structureId },",
          "module": "other"
        },
        {
          "file": "src/schemas/ContactRefactoredSchemas.js",
          "line": 341,
          "content": "structureId: Yup.string().required('Structure requise'),",
          "module": "other"
        },
        {
          "file": "src/schemas/ContactSchemas.js",
          "line": 5,
          "content": "* Utilise maintenant structureId au lieu de structureCache (approche moderne)",
          "module": "other"
        },
        {
          "file": "src/schemas/ContactSchemas.js",
          "line": 23,
          "content": "structureId: Yup.string().nullable(), // Référence vers une structure séparée",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 8,
          "content": "* @param {string} structureId - ID de la structure",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 11,
          "content": "async getConcertsByStructureId(entrepriseId, structureId) {",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 13,
          "content": "console.log('[ConcertService] Recherche des concerts par structureId:', { entrepriseId, structureId });",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 18,
          "content": "where('structureId', '==', structureId)",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 27,
          "content": "console.log(`[ConcertService] Trouvé ${concerts.length} concerts pour structureId: ${structureId}`);",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 30,
          "content": "console.error('Erreur lors du chargement des concerts par structureId:', error);",
          "module": "other"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 495,
          "content": "where('structureId', '==', mergeId)",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 501,
          "content": "structureId: principalId,",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 429,
          "content": "let structureId = null;",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 456,
          "content": "structureId = structureResult.id;",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 458,
          "content": "id: structureId,",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 488,
          "content": "if (structureId) {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 491,
          "content": "structureId,",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/liaisonsService.js",
          "line": 39,
          "content": "where('structureId', '==', validation.data.structureId),",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/liaisonsService.js",
          "line": 126,
          "content": "where('structureId', '==', currentData.structureId),",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/liaisonsService.js",
          "line": 169,
          "content": "async getLiaisonsByStructure(structureId, includeInactive = false) {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/liaisonsService.js",
          "line": 173,
          "content": "where('structureId', '==', structureId)",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/liaisonsService.js",
          "line": 349,
          "content": "async setPrioritaire(structureId, personneId, userId) {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/liaisonsService.js",
          "line": 354,
          "content": "where('structureId', '==', structureId),",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 84,
          "content": "async updateStructure(structureId, updates, userId) {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 87,
          "content": "const docRef = doc(db, COLLECTION_NAME, structureId);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 146,
          "content": "console.log('[StructuresService] Structure mise à jour:', structureId);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 149,
          "content": "id: structureId",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 163,
          "content": "async getStructure(structureId) {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 166,
          "content": "if (!structureId || structureId.trim() === '') {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 167,
          "content": "console.warn('[StructuresService] ID de structure vide ou invalide:', structureId);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 174,
          "content": "const docRef = doc(db, COLLECTION_NAME, structureId);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 281,
          "content": "async deleteStructure(structureId) {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 286,
          "content": "where('structureId', '==', structureId),",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 296,
          "content": "await deleteDoc(doc(db, COLLECTION_NAME, structureId));",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 298,
          "content": "console.log('[StructuresService] Structure supprimée:', structureId);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 301,
          "content": "id: structureId",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 348,
          "content": "async setClientStatus(structureId, isClient, userId) {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 355,
          "content": "async updateTags(structureId, tags, userId) {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 356,
          "content": "return this.updateStructure(structureId, { tags }, userId);",
          "module": "contacts"
        },
        {
          "file": "src/services/structureService.js",
          "line": 22,
          "content": "* @param {string} structureId - ID de la structure",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 27,
          "content": "export async function ensureStructureEntity(structureId, structureData = {}, entrepriseId = null) {",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 34,
          "content": "const structureRef = doc(db, 'structures', structureId);",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 48,
          "content": "return structureId;",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 52,
          "content": "nom: structureData.nom || `Structure ${structureId}`,",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 65,
          "content": "return structureId;",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 113,
          "content": "* @param {string} structureId - ID de la structure",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 116,
          "content": "export async function getStructureById(structureId) {",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 122,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', structureId));",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 140,
          "content": "* @param {string} structureId - ID de la structure",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 142,
          "content": "export async function syncStructureToAssociatedContacts(structureId) {",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 146,
          "content": "if (!structureId) {",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 147,
          "content": "console.warn(`Structure ${structureId} introuvable`);",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 156,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', structureId));",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 170,
          "content": "structureId: structureId,",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 176,
          "content": "console.error(`Erreur lors de la synchronisation des contacts avec la structure ${structureId}:`, error);",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 180,
          "content": "console.error(`Erreur lors de la synchronisation des contacts avec la structure ${structureId}:`, error);",
          "module": "other"
        },
        {
          "file": "src/shared/tableConfigs/datesTableColumns.js",
          "line": 224,
          "content": "path: `/devis/nouveau?concertId=${item.id}&structureId=${item.structureId}`,",
          "module": "other"
        },
        {
          "file": "src/shared/tableConfigs/datesTableColumns.js",
          "line": 226,
          "content": "params: { concertId: item.id, structureId: item.structureId },",
          "module": "other"
        },
        {
          "file": "src/utils/testTagsUpdate.js",
          "line": 8,
          "content": "export async function testTagsUpdate(structureId, newTags, userId) {",
          "module": "other"
        },
        {
          "file": "src/utils/testTagsUpdate.js",
          "line": 10,
          "content": "console.log('Structure ID:', structureId);",
          "module": "other"
        },
        {
          "file": "src/utils/testTagsUpdate.js",
          "line": 16,
          "content": "const structureResult = await structuresService.getStructure(structureId);",
          "module": "other"
        },
        {
          "file": "src/utils/testTagsUpdate.js",
          "line": 52,
          "content": "structureId,",
          "module": "other"
        },
        {
          "file": "src/utils/testTagsUpdate.js",
          "line": 62,
          "content": "const updatedResult = await structuresService.getStructure(structureId);",
          "module": "other"
        },
        {
          "file": "src/utils/verifyContactStructure.js",
          "line": 30,
          "content": "structureId: data.structureId || '',",
          "module": "other"
        }
      ],
      "nom": [
        {
          "file": "src/components/common/UnifiedContactSelector.js",
          "line": 53,
          "content": "additionalSearchFields: ['email', 'telephone', 'structureNom'],",
          "module": "other"
        },
        {
          "file": "src/components/common/UnifiedContactSelector.js",
          "line": 166,
          "content": "{contact.structureNom && (",
          "module": "other"
        },
        {
          "file": "src/components/common/UnifiedContactSelector.js",
          "line": 167,
          "content": "<span className={styles.structure}> - {contact.structureNom}</span>",
          "module": "other"
        },
        {
          "file": "src/components/common/UnifiedContactSelector.js",
          "line": 225,
          "content": "value: contact.structureNom || contact.structure",
          "module": "other"
        },
        {
          "file": "src/components/common/__tests__/UnifiedContactSelector.test.js",
          "line": 49,
          "content": "structureNom: 'Structure Test'",
          "module": "other"
        },
        {
          "file": "src/components/concerts/DatesList.js",
          "line": 52,
          "content": "entreprise: concert.structureNom || '-',",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/DatesList.js",
          "line": 60,
          "content": "coll: deriveCollaboratorCode(concert.structureNom)",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/PublicationsList.js",
          "line": 57,
          "content": "coll: deriveCollaboratorCode(concert.structureNom),",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertForm.js",
          "line": 228,
          "content": "selectedStructure={structure || (formData.structureId ? { id: formData.structureId, nom: formData.structureNom || 'Structure sélectionnée' } : null)}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertOrganizerSection.js",
          "line": 163,
          "content": "<div>{contact.structure || contact.structureNom || 'Non spécifiée'}</div>",
          "module": "concerts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 276,
          "content": "structureNom: contact.structure?.nom || contact.structureNom,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 294,
          "content": "structureNom: structureData.nom || contact.structureNom,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 268,
          "content": "structureRaisonSociale: data.structure?.raisonSociale || data.structureRaisonSociale || data.structureNom || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/mobile/ContactView.js",
          "line": 169,
          "content": "<div className=\"fw-bold\">{contact.structureNom || \"Structure associée\"}</div>",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactBottomTabs.js",
          "line": 154,
          "content": "structureName: extractedData.structureRaisonSociale || extractedData.structureNom",
          "module": "contacts"
        },
        {
          "file": "src/components/dates/DatesTable.js",
          "line": 78,
          "content": "entreprise: concert.structureNom || '-',",
          "module": "other"
        },
        {
          "file": "src/components/dates/DatesTable.js",
          "line": 91,
          "content": "coll: deriveCollaboratorCode(concert.structureNom),",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 61,
          "content": "structureNom: '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 163,
          "content": "structureNom: '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 226,
          "content": "structureNom: '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 320,
          "content": "`${data.nom} - Lieux: ${data.lieuxIds?.length || 0}, Concerts: ${data.concertsIds?.length || 0}, Structure: ${data.structureNom || 'Aucune'}`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 393,
          "content": "structureNom: structureData.nom || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationDiagnostic.js",
          "line": 68,
          "content": ": contactData.structureRaisonSociale || contactData.structureNom || 'Contact sans nom',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationDiagnostic.js",
          "line": 80,
          "content": "structureNom: contactData.structureNom,",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 107,
          "content": "addLog(`⏭️ Contact complètement migré: ${contactData.prenom || 'Structure'} ${contactData.nom || contactData.structureNom || contactId}`, 'info');",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 112,
          "content": "addLog(`🔄 Contact partiellement migré (sera re-migré): ${contactData.prenom || 'Structure'} ${contactData.nom || contactData.structureNom || contactId}`, 'warning');",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 120,
          "content": "const hasStructureData = contactData.structureNom?.trim() || contactData.structureRaisonSociale?.trim();",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 125,
          "content": "addLog(`🏢👤 Contact mixte détecté: Structure \"${contactData.structureNom}\" + Personne \"${contactData.prenom} ${contactData.nom}\"`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 128,
          "content": "addLog(`🏢 Structure pure détectée: \"${contactData.structureNom}\"`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 139,
          "content": "raisonSociale: contactData.structureNom || contactData.structureRaisonSociale || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 470,
          "content": "🏢 <strong>Structure pure</strong> : Seulement structureNom rempli<br/>",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 112,
          "content": "structureNom: data.structureNom || data.structure?.raisonSociale || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 68,
          "content": "structureNom: '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 271,
          "content": "structureNom: structureData.nom,",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 338,
          "content": "structureNom: structureData.nom,",
          "module": "other"
        },
        {
          "file": "src/components/debug/FestitestContactFinder.js",
          "line": 196,
          "content": "'Structure Nom': data.structureNom || 'N/A',",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 253,
          "content": "nom: data.structureNom || data.structure?.nom || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 273,
          "content": "delete normalized.structureNom;",
          "module": "other"
        },
        {
          "file": "src/components/devis/DevisEditor.js",
          "line": 41,
          "content": "structureNom: '',",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 402,
          "content": "{devisData.structureNom || 'Structure X'}",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisPreview.js",
          "line": 57,
          "content": "<div><strong>{devisData.structureNom || 'Nom de la structure'}</strong></div>",
          "module": "devis"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 30,
          "content": "structureNom: '',",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 109,
          "content": "structureNom: submissionData.structureData?.nom || '',",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 238,
          "content": "structureNom: nom,",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 274,
          "content": "if (!formData.structureNom.trim()) errors.push('Le nom de la structure est obligatoire');",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 332,
          "content": "nom: formData.structureNom,",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 514,
          "content": "<label htmlFor=\"structureNom\" className={styles.formLabel}>Nom / Raison sociale *</label>",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 517,
          "content": "id=\"structureNom\"",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 521,
          "content": "value={formData.structureNom}",
          "module": "forms"
        },
        {
          "file": "src/components/lieux/mobile/LieuMobileForm.js",
          "line": 324,
          "content": "{prog.structureNom && (",
          "module": "other"
        },
        {
          "file": "src/components/lieux/mobile/LieuMobileForm.js",
          "line": 325,
          "content": "<div className=\"small text-muted\">{prog.structureNom}</div>",
          "module": "other"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 210,
          "content": "return contact.fonction || contact.structureNom || '—';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 112,
          "content": "structureNom: null,",
          "module": "structures"
        },
        {
          "file": "src/hooks/common/useEntitySearch.js",
          "line": 331,
          "content": "structureNom: '',",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useFormSubmission.js",
          "line": 159,
          "content": "structureNom: processedData.structureNom || '',",
          "module": "other"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 131,
          "content": "nameField: 'structureNom',",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 78,
          "content": "nameField: 'structureNom',",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertForm.js",
          "line": 58,
          "content": "structureNom: data.structureNom",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertFormWithRelations.js",
          "line": 151,
          "content": "structureNom: newStructure?.nom || newStructure?.raisonSociale || ''",
          "module": "concerts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 86,
          "content": "structureNom: data.structureNom || data.structure?.nom || data.structureRaisonSociale || '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 232,
          "content": "structureNom: data.structureNom || '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 261,
          "content": "structureNom: '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 289,
          "content": "nameField: 'structureNom'",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 319,
          "content": "structureNom: structure.nom || structure.raisonSociale",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 329,
          "content": "structureNom: ''",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 373,
          "content": "structureNom: company.nom || company.raisonSociale || '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 387,
          "content": "structureNom: '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contrats/useContratGeneratorWithRoles.js",
          "line": 232,
          "content": "structureNom: '',",
          "module": "contrats"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 170,
          "content": "structureNom: structureFields.nom || '',",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 273,
          "content": "structureNom: structureData.nom,",
          "module": "forms"
        },
        {
          "file": "src/hooks/generics/actions/useGenericAction.js",
          "line": 142,
          "content": "structureNom: entityData.structureNom || entityData.structure?.nom || entityData.structure?.raisonSociale || '',",
          "module": "other"
        },
        {
          "file": "src/hooks/generics/actions/useGenericAction.js",
          "line": 273,
          "content": "structureNom: updateData.structureNom || updateData.structure?.nom || updateData.structure?.raisonSociale || '',",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 111,
          "content": "nom: contactData.structureRaisonSociale || concertData.structureNom,",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 139,
          "content": "nom: concertData.structureNom || concertData.structureRaisonSociale,",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 44,
          "content": "// Recherche par structureNom d'abord",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 48,
          "content": "where('structureNom', '==', structureName)",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 57,
          "content": "console.log(`[ConcertService] Trouvé ${concerts.length} concerts avec structureNom`);",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 61,
          "content": "console.log('[ConcertService] Aucun concert trouvé avec structureNom, essai avec structureRaisonSociale');",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 171,
          "content": "structureNom: structureData.nom,",
          "module": "other"
        },
        {
          "file": "src/utils/verifyContactStructure.js",
          "line": 31,
          "content": "structureNom: data.structureNom || data.structure?.nom || '',",
          "module": "other"
        }
      ],
      "raisonSociale": [
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 130,
          "content": "nom: structureData.structureRaisonSociale || structureData.nom,",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 132,
          "content": "searchText: `${structureData.structureRaisonSociale || structureData.nom} ${structureData.structureVille || ''}`.toLowerCase()",
          "module": "other"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 54,
          "content": "structureRaisonSociale: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 243,
          "content": "if (!formData.structureRaisonSociale?.trim()) {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 269,
          "content": "const hasStructureData = formData.structureRaisonSociale?.trim();",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 299,
          "content": "raisonSociale: formData.structureRaisonSociale?.trim() || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 632,
          "content": "entityName={formData.structureRaisonSociale || `${formData.prenom} ${formData.nom}` || 'Contact'}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 220,
          "content": "navigateToEntity('structure', structureData.structureId, structureData.structureRaisonSociale);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 224,
          "content": "navigateToEntity('structure', originalId, structureData.structureRaisonSociale);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 275,
          "content": "structureRaisonSociale: contact.structure?.raisonSociale || contact.structureRaisonSociale,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 279,
          "content": "structureRaisonSociale: contact.structure?.raisonSociale || contact.structureRaisonSociale,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 293,
          "content": "structureRaisonSociale: structureData.raisonSociale || contact.structureRaisonSociale,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 434,
          "content": "const structureName = useMemo(() => extractedData?.structureRaisonSociale, [extractedData?.structureRaisonSociale]);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 571,
          "content": "const hasStructureData = data.structureRaisonSociale?.trim();",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 575,
          "content": "? (data.structureRaisonSociale || data.structure?.raisonSociale || 'Structure sans nom')",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 666,
          "content": "isStructure={forcedViewType ? (forcedViewType === 'structure') : (entityType === 'structure' || extractedData?.structureRaisonSociale)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 697,
          "content": "const hasStructureData = data?.structureRaisonSociale?.trim();",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 703,
          "content": "const hasStructureData = data?.structureRaisonSociale?.trim();",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 709,
          "content": "const hasStructureData = data?.structureRaisonSociale?.trim();",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 733,
          "content": "isStructure={forcedViewType ? (forcedViewType === 'structure') : (entityType === 'structure' || extractedData?.structureRaisonSociale)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 794,
          "content": "extractedData?.structureRaisonSociale,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 60,
          "content": "structureRaisonSociale: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 84,
          "content": "structureRaisonSociale: structure.nom || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 100,
          "content": "structureRaisonSociale: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 268,
          "content": "structureRaisonSociale: data.structure?.raisonSociale || data.structureRaisonSociale || data.structureNom || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 484,
          "content": "structureRaisonSociale: formData.structureRaisonSociale?.trim() || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/ContactModalsContainer.js",
          "line": 31,
          "content": "const displayName = newStructure.raisonSociale || newStructure.structureRaisonSociale || 'Nouvelle structure';",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/GlobalModalsContainer.js",
          "line": 24,
          "content": "openContactTab(newStructure.id, newStructure.structureRaisonSociale);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 48,
          "content": "structureRaisonSocialeAdmin: initialData.raisonSocialeAdmin || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 102,
          "content": "structureRaisonSocialeAdmin: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 138,
          "content": "structureRaisonSociale: structureData.raisonSociale || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 159,
          "content": "structureRaisonSocialeAdmin: structureData.raisonSocialeAdmin || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 502,
          "content": "value={formData.structureRaisonSocialeAdmin}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactBottomTabs.js",
          "line": 151,
          "content": "if (extractedData?.structureRaisonSociale || extractedData?.id) {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactBottomTabs.js",
          "line": 154,
          "content": "structureName: extractedData.structureRaisonSociale || extractedData.structureNom",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 190,
          "content": ") : structureData?.structureRaisonSociale ? (",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 195,
          "content": "name={structureData.structureRaisonSociale}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 199,
          "content": "navigateToEntity('structure', structureData.structureId, structureData.structureRaisonSociale);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 203,
          "content": "navigateToEntity('structure', originalId, structureData.structureRaisonSociale);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 28,
          "content": "name=\"structureRaisonSociale\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 32,
          "content": "isInvalid={!!errors.structureRaisonSociale}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 35,
          "content": "{errors.structureRaisonSociale}",
          "module": "contacts"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 113,
          "content": "raisonSociale: structure.nom || structure.structureRaisonSociale || '',",
          "module": "contrats"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 50,
          "content": "nom: data.structure?.raisonSociale || data.structureRaisonSociale,",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 222,
          "content": "nom: unifiedData.structure?.raisonSociale || unifiedData.structureRaisonSociale || 'Sans nom',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 164,
          "content": "structureRaisonSociale: '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 394,
          "content": "structureRaisonSociale: structureData.raisonSociale || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationDiagnostic.js",
          "line": 43,
          "content": "const oldLogic = contactData.hasOwnProperty('structureRaisonSociale') ||",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationDiagnostic.js",
          "line": 54,
          "content": "structureRaisonSociale: !!contactData.structureRaisonSociale,",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationDiagnostic.js",
          "line": 68,
          "content": ": contactData.structureRaisonSociale || contactData.structureNom || 'Contact sans nom',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationDiagnostic.js",
          "line": 79,
          "content": "structureRaisonSociale: contactData.structureRaisonSociale,",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 78,
          "content": "structure: !!(data.structureRaisonSociale || data.structureAdresse || data.structureEmail),",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 120,
          "content": "const hasStructureData = contactData.structureNom?.trim() || contactData.structureRaisonSociale?.trim();",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 139,
          "content": "raisonSociale: contactData.structureNom || contactData.structureRaisonSociale || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 207,
          "content": "structureRaisonSociale: structureData.raisonSociale,",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 272,
          "content": "structureRaisonSociale: structureData.raisonSociale,",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 339,
          "content": "structureRaisonSociale: structureData.raisonSociale,",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 11,
          "content": "* Résout le problème des fallbacks multiples (contact.structure?.raisonSociale || contact.structureRaisonSociale)",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 101,
          "content": "'structureRaisonSociale', 'structureEmail', 'structureTelephone1',",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 136,
          "content": "if (data.structureRaisonSociale && data.structure?.raisonSociale) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 138,
          "content": "conflicts.push(`structureRaisonSociale: \"${data.structureRaisonSociale}\" ≠ structure.raisonSociale: \"${data.structure.raisonSociale}\"`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 162,
          "content": "'structureRaisonSociale', 'structureEmail', 'structureTelephone1',",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 179,
          "content": "if (data.structure?.raisonSociale || data.structureRaisonSociale) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 250,
          "content": "if (data.structureRaisonSociale || data.structureEmail || data.structureAdresse) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 252,
          "content": "raisonSociale: data.structureRaisonSociale || data.structure?.raisonSociale || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 272,
          "content": "delete normalized.structureRaisonSociale;",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 357,
          "content": "<strong>Avant :</strong> <code>contact.structure?.raisonSociale || contact.structureRaisonSociale</code>",
          "module": "other"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 326,
          "content": "data.structure?.raisonSociale === structure.structureRaisonSociale) {",
          "module": "precontrats"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 226,
          "content": "console.log('🎯 onAddClick appelé pour dates!', { structureId: structure?.id || id, structureName: structure?.nom || structure?.structureRaisonSociale || 'Structure' });",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 229,
          "content": "structureName: structure?.nom || structure?.structureRaisonSociale || 'Structure'",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 38,
          "content": "const hasStructureData = contact.structureRaisonSociale?.trim();",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 84,
          "content": "const hasStructureData = contact.structureRaisonSociale?.trim();",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 156,
          "content": "const hasStructureData = contact.structureRaisonSociale?.trim();",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 185,
          "content": "return contact.structureRaisonSociale || 'Structure sans nom';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 192,
          "content": "const hasStructureData = contact.structureRaisonSociale?.trim();",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 194,
          "content": "return contact.structureRaisonSociale || 'Structure sans nom';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 207,
          "content": "if (contact.structureRaisonSociale) {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 280,
          "content": "return contact.structureRaisonSociale || 'Structure';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 287,
          "content": "const hasStructureData = contact.structureRaisonSociale?.trim();",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 289,
          "content": "return contact.structureRaisonSociale || 'Structure';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 300,
          "content": "openContactTab(newStructure.id, newStructure.structureRaisonSociale);",
          "module": "structures"
        },
        {
          "file": "src/hooks/common/useEntitySearch.js",
          "line": 332,
          "content": "structureRaisonSociale: '',",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useFormSubmission.js",
          "line": 148,
          "content": "structureRaisonSociale: processedData.structure.raisonSociale || '',",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useFormSubmission.js",
          "line": 160,
          "content": "structureRaisonSociale: processedData.structureRaisonSociale || '',",
          "module": "other"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 60,
          "content": "if (!data.structureId && !data.structureRaisonSociale) {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 86,
          "content": "structureNom: data.structureNom || data.structure?.nom || data.structureRaisonSociale || '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 221,
          "content": "structureRaisonSociale: data.structureRaisonSociale || data.structureInfo?.raisonSociale || '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 262,
          "content": "structureRaisonSociale: '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 374,
          "content": "structureRaisonSociale: company.nom || company.raisonSociale || '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 388,
          "content": "structureRaisonSociale: '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/generics/actions/useGenericAction.js",
          "line": 146,
          "content": "structureRaisonSociale: entityData.structure.raisonSociale || '',",
          "module": "other"
        },
        {
          "file": "src/hooks/generics/actions/useGenericAction.js",
          "line": 277,
          "content": "structureRaisonSociale: updateData.structure.raisonSociale || '',",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 169,
          "content": "nom: structureData.structureRaisonSociale || structureData.nom,",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 88,
          "content": "if (!structureFound && concertData.structureRaisonSociale) {",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 98,
          "content": "where('structureRaisonSociale', '==', concertData.structureRaisonSociale)",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 110,
          "content": "raisonSociale: contactData.structureRaisonSociale || concertData.structureRaisonSociale,",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 138,
          "content": "raisonSociale: concertData.structureRaisonSociale,",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 59,
          "content": "// Si aucun résultat, essayer avec structureRaisonSociale",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 61,
          "content": "console.log('[ConcertService] Aucun concert trouvé avec structureNom, essai avec structureRaisonSociale');",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 65,
          "content": "where('structureRaisonSociale', '==', structureName)",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 74,
          "content": "console.log(`[ConcertService] Trouvé ${concerts.length} concerts avec structureRaisonSociale`);",
          "module": "other"
        },
        {
          "file": "src/utils/contactMigrationDetection.js",
          "line": 19,
          "content": "structure: !!(contactData.structureRaisonSociale || contactData.structureAdresse || contactData.structureEmail),",
          "module": "other"
        },
        {
          "file": "src/utils/contactMigrationDetection.js",
          "line": 74,
          "content": "present: !!(contactData.structureRaisonSociale || contactData.structureAdresse || contactData.structureEmail),",
          "module": "other"
        },
        {
          "file": "src/utils/contactMigrationDetection.js",
          "line": 76,
          "content": "structureRaisonSociale: !!contactData.structureRaisonSociale,",
          "module": "other"
        },
        {
          "file": "src/utils/contactMigrationDetection.js",
          "line": 207,
          "content": "structureRaisonSociale: 'Ma Société',",
          "module": "other"
        },
        {
          "file": "src/utils/contactMigrationDetection.js",
          "line": 213,
          "content": "structureRaisonSociale: 'Structure Inc',",
          "module": "other"
        },
        {
          "file": "src/utils/contactMigrationDetection.js",
          "line": 224,
          "content": "structureRaisonSociale: 'Structure Complète',",
          "module": "other"
        },
        {
          "file": "src/utils/verifyContactStructure.js",
          "line": 32,
          "content": "structureRaisonSociale: data.structureRaisonSociale || data.structure?.raisonSociale || '',",
          "module": "other"
        }
      ],
      "general": [
        {
          "file": "src/App.js",
          "line": 31,
          "content": "import StructuresPage from '@/pages/StructuresPage';",
          "module": "other"
        },
        {
          "file": "src/App.js",
          "line": 255,
          "content": "<Route path=\"/preview/structures\" element={",
          "module": "other"
        },
        {
          "file": "src/App.js",
          "line": 258,
          "content": "<StructuresPage />",
          "module": "other"
        },
        {
          "file": "src/App.js",
          "line": 385,
          "content": "<Route path=\"/structures/*\" element={",
          "module": "other"
        },
        {
          "file": "src/App.js",
          "line": 387,
          "content": "<StructuresPage />",
          "module": "other"
        },
        {
          "file": "src/components/api/ContratDownloadAPI.js",
          "line": 22,
          "content": "structure,",
          "module": "other"
        },
        {
          "file": "src/components/api/ContratDownloadAPI.js",
          "line": 44,
          "content": "structure,",
          "module": "other"
        },
        {
          "file": "src/components/api/ContratDownloadAPI.js",
          "line": 61,
          "content": "}, [loading, error, contrat, concert, template, contact, lieu, artiste, structure, entreprise, contratId, handleDownloadPdf]);",
          "module": "other"
        },
        {
          "file": "src/components/collaboration/CollaborateursManager.js",
          "line": 868,
          "content": "// Onglets de partage (structure similaire pour les 3)",
          "module": "other"
        },
        {
          "file": "src/components/collaboration/EntreprisesManager.js",
          "line": 32,
          "content": "structureBase: '',",
          "module": "other"
        },
        {
          "file": "src/components/collaboration/EntreprisesManager.js",
          "line": 108,
          "content": "structureBase: '',",
          "module": "other"
        },
        {
          "file": "src/components/collaboration/EntreprisesManager.js",
          "line": 515,
          "content": "<Form.Label>Structure dans la base</Form.Label>",
          "module": "other"
        },
        {
          "file": "src/components/collaboration/EntreprisesManager.js",
          "line": 518,
          "content": "value={selectedEntreprise.structureBase || ''}",
          "module": "other"
        },
        {
          "file": "src/components/collaboration/EntreprisesManager.js",
          "line": 519,
          "content": "onChange={(e) => updateSelectedEntreprise('structureBase', e.target.value)}",
          "module": "other"
        },
        {
          "file": "src/components/common/EntityViewTabs.js",
          "line": 23,
          "content": "message={`Erreur lors du chargement ${entityType === 'contact' ? 'du contact' : 'de la structure'}`}",
          "module": "other"
        },
        {
          "file": "src/components/common/EntityViewTabs.js",
          "line": 57,
          "content": "de ce {entityType === 'contact' ? 'contact' : 'cette structure'}.",
          "module": "other"
        },
        {
          "file": "src/components/common/GenericDetailView.js",
          "line": 52,
          "content": "if (entity && entityType === 'structure') {",
          "module": "other"
        },
        {
          "file": "src/components/common/RelationCard.js",
          "line": 48,
          "content": "subtitle: entity.structure?.nom || entity.email || '',",
          "module": "other"
        },
        {
          "file": "src/components/common/RelationCard.js",
          "line": 52,
          "content": "case 'structure':",
          "module": "other"
        },
        {
          "file": "src/components/common/RelationCard.js",
          "line": 54,
          "content": "title: entity.nom || 'Structure sans nom',",
          "module": "other"
        },
        {
          "file": "src/components/common/RelationCard.js",
          "line": 86,
          "content": "structure: '/structures',",
          "module": "other"
        },
        {
          "file": "src/components/common/UnifiedConcertSelector.js",
          "line": 22,
          "content": "* @param {string} props.entityType - Type de l'entité parente ('structure', 'lieu', etc.)",
          "module": "other"
        },
        {
          "file": "src/components/common/UnifiedContactSelector.js",
          "line": 53,
          "content": "additionalSearchFields: ['email', 'telephone', 'structureNom'],",
          "module": "other"
        },
        {
          "file": "src/components/common/UnifiedContactSelector.js",
          "line": 166,
          "content": "{contact.structureNom && (",
          "module": "other"
        },
        {
          "file": "src/components/common/UnifiedContactSelector.js",
          "line": 167,
          "content": "<span className={styles.structure}> - {contact.structureNom}</span>",
          "module": "other"
        },
        {
          "file": "src/components/common/UnifiedContactSelector.js",
          "line": 225,
          "content": "value: contact.structureNom || contact.structure",
          "module": "other"
        },
        {
          "file": "src/components/common/__tests__/UnifiedContactSelector.test.js",
          "line": 49,
          "content": "structureNom: 'Structure Test'",
          "module": "other"
        },
        {
          "file": "src/components/common/__tests__/UnifiedContactSelector.test.js",
          "line": 99,
          "content": "expect(screen.getByText('- Structure Test')).toBeInTheDocument();",
          "module": "other"
        },
        {
          "file": "src/components/common/layout/DesktopLayout.js",
          "line": 26,
          "content": "openStructuresListTab,",
          "module": "other"
        },
        {
          "file": "src/components/common/layout/DesktopLayout.js",
          "line": 32,
          "content": "openStructureModal,",
          "module": "other"
        },
        {
          "file": "src/components/common/layout/DesktopLayout.js",
          "line": 113,
          "content": "case '/structures':",
          "module": "other"
        },
        {
          "file": "src/components/common/layout/DesktopLayout.js",
          "line": 244,
          "content": "case '/contacts/nouveau/structure':",
          "module": "other"
        },
        {
          "file": "src/components/common/layout/DesktopLayout.js",
          "line": 245,
          "content": "// Ouvrir directement la modal de création de structure",
          "module": "other"
        },
        {
          "file": "src/components/common/layout/DesktopLayout.js",
          "line": 308,
          "content": "// Nouvelle structure de navigation groupée",
          "module": "other"
        },
        {
          "file": "src/components/common/layout/DesktopLayout.js",
          "line": 322,
          "content": "{ to: \"/contacts/nouveau/structure\", icon: \"bi-building-add\", label: \"Ajouter une structure\" },",
          "module": "other"
        },
        {
          "file": "src/components/common/layout/MobileLayout.js",
          "line": 90,
          "content": "<NavLink to=\"/structures\" onClick={closeMenu}>",
          "module": "other"
        },
        {
          "file": "src/components/common/layout/MobileLayout.js",
          "line": 92,
          "content": "<span>Structures</span>",
          "module": "other"
        },
        {
          "file": "src/components/common/layout/MobileLayout.js",
          "line": 164,
          "content": "<NavLink to=\"/structures\">",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 15,
          "content": "const [structuresData, setStructuresData] = useState([]);",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 18,
          "content": "const [organisateurSearch, setOrganisateurSearch] = useState(prefilledData.structureName || '');",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 34,
          "content": "organisateurId: prefilledData.structureId || '',",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 46,
          "content": "loadStructures();",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 49,
          "content": "}, [show, currentOrganization, loadArtistes, loadLieux, loadStructures]);",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 116,
          "content": "const loadStructures = async () => {",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 121,
          "content": "where('type', '==', 'structure')",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 124,
          "content": "const structures = [];",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 127,
          "content": "const structureData = { id: doc.id, ...doc.data() };",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 130,
          "content": "nom: structureData.structureRaisonSociale || structureData.nom,",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 131,
          "content": "ville: structureData.structureVille || structureData.ville || '',",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 132,
          "content": "searchText: `${structureData.structureRaisonSociale || structureData.nom} ${structureData.structureVille || ''}`.toLowerCase()",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 136,
          "content": "setStructuresData(structures);",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 138,
          "content": "console.error('Erreur lors du chargement des structures:', error);",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 179,
          "content": "// Filtrer les structures selon la recherche",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 180,
          "content": "const filteredStructures = structuresData.filter(structure =>",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 200,
          "content": "const handleOrganisateurSelect = (structure) => {",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 227,
          "content": "organisateurId: prefilledData.structureId || '',",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 235,
          "content": "setOrganisateurSearch(prefilledData.structureName || '');",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 377,
          "content": "placeholder=\"Tapez pour rechercher une structure organisatrice...\"",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 385,
          "content": "{showOrganisateurDropdown && filteredStructures.length > 0 && (",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 387,
          "content": "{filteredStructures.slice(0, 10).map((structure) => (",
          "module": "other"
        },
        {
          "file": "src/components/common/modals/DateCreationModal.js",
          "line": 391,
          "content": "onClick={() => handleOrganisateurSelect(structure)}",
          "module": "other"
        },
        {
          "file": "src/components/componentMapping.js",
          "line": 6,
          "content": "* Structure: Le chemin relatif depuis src/components/ est utilisé comme clé",
          "module": "other"
        },
        {
          "file": "src/components/componentMapping.js",
          "line": 26,
          "content": "import StructuresDesktopList from './structures/desktop/StructuresList';",
          "module": "other"
        },
        {
          "file": "src/components/componentMapping.js",
          "line": 28,
          "content": "import StructuresDesktopDetails from './structures/desktop/StructureDetails';",
          "module": "other"
        },
        {
          "file": "src/components/componentMapping.js",
          "line": 50,
          "content": "import StructuresMobileList from './structures/mobile/StructuresList';",
          "module": "other"
        },
        {
          "file": "src/components/componentMapping.js",
          "line": 51,
          "content": "// Le composant StructureMobileView n'existe pas, utilisons le Details à la place",
          "module": "other"
        },
        {
          "file": "src/components/componentMapping.js",
          "line": 52,
          "content": "import StructuresMobileDetails from './structures/mobile/StructureDetails';",
          "module": "other"
        },
        {
          "file": "src/components/componentMapping.js",
          "line": 53,
          "content": "import StructuresMobileForm from './structures/mobile/StructureForm';",
          "module": "other"
        },
        {
          "file": "src/components/componentMapping.js",
          "line": 95,
          "content": "// Structures",
          "module": "other"
        },
        {
          "file": "src/components/componentMapping.js",
          "line": 96,
          "content": "'structures/desktop/StructuresList': StructuresDesktopList,",
          "module": "other"
        },
        {
          "file": "src/components/componentMapping.js",
          "line": 97,
          "content": "// Remplacer StructureView par StructureDetails",
          "module": "other"
        },
        {
          "file": "src/components/componentMapping.js",
          "line": 99,
          "content": "'structures/desktop/StructureForm': null,",
          "module": "other"
        },
        {
          "file": "src/components/componentMapping.js",
          "line": 100,
          "content": "'structures/mobile/StructuresList': StructuresMobileList,",
          "module": "other"
        },
        {
          "file": "src/components/componentMapping.js",
          "line": 101,
          "content": "// Remplacer StructureView par StructureDetails",
          "module": "other"
        },
        {
          "file": "src/components/componentMapping.js",
          "line": 103,
          "content": "'structures/mobile/StructureForm': StructuresMobileForm,",
          "module": "other"
        },
        {
          "file": "src/components/componentMapping.js",
          "line": 106,
          "content": "'structures/desktop/StructureDetails': StructuresDesktopDetails,",
          "module": "other"
        },
        {
          "file": "src/components/componentMapping.js",
          "line": 107,
          "content": "'structures/mobile/StructureDetails': StructuresMobileDetails,",
          "module": "other"
        },
        {
          "file": "src/components/concerts/ConcertDetailsWithRoles.js",
          "line": 51,
          "content": "structure: relatedData?.structure,",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/ConcertsList.js",
          "line": 469,
          "content": "if (!concert.structureId) {",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/ConcertsList.js",
          "line": 471,
          "content": "status: 'no_structure',",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/ConcertsList.js",
          "line": 474,
          "content": "tooltip: 'Aucune structure associée',",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/DatesList.js",
          "line": 52,
          "content": "entreprise: concert.structureNom || '-',",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/DatesList.js",
          "line": 60,
          "content": "coll: deriveCollaboratorCode(concert.structureNom)",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/DatesList.js",
          "line": 77,
          "content": "const deriveCollaboratorCode = (structureName) => {",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/DatesList.js",
          "line": 86,
          "content": "if (knownCodes[structureName]) {",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/DatesList.js",
          "line": 90,
          "content": "return structureName",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/PublicationsList.js",
          "line": 57,
          "content": "coll: deriveCollaboratorCode(concert.structureNom),",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/PublicationsList.js",
          "line": 81,
          "content": "const deriveCollaboratorCode = (structureName) => {",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/PublicationsList.js",
          "line": 90,
          "content": "if (knownCodes[structureName]) {",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/PublicationsList.js",
          "line": 94,
          "content": "return structureName",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertForm.js",
          "line": 19,
          "content": "import StructureSearchSection from '../../contacts/sections/StructureSearchSection';",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertForm.js",
          "line": 51,
          "content": "structure,",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertForm.js",
          "line": 55,
          "content": "handleStructureChange",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertForm.js",
          "line": 98,
          "content": "// Recherche de structures",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertForm.js",
          "line": 100,
          "content": "searchTerm: structureSearchTerm,",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertForm.js",
          "line": 102,
          "content": "results: structureResults,",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertForm.js",
          "line": 104,
          "content": "setShowResults: setShowStructureResults,",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertForm.js",
          "line": 106,
          "content": "dropdownRef: structureDropdownRef,",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertForm.js",
          "line": 107,
          "content": "handleCreate: handleCreateStructure",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertForm.js",
          "line": 109,
          "content": "entityType: 'structures',",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertForm.js",
          "line": 130,
          "content": "const handleRemoveStructureCallback = useCallback(() => {",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertForm.js",
          "line": 131,
          "content": "console.log('[WORKFLOW_TEST] 1. Sélection de structure dans le formulaire de concert - suppression');",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertForm.js",
          "line": 133,
          "content": "}, [handleStructureChange]);",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertForm.js",
          "line": 220,
          "content": "<StructureSearchSection",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertForm.js",
          "line": 221,
          "content": "structureSearchTerm={structureSearchTerm}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertForm.js",
          "line": 223,
          "content": "structureResults={structureResults}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertForm.js",
          "line": 224,
          "content": "showStructureResults={showStructureResults}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertForm.js",
          "line": 226,
          "content": "isSearchingStructures={isSearchingStructures}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertForm.js",
          "line": 227,
          "content": "structureDropdownRef={structureDropdownRef}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertForm.js",
          "line": 228,
          "content": "selectedStructure={structure || (formData.structureId ? { id: formData.structureId, nom: formData.structureNom || 'Structure sélectionnée' } : null)}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertForm.js",
          "line": 230,
          "content": "console.log('[WORKFLOW_TEST] 1. Sélection de structure dans le formulaire de concert:', structure);",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertForm.js",
          "line": 233,
          "content": "handleRemoveStructure={handleRemoveStructureCallback}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertForm.js",
          "line": 234,
          "content": "handleCreateStructure={handleCreateStructure}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertOrganizerSection.js",
          "line": 98,
          "content": "{prog.structure && <span className={styles.contactStructure}>{prog.structure}</span>}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertOrganizerSection.js",
          "line": 119,
          "content": "{selectedContact.structure && (",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertOrganizerSection.js",
          "line": 120,
          "content": "<span className={styles.contactStructure}>{selectedContact.structure}</span>",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertOrganizerSection.js",
          "line": 162,
          "content": "<div className=\"fw-bold\">Structure:</div>",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertOrganizerSection.js",
          "line": 163,
          "content": "<div>{contact.structure || contact.structureNom || 'Non spécifiée'}</div>",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertOrganizerSection.js",
          "line": 196,
          "content": "{contact.adresse || contact.structureAdresse ? (",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertOrganizerSection.js",
          "line": 203,
          "content": ") : contact.structureAdresse ? (",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertOrganizerSection.js",
          "line": 205,
          "content": "<div>{contact.structureAdresse}</div>",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 2,
          "content": "import styles from './ConcertStructureSection.module.css';",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 8,
          "content": "* Composant pour la section Structure du détail d'un concert",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 11,
          "content": "const ConcertStructureSection = ({",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 13,
          "content": "structure,",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 15,
          "content": "selectedStructure,",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 17,
          "content": "setStructureSearchTerm,",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 19,
          "content": "structureResults,",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 20,
          "content": "isSearchingStructures,",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 22,
          "content": "handleRemoveStructure,",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 24,
          "content": "navigateToStructureDetails",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 26,
          "content": "const structureDropdownRef = useRef(null);",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 31,
          "content": "title=\"Structure\"",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 34,
          "content": "structure && !isEditMode && (",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 36,
          "content": "onClick={() => navigateToStructureDetails(structure.id)}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 46,
          "content": "<div className={styles.formGroup} ref={structureDropdownRef}>",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 47,
          "content": "<label className={styles.formLabel}>Associer une structure</label>",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 49,
          "content": "{!selectedStructure ? (",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 50,
          "content": "<div className={styles.structureSearchContainer}>",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 56,
          "content": "placeholder=\"Rechercher une structure par nom ou raison sociale...\"",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 58,
          "content": "onChange={(e) => setStructureSearchTerm(e.target.value)}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 64,
          "content": "onClick={() => handleCreateStructure()}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 66,
          "content": "Créer une structure",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 70,
          "content": "{isSearchingStructures && (",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 80,
          "content": "{showStructureResults && structureResults.length > 0 && (",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 82,
          "content": "{structureResults.map(struct => (",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 85,
          "content": "className={`dropdown-item ${styles.structureItem}`}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 88,
          "content": "<div className={styles.structureName}>",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 91,
          "content": "<div className={styles.structureDetails}>",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 92,
          "content": "{struct.type && <span className={styles.structureType}>{struct.type}</span>}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 100,
          "content": "{showStructureResults && structureResults.length === 0 &&",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 101,
          "content": "!isSearchingStructures && structureSearchTerm.length >= 2 && (",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 104,
          "content": "Aucune structure trouvée",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 110,
          "content": "<div className={styles.selectedStructure}>",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 112,
          "content": "<div className={styles.structureInfo}>",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 117,
          "content": "<span className={styles.structureType}>{selectedStructure.type}</span>",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 119,
          "content": "<div className={styles.structureDetails}>",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 121,
          "content": "<span className={styles.structureLocation}>",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 126,
          "content": "<span className={styles.structureSiret}>",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 131,
          "content": "<span className={styles.structureTva}>",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 142,
          "content": "onClick={handleRemoveStructure}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 152,
          "content": "Tapez au moins 2 caractères pour rechercher une structure par nom ou raison sociale.",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 155,
          "content": ") : structure ? (",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 240,
          "content": "Aucune structure n'est associée directement à ce concert.",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertStructureSection.js",
          "line": 247,
          "content": "export default ConcertStructureSection;",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertView.js",
          "line": 34,
          "content": "structure,",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertView.js",
          "line": 58,
          "content": "structure: structure ? {",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertView.js",
          "line": 60,
          "content": "structureId: structure.structureId,",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertView.js",
          "line": 62,
          "content": "allKeys: Object.keys(structure)",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertView.js",
          "line": 151,
          "content": "structure: `/structures/${entityId}`,",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertView.js",
          "line": 258,
          "content": "{/* Structure */}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertView.js",
          "line": 261,
          "content": "entityType=\"structure\"",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertView.js",
          "line": 262,
          "content": "name={structure.nom || 'Structure'}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertView.js",
          "line": 265,
          "content": "console.log('[ConcertView] Clic sur structure:', structure);",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertView.js",
          "line": 266,
          "content": "const structureId = structure.id || structure.structureId;",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertView.js",
          "line": 268,
          "content": "navigateToEntity('structure', structureId);",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertViewWithRelances.js",
          "line": 40,
          "content": "structure,",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertViewWithRelances.js",
          "line": 64,
          "content": "structure: structure ? {",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertViewWithRelances.js",
          "line": 66,
          "content": "structureId: structure.structureId,",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertViewWithRelances.js",
          "line": 68,
          "content": "allKeys: Object.keys(structure)",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertViewWithRelances.js",
          "line": 138,
          "content": "structure: 'structures'",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertViewWithRelances.js",
          "line": 273,
          "content": "{/* Structure */}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertViewWithRelances.js",
          "line": 276,
          "content": "entityType=\"structure\"",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertViewWithRelances.js",
          "line": 277,
          "content": "name={structure.nom || 'Structure'}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertViewWithRelances.js",
          "line": 280,
          "content": "console.log('[ConcertViewWithRelances] Clic sur structure:', structure);",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertViewWithRelances.js",
          "line": 282,
          "content": "console.log('[ConcertViewWithRelances] ID structure trouvé:', structureId);",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertViewWithRelancesWithRoles.js",
          "line": 26,
          "content": "structure,",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertViewWithRelancesWithRoles.js",
          "line": 47,
          "content": "structure: structure ? 'Présent' : 'Absent',",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertViewWithRelancesWithRoles.js",
          "line": 51,
          "content": "}, [concert, entity, contractId, factureId, lieu, artiste, contact, structure, allContacts, showActions]);",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertViewWithRelancesWithRoles.js",
          "line": 281,
          "content": "{/* Structure */}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertViewWithRelancesWithRoles.js",
          "line": 283,
          "content": "<div className={styles.structureSection}>",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertViewWithRelancesWithRoles.js",
          "line": 284,
          "content": "<p className={styles.entitiesLabel}>Structure</p>",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertViewWithRelancesWithRoles.js",
          "line": 286,
          "content": "entityType=\"structure\"",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertViewWithRelancesWithRoles.js",
          "line": 287,
          "content": "name={structure.nom || 'Structure'}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertViewWithRelancesWithRoles.js",
          "line": 290,
          "content": "console.log('[ConcertViewWithRelancesWithRoles] Clic sur structure:', structure);",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/desktop/ConcertViewWithRelancesWithRoles.js",
          "line": 292,
          "content": "navigateToEntity('structure', structureId);",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/mobile/ConcertView.js",
          "line": 20,
          "content": "// Pour ConcertStructureSection, utilisez la version desktop si la version mobile n'existe pas encore",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/mobile/ConcertView.js",
          "line": 21,
          "content": "import ConcertStructureSection from '../desktop/ConcertStructureSection';",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/mobile/ConcertView.js",
          "line": 27,
          "content": "* Partage la même structure que la version desktop mais avec des composants adaptés pour mobile",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/mobile/ConcertView.js",
          "line": 50,
          "content": "structure,",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/mobile/ConcertView.js",
          "line": 152,
          "content": "{/* Structure */}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/mobile/ConcertView.js",
          "line": 155,
          "content": "structure={structure}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/mobile/ConcertView.js",
          "line": 157,
          "content": "navigateToStructureDetails={(structureId) => navigate(`/structures/${structureId}`)}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/mobile/sections/ConcertOrganizerSectionMobile.js",
          "line": 53,
          "content": "placeholder=\"Nom de l'organisateur ou structure\"",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/mobile/sections/ConcertOrganizerSectionMobile.js",
          "line": 86,
          "content": "{result.structure && (",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/mobile/sections/ConcertOrganizerSectionMobile.js",
          "line": 87,
          "content": "<div className={styles.resultStructure}>",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/mobile/sections/ConcertOrganizerSectionMobile.js",
          "line": 115,
          "content": "{selectedContact.structure && (",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/mobile/sections/ConcertOrganizerSectionMobile.js",
          "line": 116,
          "content": "<div className={styles.progStructure}>",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/mobile/sections/ConcertOrganizerSectionMobile.js",
          "line": 165,
          "content": "{/* Structure */}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/sections/ConcertActions.js",
          "line": 80,
          "content": "// Vérifier si on peut générer une facture (besoin d'un contact et d'une structure au minimum)",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/sections/ConcertActions.js",
          "line": 85,
          "content": "if (!concert.structureId) {",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/sections/ConcertActions.js",
          "line": 86,
          "content": "return { status: 'no_structure', icon: 'bi-building-x', class: 'disabled', tooltip: 'Aucune structure associée' };",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/sections/ConcertActions.js",
          "line": 180,
          "content": "case 'no_structure':",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/sections/ConcertActions.js",
          "line": 182,
          "content": "// Rediriger vers l'édition du concert pour ajouter un contact/structure",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/sections/ConcertActions.js",
          "line": 215,
          "content": "disabled={factureStatusInfo.status === 'no_contact' || factureStatusInfo.status === 'no_structure'}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/sections/SearchDropdown.js",
          "line": 116,
          "content": "{item.structure && <div className={styles.itemDetail}>{item.structure}</div>}",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/sections/SelectedEntityCard.js",
          "line": 116,
          "content": "{entityType === 'contact' && entity.structure && (",
          "module": "concerts"
        },
        {
          "file": "src/components/concerts/sections/SelectedEntityCard.js",
          "line": 119,
          "content": "<span>{entity.structure}</span>",
          "module": "concerts"
        },
        {
          "file": "src/components/contact/parametrage/TagsManager.js",
          "line": 95,
          "content": "{ id: 1, nom: 'Urgent', type: 'Système', utilisations: 123, tache: true, projet: false, personne: true, structure: false },",
          "module": "other"
        },
        {
          "file": "src/components/contact/parametrage/TagsManager.js",
          "line": 97,
          "content": "{ id: 3, nom: 'Festival', type: 'Utilisateur', utilisations: 67, tache: false, projet: true, personne: false, structure: true },",
          "module": "other"
        },
        {
          "file": "src/components/contact/parametrage/TagsManager.js",
          "line": 99,
          "content": "{ id: 5, nom: 'Partenaire', type: 'Utilisateur', utilisations: 34, tache: false, projet: false, personne: true, structure: true }",
          "module": "other"
        },
        {
          "file": "src/components/contact/parametrage/TagsManager.js",
          "line": 238,
          "content": "{item.structure && <Badge bg=\"danger\" className=\"small\">S</Badge>}",
          "module": "other"
        },
        {
          "file": "src/components/contacts/ContactDatesTable.js",
          "line": 225,
          "content": "path: `/devis/nouveau?concertId=${item.id}&structureId=${item.structureId}`,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactDatesTable.js",
          "line": 227,
          "content": "params: { concertId: item.id, structureId: item.structureId },",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 13,
          "content": "import ContactStructureSection from '@/components/contacts/sections/ContactStructureSection';",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 22,
          "content": "* ContactFormUnified - Formulaire unifié pour créer Structure ou Personne",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 26,
          "content": "const { id, type } = useParams(); // type = 'structure' ou 'personne'",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 53,
          "content": "// Section Structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 55,
          "content": "structureAdresse: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 57,
          "content": "structureCodePostal: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 59,
          "content": "structureDepartement: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 61,
          "content": "structurePays: 'France',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 63,
          "content": "structureTelephone1: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 65,
          "content": "structureMobile: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 67,
          "content": "structureEmail: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 69,
          "content": "structureCommentaires2: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 71,
          "content": "structureCommentaires4: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 73,
          "content": "structureCommentaires6: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 241,
          "content": "if (contactType === 'structure') {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 243,
          "content": "if (!formData.structureRaisonSociale?.trim()) {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 244,
          "content": "errors.push('La raison sociale est obligatoire pour une structure');",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 257,
          "content": "const emailFields = ['structureEmail', 'mailDirect', 'mailPerso', 'mailDirect2', 'mailPerso2', 'mailDirect3', 'mailPerso3'];",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 269,
          "content": "const hasStructureData = formData.structureRaisonSociale?.trim();",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 272,
          "content": "if (hasStructureData && !hasPersonneData) return 'structure';",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 273,
          "content": "if (hasPersonneData && !hasStructureData) return 'personne';",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 278,
          "content": "// Gestionnaire de sauvegarde avec structure sectionnée",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 295,
          "content": "// Structure sectionnée pour Firebase",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 298,
          "content": "structure: {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 299,
          "content": "raisonSociale: formData.structureRaisonSociale?.trim() || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 301,
          "content": "suiteAdresse1: formData.structureSuiteAdresse1?.trim() || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 303,
          "content": "ville: formData.structureVille?.trim() || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 305,
          "content": "region: formData.structureRegion?.trim() || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 307,
          "content": "siteWeb: formData.structureSiteWeb?.trim() || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 309,
          "content": "telephone2: formData.structureTelephone2?.trim() || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 311,
          "content": "fax: formData.structureFax?.trim() || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 313,
          "content": "commentaires1: formData.structureCommentaires1?.trim() || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 315,
          "content": "commentaires3: formData.structureCommentaires3?.trim() || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 317,
          "content": "commentaires5: formData.structureCommentaires5?.trim() || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 436,
          "content": "toast.success(`${detectedType === 'structure' ? 'Structure' : 'Personne'} créée avec succès !`);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 441,
          "content": "toast.success(`${detectedType === 'structure' ? 'Structure' : 'Personne'} modifiée avec succès !`);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 511,
          "content": "? `Nouveau Contact - ${contactType === 'structure' ? 'Structure' : 'Personne'}`",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 521,
          "content": "icon={<i className={`bi bi-${contactType === 'structure' ? 'building' : 'person-badge'}`}></i>}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 569,
          "content": "{/* Section Structure */}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactFormUnified.js",
          "line": 632,
          "content": "entityName={formData.structureRaisonSociale || `${formData.prenom} ${formData.nom}` || 'Contact'}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactTypeSelector.js",
          "line": 8,
          "content": "* Permet de choisir entre créer une Structure ou une Personne",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactTypeSelector.js",
          "line": 32,
          "content": "className={`${styles.optionCard} ${styles.structureCard}`}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactTypeSelector.js",
          "line": 39,
          "content": "<h4 className={styles.cardTitle}>Structure</h4>",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactTypeSelector.js",
          "line": 59,
          "content": "<span>Créer une structure</span>",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactTypeSelector.js",
          "line": 91,
          "content": "<span>Association à des structures</span>",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactTypeSelector.js",
          "line": 110,
          "content": "Il est également possible d'associer des personnes à des structures après leur création.",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 35,
          "content": "// Nettoyer l'ID en enlevant les suffixes ajoutés par la liste (_structure, _personne_libre, etc.)",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 39,
          "content": "// D'abord, gérer le cas spécial _in_structureId pour les personnes dans une structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 45,
          "content": "cleanId = id.replace(/_structure$|_personne_libre$|_personne_\\d+$/, '');",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 70,
          "content": "const contactType = entityType === 'structure' ? 'structure' : 'personne';",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 72,
          "content": "// DEBUG: Analyser la structure des données quand elles changent",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 182,
          "content": "structure: `/structures/${entityId}`,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 210,
          "content": "// Gestionnaires pour les actions sur la structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 212,
          "content": "console.log('[ContactViewTabs] Édition de la structure:', structureData);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 217,
          "content": "const handleOpenStructureFiche = useCallback((structureData) => {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 218,
          "content": "console.log('[ContactViewTabs] Ouverture de la fiche structure:', structureData);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 220,
          "content": "navigateToEntity('structure', structureData.structureId, structureData.structureRaisonSociale);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 222,
          "content": "const originalId = structureData.id?.replace('unified_structure_', '');",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 224,
          "content": "navigateToEntity('structure', originalId, structureData.structureRaisonSociale);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 229,
          "content": "const handleAddCommentToStructure = useCallback((structureData) => {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 230,
          "content": "console.log('[ContactViewTabs] Ajout commentaire à la structure:', structureData);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 239,
          "content": "// Si on veut afficher une personne spécifique dans une structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 273,
          "content": "// Ajouter les infos de la structure associée",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 275,
          "content": "structureRaisonSociale: contact.structure?.raisonSociale || contact.structureRaisonSociale,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 276,
          "content": "structureNom: contact.structure?.nom || contact.structureNom,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 278,
          "content": "structureData: {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 279,
          "content": "structureRaisonSociale: contact.structure?.raisonSociale || contact.structureRaisonSociale,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 287,
          "content": "if (entityType === 'structure' && forcedViewType !== 'personne') {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 288,
          "content": "const structureData = contact.structure || {};",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 292,
          "content": "entityType: 'structure',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 293,
          "content": "structureRaisonSociale: structureData.raisonSociale || contact.structureRaisonSociale,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 294,
          "content": "structureNom: structureData.nom || contact.structureNom,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 296,
          "content": "structureTelephone1: structureData.telephone1 || contact.structureTelephone1,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 297,
          "content": "structureTelephone2: structureData.telephone2 || contact.structureTelephone2,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 298,
          "content": "structureMobile: structureData.mobile || contact.structureMobile,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 300,
          "content": "structureSiteWeb: structureData.siteWeb || contact.structureSiteWeb,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 301,
          "content": "structureSiret: structureData.siret || contact.structureSiret,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 302,
          "content": "structureType: structureData.type || contact.structureType,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 304,
          "content": "// Si structureData.adresse est un objet, extraire la propriété adresse",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 305,
          "content": "if (structureData.adresse && typeof structureData.adresse === 'object' && !Array.isArray(structureData.adresse)) {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 309,
          "content": "return structureData.adresse || contact.structureAdresse || '';",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 311,
          "content": "structureSuiteAdresse1: (() => {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 312,
          "content": "if (structureData.adresse && typeof structureData.adresse === 'object' && !Array.isArray(structureData.adresse)) {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 313,
          "content": "return structureData.adresse.suiteAdresse || structureData.suiteAdresse || contact.structureSuiteAdresse1 || '';",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 315,
          "content": "return structureData.suiteAdresse || contact.structureSuiteAdresse1 || '';",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 317,
          "content": "structureCodePostal: (() => {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 318,
          "content": "if (structureData.adresse && typeof structureData.adresse === 'object' && !Array.isArray(structureData.adresse)) {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 319,
          "content": "return structureData.adresse.codePostal || structureData.codePostal || contact.structureCodePostal || '';",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 321,
          "content": "return structureData.codePostal || contact.structureCodePostal || '';",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 323,
          "content": "structureVille: (() => {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 324,
          "content": "if (structureData.adresse && typeof structureData.adresse === 'object' && !Array.isArray(structureData.adresse)) {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 325,
          "content": "return structureData.adresse.ville || structureData.ville || contact.structureVille || '';",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 327,
          "content": "return structureData.ville || contact.structureVille || '';",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 329,
          "content": "structureDepartement: (() => {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 330,
          "content": "if (structureData.adresse && typeof structureData.adresse === 'object' && !Array.isArray(structureData.adresse)) {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 331,
          "content": "return structureData.adresse.departement || structureData.departement || contact.structureDepartement || '';",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 333,
          "content": "return structureData.departement || contact.structureDepartement || '';",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 335,
          "content": "structureRegion: (() => {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 336,
          "content": "if (structureData.adresse && typeof structureData.adresse === 'object' && !Array.isArray(structureData.adresse)) {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 337,
          "content": "return structureData.adresse.region || structureData.region || contact.structureRegion || '';",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 339,
          "content": "return structureData.region || contact.structureRegion || '';",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 341,
          "content": "structurePays: (() => {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 342,
          "content": "if (structureData.adresse && typeof structureData.adresse === 'object' && !Array.isArray(structureData.adresse)) {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 343,
          "content": "return structureData.adresse.pays || structureData.pays || contact.structurePays || '';",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 345,
          "content": "return structureData.pays || contact.structurePays || '';",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 351,
          "content": "salleNom: structureData.salle?.nom,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 353,
          "content": "salleCodePostal: structureData.salle?.codePostal,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 355,
          "content": "salleDepartement: structureData.salle?.departement,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 357,
          "content": "sallePays: structureData.salle?.pays,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 359,
          "content": "salleJauge1: structureData.salle?.jauge1,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 361,
          "content": "salleJauge3: structureData.salle?.jauge3,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 363,
          "content": "periodeFestivalMois: structureData.periodeFestivalMois,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 367,
          "content": "// Cas d'une personne liée à des structures",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 396,
          "content": "// Ajouter les structures associées",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 434,
          "content": "const structureName = useMemo(() => extractedData?.structureRaisonSociale, [extractedData?.structureRaisonSociale]);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 436,
          "content": "// Charger les dates pour les structures",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 446,
          "content": "// Essayer d'abord avec l'ID de la structure si disponible",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 448,
          "content": "console.log('[ContactViewTabs] Chargement des dates par structureId:', cleanId);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 453,
          "content": "if (dates.length === 0 && structureName) {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 454,
          "content": "console.log('[ContactViewTabs] Chargement des dates par structureName:', structureName);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 455,
          "content": "dates = await concertsService.getConcertsByStructure(currentOrganization.id, structureName);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 489,
          "content": "console.error('Erreur chargement dates structure:', error);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 492,
          "content": "}, [currentOrganization?.id, structureName, cleanId, entityType]);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 494,
          "content": "// Charger les dates au changement de structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 496,
          "content": "loadStructureDates();",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 529,
          "content": "const isStructure = extractedData && (!extractedData.prenom || extractedData.entityType === 'structure');",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 560,
          "content": "notFoundIcon: isStructure ? 'bi-building-x' : 'bi-person-x',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 561,
          "content": "notFoundTitle: isStructure ? 'Structure non trouvée' : 'Contact non trouvé',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 563,
          "content": "? 'La structure demandée n\\'existe pas ou n\\'est plus disponible.'",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 571,
          "content": "const hasStructureData = data.structureRaisonSociale?.trim();",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 572,
          "content": "const isStructure = forcedViewType ? (forcedViewType === 'structure') : (entityType === 'structure' || hasStructureData);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 574,
          "content": "const displayName = isStructure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 575,
          "content": "? (data.structureRaisonSociale || data.structure?.raisonSociale || 'Structure sans nom')",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 582,
          "content": "{isStructure ? (",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 590,
          "content": "{isStructure && data.tags && data.tags.length > 0 && (() => {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 596,
          "content": "{!isStructure && (",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 666,
          "content": "isStructure={forcedViewType ? (forcedViewType === 'structure') : (entityType === 'structure' || extractedData?.structureRaisonSociale)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 697,
          "content": "const hasStructureData = data?.structureRaisonSociale?.trim();",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 698,
          "content": "const isStructure = forcedViewType ? (forcedViewType === 'structure') : (entityType === 'structure' || hasStructureData);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 703,
          "content": "const hasStructureData = data?.structureRaisonSociale?.trim();",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 704,
          "content": "const isStructure = forcedViewType ? (forcedViewType === 'structure') : (entityType === 'structure' || hasStructureData);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 709,
          "content": "const hasStructureData = data?.structureRaisonSociale?.trim();",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 710,
          "content": "const isStructure = forcedViewType ? (forcedViewType === 'structure') : (entityType === 'structure' || hasStructureData);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 712,
          "content": "if (isStructure) {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 718,
          "content": "onClick: () => openPersonneModal({ structureId: cleanId })",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 733,
          "content": "isStructure={forcedViewType ? (forcedViewType === 'structure') : (entityType === 'structure' || extractedData?.structureRaisonSociale)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 735,
          "content": "structureData={extractedData}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 741,
          "content": "onEditStructure={handleEditStructure}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 742,
          "content": "onOpenStructureFiche={handleOpenStructureFiche}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 743,
          "content": "onAddCommentToStructure={handleAddCommentToStructure}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 789,
          "content": "isStructure,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 794,
          "content": "extractedData?.structureRaisonSociale,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactViewTabs.js",
          "line": 832,
          "content": "structureId={id}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 9,
          "content": "import StructureCreationModal from '@/components/contacts/modal/StructureCreationModal';",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 15,
          "content": "* Architecture Business-centrée avec affichage structures + personnes libres",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 23,
          "content": "structures,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 28,
          "content": "getStructureWithPersonnes",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 35,
          "content": "// États pour la modal d'édition des structures",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 37,
          "content": "const [editingStructure, setEditingStructure] = useState(null);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 46,
          "content": "// Callback après mise à jour de la structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 48,
          "content": "setShowEditStructureModal(false);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 68,
          "content": "// Ajouter les structures avec leurs personnes",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 70,
          "content": "const structureWithPersonnes = getStructureWithPersonnes(structure.id);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 71,
          "content": "const personnesCount = structureWithPersonnes?.personnes?.filter(p => p.actif !== false).length || 0;",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 73,
          "content": "// Ajouter la structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 75,
          "content": "id: `${structure.id}_structure`,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 77,
          "content": "_viewType: 'structure',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 79,
          "content": "nom: structure.raisonSociale || 'Structure sans nom',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 101,
          "content": "// Ajouter les personnes de cette structure (si demandé)",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 103,
          "content": "structureWithPersonnes?.personnes?.forEach(personne => {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 108,
          "content": "_structureId: structure.id,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 121,
          "content": "structureName: structure.raisonSociale,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 136,
          "content": "// Collecter les IDs des personnes déjà affichées avec des structures",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 172,
          "content": "}, [structures, personnes, currentOrganization, filterType, getStructureWithPersonnes]);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 174,
          "content": "// Fonction pour ouvrir la modal d'édition - gère personnes et structures",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 181,
          "content": "// Si c'est une structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 182,
          "content": "if (item._viewType === 'structure' || item.entityType === 'structure') {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 186,
          "content": "typeStructure: item.type || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 198,
          "content": "console.log('[ContactsList] editStructureData préparé:', editStructureData);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 200,
          "content": "setShowEditStructureModal(true);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 236,
          "content": "if (type === 'structure') {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 244,
          "content": "// Fonction ou type de structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 246,
          "content": "if (item.entityType === 'structure') {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 257,
          "content": "title={type === 'structure' ? 'Structure' : 'Personne'}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 284,
          "content": "if (item.entityType === 'structure') {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 297,
          "content": "} else if (item.structureName) {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 300,
          "content": "<small className=\"text-muted text-truncate d-block\" title={item.structureName}>",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 302,
          "content": "{item.structureName}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 392,
          "content": "const structures = items.filter(item => item.entityType === 'structure').length;",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 395,
          "content": "const personnesEnStructure = personnes - personnesLibres;",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 408,
          "content": "id: 'structures',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 410,
          "content": "value: structures,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 413,
          "content": "subtext: `${Math.round((structures / total) * 100) || 0}%`",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 421,
          "content": "subtext: `${personnesEnStructure} liées + ${personnesLibres} libres`",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 492,
          "content": "const contactType = viewType === 'structure' ? 'structure' : 'personne';",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 507,
          "content": "{ value: 'structures', label: 'Structures', icon: 'bi-building' },",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 520,
          "content": "case 'structures':",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 521,
          "content": "filtered = filtered.filter(item => item.entityType === 'structure');",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 548,
          "content": "item.structureName?.toLowerCase().includes(query)",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 597,
          "content": "searchPlaceholder=\"Rechercher dans structures et personnes...\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 616,
          "content": "{/* Modal d'édition des structures */}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 618,
          "content": "show={showEditStructureModal}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 620,
          "content": "setShowEditStructureModal(false);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 623,
          "content": "onCreated={handleStructureUpdated}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsList.js",
          "line": 625,
          "content": "initialData={editingStructure}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListFiltered.js",
          "line": 11,
          "content": "* Utilise useContactsRelational pour filtrer structures et personnes par tags",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListFiltered.js",
          "line": 21,
          "content": "structures,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListFiltered.js",
          "line": 42,
          "content": "// Filtrer les structures par tag",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListFiltered.js",
          "line": 44,
          "content": ".filter(structure => structure.tags && structure.tags.includes(filterTag))",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListFiltered.js",
          "line": 48,
          "content": "entityType: 'structure',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListFiltered.js",
          "line": 50,
          "content": "nom: structure.raisonSociale || 'Structure sans nom',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListFiltered.js",
          "line": 52,
          "content": "displayName: structure.raisonSociale || 'Structure sans nom',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListFiltered.js",
          "line": 86,
          "content": "}, [structures, personnes, filterTag, filterType, refreshKey]);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListFiltered.js",
          "line": 103,
          "content": "{contact.type === 'structure' ? 'Structure' : 'Personne'}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListFiltered.js",
          "line": 134,
          "content": "{contact.type === 'structure' && contact.raisonSociale && (",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListFiltered.js",
          "line": 145,
          "content": "<Badge bg={contact.type === 'structure' ? 'primary' : 'success'}>",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListRelational.js",
          "line": 24,
          "content": "const [expandedStructures, setExpandedStructures] = useState(new Set());",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListRelational.js",
          "line": 26,
          "content": "// Gérer l'expansion/réduction des structures",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListRelational.js",
          "line": 28,
          "content": "const newExpanded = new Set(expandedStructures);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListRelational.js",
          "line": 30,
          "content": "newExpanded.delete(structureId);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListRelational.js",
          "line": 32,
          "content": "newExpanded.add(structureId);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListRelational.js",
          "line": 34,
          "content": "setExpandedStructures(newExpanded);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListRelational.js",
          "line": 39,
          "content": "const name = type === 'structure'",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListRelational.js",
          "line": 45,
          "content": "// Rendu d'une personne dans une structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListRelational.js",
          "line": 46,
          "content": "const renderPersonneInStructure = (personne, structure) => (",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListRelational.js",
          "line": 111,
          "content": "// Rendu d'une structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListRelational.js",
          "line": 112,
          "content": "const renderStructure = (structure) => {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListRelational.js",
          "line": 118,
          "content": "<div key={structure.id} className=\"structure-card mb-3 border rounded\">",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListRelational.js",
          "line": 120,
          "content": "className=\"structure-header p-3 d-flex align-items-center justify-content-between cursor-pointer\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListRelational.js",
          "line": 121,
          "content": "onClick={() => hasPersonnes && toggleStructure(structure.id)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListRelational.js",
          "line": 129,
          "content": "handleOpenContact(structure, 'structure');",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListRelational.js",
          "line": 176,
          "content": "<div className=\"structure-personnes border-top\">",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListRelational.js",
          "line": 177,
          "content": "{activePersonnes.map(personne => renderPersonneInStructure(personne, structure))}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListRelational.js",
          "line": 275,
          "content": "<span><strong>{statistics.totalStructures}</strong> structures</span>",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListRelational.js",
          "line": 316,
          "content": "{/* Structures */}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListRelational.js",
          "line": 317,
          "content": "{filteredData.structures.length > 0 && (",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListRelational.js",
          "line": 320,
          "content": "Structures ({filteredData.structures.length})",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/ContactsListRelational.js",
          "line": 322,
          "content": "{filteredData.structures.map(renderStructure)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactConcertsSection.js",
          "line": 13,
          "content": "* @param {boolean} props.showCardWrapper - Indique si la structure de carte doit être affichée",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 16,
          "content": "import StructureSearchSection from '@/components/contacts/sections/StructureSearchSection';",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 60,
          "content": "structureRaisonSociale: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 62,
          "content": "structureSiret: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 64,
          "content": "structureCodePostal: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 66,
          "content": "structureTva: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 68,
          "content": "structureSiteWeb: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 77,
          "content": "// Callback mémorisé pour la sélection de structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 79,
          "content": "if (structure) {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 80,
          "content": "setSelectedStructure(structure);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 83,
          "content": "structureId: structure.id,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 85,
          "content": "structureSiret: structure.siret || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 87,
          "content": "structureCodePostal: structure.codePostal || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 89,
          "content": "structureType: structure.type || ''",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 94,
          "content": "// Callback mémorisé pour supprimer la structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 96,
          "content": "setSelectedStructure(null);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 99,
          "content": "structureId: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 101,
          "content": "structureSiret: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 103,
          "content": "structureCodePostal: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 105,
          "content": "structureType: ''",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 134,
          "content": "// Hook de recherche pour les structures",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 136,
          "content": "searchTerm: structureSearchTerm,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 138,
          "content": "results: structureResults,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 140,
          "content": "setShowResults: setShowStructureResults,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 142,
          "content": "dropdownRef: structureDropdownRef,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 143,
          "content": "handleCreate: handleCreateStructure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 145,
          "content": "entityType: 'structures',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 173,
          "content": "// État pour la structure sélectionnée",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 174,
          "content": "const [selectedStructure, setSelectedStructure] = useState(null);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 267,
          "content": "structureId: data.structureId || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 268,
          "content": "structureRaisonSociale: data.structure?.raisonSociale || data.structureRaisonSociale || data.structureNom || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 269,
          "content": "structureType: data.structure?.type || data.structureType || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 271,
          "content": "structureAdresse: data.structure?.adresse || data.structureAdresse || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 272,
          "content": "structureCodePostal: data.structure?.codePostal || data.structureCodePostal || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 273,
          "content": "structureVille: data.structure?.ville || data.structureVille || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 275,
          "content": "structureNumeroIntracommunautaire: data.structure?.numeroIntracommunautaire || data.structureNumeroIntracommunautaire || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 276,
          "content": "structureSiteWeb: data.structure?.siteWeb || data.structureSiteWeb || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 280,
          "content": "// Charger la structure liée si un structureId existe",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 283,
          "content": "const structureRef = doc(db, 'structures', data.structureId);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 284,
          "content": "const structureSnap = await getDoc(structureRef);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 286,
          "content": "const structureData = { id: structureSnap.id, ...structureSnap.data() };",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 287,
          "content": "setSelectedStructure(structureData);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 289,
          "content": "} catch (structureError) {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 290,
          "content": "console.error('Erreur lors du chargement de la structure:', structureError);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 317,
          "content": "if (name === 'structureSiret') {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 354,
          "content": "if (formData.structureSiret.trim() && !validateSiret(formData.structureSiret.trim())) {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 477,
          "content": "// Structure plate pour éviter les objets imbriqués - Format unifié",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 483,
          "content": "// Section 1: Structure (avec données du formulaire)",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 484,
          "content": "structureRaisonSociale: formData.structureRaisonSociale?.trim() || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 486,
          "content": "structureSuiteAdresse1: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 487,
          "content": "structureCodePostal: formData.structureCodePostal?.trim() || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 489,
          "content": "structureDepartement: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 491,
          "content": "structurePays: 'France',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 492,
          "content": "structureSiteWeb: formData.structureSiteWeb?.trim() || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 494,
          "content": "structureTelephone2: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 496,
          "content": "structureFax: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 498,
          "content": "structureType: formData.structureType || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 499,
          "content": "structureSiret: formData.structureSiret?.trim() || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 501,
          "content": "structureNumeroIntracommunautaire: formData.structureNumeroIntracommunautaire?.trim() || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 503,
          "content": "structureCommentaires2: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 505,
          "content": "structureCommentaires4: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 507,
          "content": "structureCommentaires6: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 563,
          "content": "structureId: selectedStructure?.id || formData.structureId || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 605,
          "content": "// Relations avec la structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 607,
          "content": "console.log(`🔗 Création de la relation bidirectionnelle avec la structure`);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 611,
          "content": "targetType: 'structures',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 613,
          "content": "relationName: 'structure',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 780,
          "content": "{/* Section Structure - Composant unifié */}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 782,
          "content": "structureSearchTerm={structureSearchTerm}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 783,
          "content": "setStructureSearchTerm={setStructureSearchTerm}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 785,
          "content": "showStructureResults={showStructureResults}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 786,
          "content": "setShowStructureResults={setShowStructureResults}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 788,
          "content": "structureDropdownRef={structureDropdownRef}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 789,
          "content": "selectedStructure={selectedStructure}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 791,
          "content": "handleRemoveStructure={handleStructureRemove}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactForm.js",
          "line": 792,
          "content": "handleCreateStructure={handleCreateStructure}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactView.js",
          "line": 28,
          "content": "structure,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactView.js",
          "line": 43,
          "content": "structureId: contact.structureId,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactView.js",
          "line": 47,
          "content": "structure: structure ? {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactView.js",
          "line": 55,
          "content": "// Debug - Affichage complet du contact pour voir la structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactView.js",
          "line": 124,
          "content": "structure: `/structures/${entityId}`,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactView.js",
          "line": 195,
          "content": "{(structure || lieux?.length > 0 || concerts?.length > 0 || artistes?.length > 0) && (",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactView.js",
          "line": 200,
          "content": "{/* Structure */}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactView.js",
          "line": 203,
          "content": "entityType=\"structure\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactView.js",
          "line": 204,
          "content": "name={structure.nom || 'Structure'}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactView.js",
          "line": 207,
          "content": "console.log('[ContactView] Clic sur structure:', structure);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactsList.js",
          "line": 115,
          "content": "label: 'Structure',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/ContactsList.js",
          "line": 118,
          "content": "render: (row) => row.structure?.nom || <span className=\"text-muted\">Non spécifiée</span>",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/sections/ContactHeader.js",
          "line": 44,
          "content": "// Préparer les actions selon le mode (même structure que ConcertHeader)",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/sections/ContactsListSearchFilter.js",
          "line": 9,
          "content": "filterStructure,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/desktop/sections/ContactsListSearchFilter.js",
          "line": 13,
          "content": "structures,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/mobile/ContactForm.js",
          "line": 99,
          "content": "// Étape 2: Informations sur la structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/mobile/ContactForm.js",
          "line": 101,
          "content": "const [structure, setStructure] = useState(data.structure || '');",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/mobile/ContactForm.js",
          "line": 102,
          "content": "const [structureType, setStructureType] = useState(data.structureType || 'association');",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/mobile/ContactForm.js",
          "line": 107,
          "content": "onNext({ structure, structureType, siret, codeAPE });",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/mobile/ContactForm.js",
          "line": 113,
          "content": "<label htmlFor=\"structure\">Nom de la structure</label>",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/mobile/ContactForm.js",
          "line": 116,
          "content": "id=\"structure\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/mobile/ContactForm.js",
          "line": 118,
          "content": "onChange={(e) => setStructure(e.target.value)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/mobile/ContactForm.js",
          "line": 124,
          "content": "<label htmlFor=\"structureType\">Type de structure</label>",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/mobile/ContactForm.js",
          "line": 126,
          "content": "id=\"structureType\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/mobile/ContactForm.js",
          "line": 128,
          "content": "onChange={(e) => setStructureType(e.target.value)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/mobile/ContactForm.js",
          "line": 176,
          "content": "const [adresse, setAdresse] = useState(data.structureAdresse || '');",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/mobile/ContactForm.js",
          "line": 178,
          "content": "const [ville, setVille] = useState(data.structureVille || '');",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/mobile/ContactForm.js",
          "line": 224,
          "content": "structureAdresse: adresse,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/mobile/ContactForm.js",
          "line": 226,
          "content": "structureVille: ville,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/mobile/ContactForm.js",
          "line": 421,
          "content": "title: 'Structure',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/mobile/ContactView.js",
          "line": 161,
          "content": "{/* Structure associée */}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/mobile/ContactView.js",
          "line": 164,
          "content": "title=\"Structure\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/mobile/ContactView.js",
          "line": 167,
          "content": "{contact.structureId ? (",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/mobile/ContactView.js",
          "line": 169,
          "content": "<div className=\"fw-bold\">{contact.structureNom || \"Structure associée\"}</div>",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/mobile/ContactView.js",
          "line": 171,
          "content": "{contact.structureType && `Type : ${contact.structureType}`}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/mobile/ContactView.js",
          "line": 175,
          "content": "<span className=\"text-muted\">Aucune structure associée</span>",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/ContactModalsContainer.js",
          "line": 5,
          "content": "import StructureCreationModal from './StructureCreationModal';",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/ContactModalsContainer.js",
          "line": 11,
          "content": "* Gère les modals de structure et personne de manière centralisée",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/ContactModalsContainer.js",
          "line": 15,
          "content": "showStructureModal,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/ContactModalsContainer.js",
          "line": 20,
          "content": "closeStructureModal,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/ContactModalsContainer.js",
          "line": 27,
          "content": "// Callback pour la création de structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/ContactModalsContainer.js",
          "line": 29,
          "content": "console.log('Structure créée depuis modal globale:', newStructure);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/ContactModalsContainer.js",
          "line": 30,
          "content": "// Ouvrir l'onglet de la nouvelle structure avec le viewType structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/ContactModalsContainer.js",
          "line": 31,
          "content": "const displayName = newStructure.raisonSociale || newStructure.structureRaisonSociale || 'Nouvelle structure';",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/ContactModalsContainer.js",
          "line": 34,
          "content": "closeStructureModal();",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/ContactModalsContainer.js",
          "line": 61,
          "content": "{/* Modal de création de structure */}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/ContactModalsContainer.js",
          "line": 63,
          "content": "show={showStructureModal}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/ContactModalsContainer.js",
          "line": 65,
          "content": "onCreated={handleStructureCreated}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/ContactModalsContainer.js",
          "line": 73,
          "content": "structureId={personneModalData?.structureId}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/GlobalModalsContainer.js",
          "line": 5,
          "content": "import StructureCreationModal from './StructureCreationModal';",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/GlobalModalsContainer.js",
          "line": 14,
          "content": "closeStructureCreationModal,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/GlobalModalsContainer.js",
          "line": 20,
          "content": "// Callback pour la création de structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/GlobalModalsContainer.js",
          "line": 22,
          "content": "console.log('Structure créée depuis modal globale:', newStructure);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/GlobalModalsContainer.js",
          "line": 23,
          "content": "// Ouvrir l'onglet de la nouvelle structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/GlobalModalsContainer.js",
          "line": 24,
          "content": "openContactTab(newStructure.id, newStructure.structureRaisonSociale);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/GlobalModalsContainer.js",
          "line": 26,
          "content": "closeStructureCreationModal();",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/GlobalModalsContainer.js",
          "line": 41,
          "content": "{/* Modal de création de structure */}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/GlobalModalsContainer.js",
          "line": 43,
          "content": "show={activeModals.structureCreation}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/GlobalModalsContainer.js",
          "line": 45,
          "content": "onCreated={handleStructureCreated}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/PersonneCreationModal.js",
          "line": 9,
          "content": "import styles from './StructureCreationModal.module.css'; // Réutiliser les styles",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/PersonneCreationModal.js",
          "line": 16,
          "content": "function PersonneCreationModal({ show, onHide, onCreated, editMode = false, initialData = null, structureId = null }) {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/PersonneCreationModal.js",
          "line": 189,
          "content": "isPersonneLibre: !structureId, // Personne libre seulement si pas de structureId",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/PersonneCreationModal.js",
          "line": 194,
          "content": "console.log('📎 [PersonneCreationModal] Structure ID fourni:', structureId);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/PersonneCreationModal.js",
          "line": 204,
          "content": "// Si un structureId est fourni, créer automatiquement la liaison",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/PersonneCreationModal.js",
          "line": 206,
          "content": "console.log('🔗 [PersonneCreationModal] Création de la liaison avec la structure:', structureId);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/PersonneCreationModal.js",
          "line": 210,
          "content": "structureId: structureId,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/PersonneCreationModal.js",
          "line": 226,
          "content": "alert(`La personne a été créée mais n'a pas pu être associée à la structure: ${liaisonResult.error}`);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/PersonneCreationModal.js",
          "line": 237,
          "content": "structureId: structureId // Inclure le structureId pour que le parent sache qu'il y a une liaison",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 1,
          "content": "// src/components/contacts/modal/StructureCreationModal.js",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 6,
          "content": "import { structuresService } from '@/services/contacts/structuresService';",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 8,
          "content": "import styles from './StructureCreationModal.module.css';",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 11,
          "content": "* Modal de création d'une nouvelle structure - MODÈLE RELATIONNEL",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 12,
          "content": "* Utilise structuresService pour créer dans la collection 'structures'",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 15,
          "content": "function StructureCreationModal({ show, onHide, onCreated, editMode = false, initialData = null }) {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 47,
          "content": "structureCodeClient: initialData.codeClient || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 49,
          "content": "structureAdresseAdmin: initialData.adresseAdmin || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 51,
          "content": "structureCodePostalAdmin: initialData.codePostalAdmin || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 53,
          "content": "structurePaysAdmin: initialData.paysAdmin || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 55,
          "content": "structureDepartementAdmin: initialData.departementAdmin || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 57,
          "content": "structureFaxAdmin: initialData.faxAdmin || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 59,
          "content": "structureSignataire: initialData.signataire || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 61,
          "content": "structureSiret: initialData.siret || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 63,
          "content": "structureLicence: initialData.licence || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 67,
          "content": "structureSiteWeb: initialData.siteWeb || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 69,
          "content": "structureInstagram: initialData.instagram || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 71,
          "content": "structureLinkedin: initialData.linkedin || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 101,
          "content": "structureCodeClient: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 103,
          "content": "structureAdresseAdmin: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 105,
          "content": "structureCodePostalAdmin: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 107,
          "content": "structurePaysAdmin: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 109,
          "content": "structureDepartementAdmin: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 111,
          "content": "structureFaxAdmin: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 113,
          "content": "structureSignataire: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 115,
          "content": "structureSiret: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 117,
          "content": "structureLicence: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 121,
          "content": "structureSiteWeb: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 123,
          "content": "structureInstagram: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 125,
          "content": "structureLinkedin: '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 133,
          "content": "// Les données peuvent être dans initialData.structure (nouveau format) ou directement dans initialData (ancien format)",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 138,
          "content": "structureRaisonSociale: structureData.raisonSociale || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 139,
          "content": "structureSource: structureData.source || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 142,
          "content": "structureAdresse: structureData.adresse || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 143,
          "content": "structureSuiteAdresse1: structureData.suiteAdresse || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 145,
          "content": "structureVille: structureData.ville || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 146,
          "content": "structureDepartement: structureData.departement || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 148,
          "content": "structurePays: structureData.pays || 'France',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 151,
          "content": "structureEmail: structureData.email || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 152,
          "content": "structureEmail2: structureData.email2 || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 154,
          "content": "structureTelephone2: structureData.telephone2 || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 155,
          "content": "structureFax: structureData.fax || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 158,
          "content": "structureCodeClient: structureData.codeClient || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 159,
          "content": "structureRaisonSocialeAdmin: structureData.raisonSocialeAdmin || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 161,
          "content": "structureSuiteAdresseAdmin: structureData.suiteAdresseAdmin || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 162,
          "content": "structureCodePostalAdmin: structureData.codePostalAdmin || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 164,
          "content": "structurePaysAdmin: structureData.paysAdmin || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 165,
          "content": "structureRegionAdmin: structureData.regionAdmin || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 167,
          "content": "structureTelAdmin: structureData.telAdmin || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 168,
          "content": "structureFaxAdmin: structureData.faxAdmin || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 170,
          "content": "structureSignataire: structureData.signataire || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 171,
          "content": "structureQualite: structureData.qualite || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 173,
          "content": "structureCodeApe: structureData.codeApe || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 174,
          "content": "structureLicence: structureData.licence || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 178,
          "content": "structureSiteWeb: structureData.siteWeb || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 179,
          "content": "structureFacebook: structureData.facebook || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 181,
          "content": "structureTwitter: structureData.twitter || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 182,
          "content": "structureLinkedin: structureData.linkedin || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 202,
          "content": "structureAdresse: addressData.adresse || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 204,
          "content": "structureVille: addressData.ville || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 206,
          "content": "structureRegion: addressData.region || '',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 215,
          "content": "alert('Le nom de la structure est obligatoire');",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 228,
          "content": "// Mode édition - mettre à jour la structure existante",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 229,
          "content": "console.log('🔄 [StructureCreationModal] Mode édition - mise à jour de la structure:', initialData.id);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 251,
          "content": "const updateResult = await structuresService.updateStructure(initialData.id, updatedData, currentUser?.uid);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 257,
          "content": "console.log('✅ [StructureCreationModal] Structure mise à jour avec succès');",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 267,
          "content": "// Mode création - créer une nouvelle structure dans la collection 'structures'",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 289,
          "content": "console.log('🆕 [StructureCreationModal] Création nouvelle structure:', structureData);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 291,
          "content": "const result = await structuresService.createStructure(structureData, currentOrganization.id, currentUser?.uid);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 297,
          "content": "console.log('✅ [StructureCreationModal] Structure créée avec ID:', result.id);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 303,
          "content": "...structureData",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 334,
          "content": "console.error(`❌ [StructureCreationModal] Erreur lors de ${editMode ? 'la mise à jour' : 'la création'} de la structure:`, error);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 335,
          "content": "alert(`Erreur lors de ${editMode ? 'la mise à jour' : 'la création'} de la structure: ${error.message}`);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 492,
          "content": "value={formData.structureCodeClient}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 493,
          "content": "onChange={(e) => handleInputChange('structureCodeClient', e.target.value)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 502,
          "content": "value={formData.structureRaisonSocialeAdmin}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 503,
          "content": "onChange={(e) => handleInputChange('structureRaisonSocialeAdmin', e.target.value)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 512,
          "content": "value={formData.structureAdresseAdmin}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 513,
          "content": "onChange={(e) => handleInputChange('structureAdresseAdmin', e.target.value)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 522,
          "content": "value={formData.structureSuiteAdresseAdmin}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 523,
          "content": "onChange={(e) => handleInputChange('structureSuiteAdresseAdmin', e.target.value)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 532,
          "content": "value={formData.structureCodePostalAdmin}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 533,
          "content": "onChange={(e) => handleInputChange('structureCodePostalAdmin', e.target.value)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 542,
          "content": "value={formData.structureVilleAdmin}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 543,
          "content": "onChange={(e) => handleInputChange('structureVilleAdmin', e.target.value)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 552,
          "content": "value={formData.structurePaysAdmin}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 553,
          "content": "onChange={(e) => handleInputChange('structurePaysAdmin', e.target.value)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 562,
          "content": "value={formData.structureRegionAdmin}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 563,
          "content": "onChange={(e) => handleInputChange('structureRegionAdmin', e.target.value)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 572,
          "content": "value={formData.structureDepartementAdmin}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 573,
          "content": "onChange={(e) => handleInputChange('structureDepartementAdmin', e.target.value)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 582,
          "content": "value={formData.structureTelAdmin}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 583,
          "content": "onChange={(e) => handleInputChange('structureTelAdmin', e.target.value)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 592,
          "content": "value={formData.structureFaxAdmin}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 593,
          "content": "onChange={(e) => handleInputChange('structureFaxAdmin', e.target.value)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 602,
          "content": "value={formData.structureEmailAdmin}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 603,
          "content": "onChange={(e) => handleInputChange('structureEmailAdmin', e.target.value)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 612,
          "content": "value={formData.structureSignataire}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 613,
          "content": "onChange={(e) => handleInputChange('structureSignataire', e.target.value)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 622,
          "content": "value={formData.structureQualite}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 623,
          "content": "onChange={(e) => handleInputChange('structureQualite', e.target.value)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 632,
          "content": "value={formData.structureSiret}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 633,
          "content": "onChange={(e) => handleInputChange('structureSiret', e.target.value)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 642,
          "content": "value={formData.structureCodeApe}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 643,
          "content": "onChange={(e) => handleInputChange('structureCodeApe', e.target.value)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 652,
          "content": "value={formData.structureLicence}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 653,
          "content": "onChange={(e) => handleInputChange('structureLicence', e.target.value)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 662,
          "content": "value={formData.structureTvaIntracom}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 663,
          "content": "onChange={(e) => handleInputChange('structureTvaIntracom', e.target.value)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 678,
          "content": "value={formData.structureSiteWeb}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 679,
          "content": "onChange={(e) => handleInputChange('structureSiteWeb', e.target.value)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 687,
          "content": "placeholder=\"https://facebook.com/structure\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 689,
          "content": "onChange={(e) => handleInputChange('structureFacebook', e.target.value)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 697,
          "content": "placeholder=\"https://instagram.com/structure\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 699,
          "content": "onChange={(e) => handleInputChange('structureInstagram', e.target.value)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 707,
          "content": "placeholder=\"https://twitter.com/structure\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 709,
          "content": "onChange={(e) => handleInputChange('structureTwitter', e.target.value)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 717,
          "content": "placeholder=\"https://linkedin.com/company/structure\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 719,
          "content": "onChange={(e) => handleInputChange('structureLinkedin', e.target.value)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 727,
          "content": "placeholder=\"https://youtube.com/structure\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 729,
          "content": "onChange={(e) => handleInputChange('structureYoutube', e.target.value)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 741,
          "content": "{editMode ? 'Modifier la Structure' : 'Nouvelle Structure'}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 750,
          "content": "<Form.Label>Nom de la structure *</Form.Label>",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 753,
          "content": "placeholder=\"Raison sociale de la structure\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 836,
          "content": "{editMode ? 'Mettre à jour' : 'Créer la structure'}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/modal/StructureCreationModal.js",
          "line": 846,
          "content": "export default StructureCreationModal;",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactBottomTabs.js",
          "line": 151,
          "content": "if (extractedData?.structureRaisonSociale || extractedData?.id) {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactBottomTabs.js",
          "line": 153,
          "content": "structureId: extractedData.id || contactId,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactBottomTabs.js",
          "line": 154,
          "content": "structureName: extractedData.structureRaisonSociale || extractedData.structureNom",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactInfoSection.js",
          "line": 6,
          "content": "* Gère l'affichage pour les structures et les personnes libres",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactInfoSection.js",
          "line": 8,
          "content": "const ContactInfoSection = React.memo(({ data, entityType, isStructure }) => {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactInfoSection.js",
          "line": 13,
          "content": "{isStructure ? (",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactInfoSection.js",
          "line": 14,
          "content": "// Affichage Structure - Tous les champs",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactInfoSection.js",
          "line": 19,
          "content": "{data.structureEmail || <span className={styles.emptyValue}>Non renseigné</span>}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactInfoSection.js",
          "line": 26,
          "content": "{data.structureTelephone1 || <span className={styles.emptyValue}>Non renseigné</span>}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactInfoSection.js",
          "line": 30,
          "content": "{data.structureTelephone2 && (",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactInfoSection.js",
          "line": 33,
          "content": "<span className={styles.value}>{data.structureTelephone2}</span>",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactInfoSection.js",
          "line": 42,
          "content": "data.structureAdresse,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactInfoSection.js",
          "line": 44,
          "content": "data.structureCodePostal,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactInfoSection.js",
          "line": 46,
          "content": "data.structureDepartement,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactInfoSection.js",
          "line": 48,
          "content": "data.structurePays",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactInfoSection.js",
          "line": 55,
          "content": "{data.structureSiteWeb && (",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactInfoSection.js",
          "line": 58,
          "content": "<span className={styles.value}>{data.structureSiteWeb}</span>",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactInfoSection.js",
          "line": 62,
          "content": "{data.structureSiret && (",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactInfoSection.js",
          "line": 65,
          "content": "<span className={styles.value}>{data.structureSiret}</span>",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 7,
          "content": "* Section d'affichage et de gestion des personnes associées à une structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 11,
          "content": "isStructure,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 13,
          "content": "structureData,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 19,
          "content": "onEditStructure,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 21,
          "content": "onAddCommentToStructure,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 25,
          "content": "if (isStructure) {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 117,
          "content": "tooltip: 'Dissocier de la structure',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 136,
          "content": "// Pour les personnes, afficher les structures associées",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 140,
          "content": "<div className={styles.structureContent}>",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 143,
          "content": "{structures.map((structure) => (",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 146,
          "content": "entityType=\"structure\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 147,
          "content": "name={structure.raisonSociale || 'Structure sans nom'}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 152,
          "content": "return parts.join(' • ') || 'Structure';",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 156,
          "content": "navigateToEntity('structure', structure.id, structure.raisonSociale);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 182,
          "content": "tooltip: 'Ouvrir la fiche structure',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 184,
          "content": "onClick: () => navigateToEntity('structure', structure.id, structure.raisonSociale)",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 190,
          "content": ") : structureData?.structureRaisonSociale ? (",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 191,
          "content": "// Fallback pour l'ancien format (personne dans une structure unique)",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 194,
          "content": "entityType=\"structure\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 196,
          "content": "subtitle={formatActivityTags(structureData.tags || [], 'Structure')}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 198,
          "content": "if (structureData?.structureId) {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 199,
          "content": "navigateToEntity('structure', structureData.structureId, structureData.structureRaisonSociale);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 201,
          "content": "const originalId = structureData.id?.replace('unified_structure_', '');",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 203,
          "content": "navigateToEntity('structure', originalId, structureData.structureRaisonSociale);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 213,
          "content": "tooltip: 'Ouvrir la fiche structure',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 215,
          "content": "onClick: () => onOpenStructureFiche && onOpenStructureFiche(structureData)",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 220,
          "content": "tooltip: 'Modifier cette structure',",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 222,
          "content": "onClick: () => onEditStructure && onEditStructure(structureData)",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 229,
          "content": "onClick: () => onAddCommentToStructure && onAddCommentToStructure(structureData)",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 235,
          "content": "<div className={styles.emptyStructure}>",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 237,
          "content": "<p>Aucune structure associée</p>",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactPersonsSection.js",
          "line": 238,
          "content": "<small>Les informations de la structure apparaîtront ici.</small>",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 4,
          "content": "import styles from './ContactStructureSection.module.css';",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 7,
          "content": "* ContactStructureSection - Section détaillée pour les informations de structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 8,
          "content": "* Gère tous les champs liés à la structure selon les spécifications",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 10,
          "content": "const ContactStructureSection = ({",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 28,
          "content": "name=\"structureRaisonSociale\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 29,
          "content": "value={formData.structureRaisonSociale || ''}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 31,
          "content": "placeholder=\"Nom de la structure, entreprise, association...\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 35,
          "content": "{errors.structureRaisonSociale}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 49,
          "content": "name=\"structureAdresse\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 50,
          "content": "value={formData.structureAdresse || ''}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 53,
          "content": "isInvalid={!!errors.structureAdresse}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 56,
          "content": "{errors.structureAdresse}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 67,
          "content": "name=\"structureSuiteAdresse1\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 68,
          "content": "value={formData.structureSuiteAdresse1 || ''}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 71,
          "content": "isInvalid={!!errors.structureSuiteAdresse1}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 74,
          "content": "{errors.structureSuiteAdresse1}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 90,
          "content": "name=\"structureCodePostal\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 91,
          "content": "value={formData.structureCodePostal || ''}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 95,
          "content": "isInvalid={!!errors.structureCodePostal}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 98,
          "content": "{errors.structureCodePostal}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 110,
          "content": "name=\"structureVille\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 111,
          "content": "value={formData.structureVille || ''}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 114,
          "content": "isInvalid={!!errors.structureVille}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 117,
          "content": "{errors.structureVille}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 129,
          "content": "name=\"structureDepartement\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 130,
          "content": "value={formData.structureDepartement || ''}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 133,
          "content": "isInvalid={!!errors.structureDepartement}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 136,
          "content": "{errors.structureDepartement}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 152,
          "content": "name=\"structureRegion\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 153,
          "content": "value={formData.structureRegion || ''}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 156,
          "content": "isInvalid={!!errors.structureRegion}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 159,
          "content": "{errors.structureRegion}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 171,
          "content": "name=\"structurePays\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 172,
          "content": "value={formData.structurePays || 'France'}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 175,
          "content": "isInvalid={!!errors.structurePays}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 178,
          "content": "{errors.structurePays}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 192,
          "content": "name=\"structureSiteWeb\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 193,
          "content": "value={formData.structureSiteWeb || ''}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 196,
          "content": "isInvalid={!!errors.structureSiteWeb}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 199,
          "content": "{errors.structureSiteWeb}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 213,
          "content": "name=\"structureTelephone1\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 214,
          "content": "value={formData.structureTelephone1 || ''}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 217,
          "content": "isInvalid={!!errors.structureTelephone1}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 220,
          "content": "{errors.structureTelephone1}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 232,
          "content": "name=\"structureTelephone2\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 233,
          "content": "value={formData.structureTelephone2 || ''}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 236,
          "content": "isInvalid={!!errors.structureTelephone2}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 239,
          "content": "{errors.structureTelephone2}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 251,
          "content": "name=\"structureMobile\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 252,
          "content": "value={formData.structureMobile || ''}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 255,
          "content": "isInvalid={!!errors.structureMobile}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 258,
          "content": "{errors.structureMobile}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 274,
          "content": "name=\"structureFax\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 275,
          "content": "value={formData.structureFax || ''}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 278,
          "content": "isInvalid={!!errors.structureFax}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 281,
          "content": "{errors.structureFax}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 293,
          "content": "name=\"structureEmail\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 294,
          "content": "value={formData.structureEmail || ''}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 297,
          "content": "isInvalid={!!errors.structureEmail}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 300,
          "content": "{errors.structureEmail}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 317,
          "content": "name=\"structureCommentaires1\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 318,
          "content": "value={formData.structureCommentaires1 || ''}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 321,
          "content": "isInvalid={!!errors.structureCommentaires1}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 324,
          "content": "{errors.structureCommentaires1}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 337,
          "content": "name=\"structureCommentaires2\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 338,
          "content": "value={formData.structureCommentaires2 || ''}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 341,
          "content": "isInvalid={!!errors.structureCommentaires2}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 344,
          "content": "{errors.structureCommentaires2}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 360,
          "content": "name=\"structureCommentaires3\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 361,
          "content": "value={formData.structureCommentaires3 || ''}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 364,
          "content": "isInvalid={!!errors.structureCommentaires3}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 367,
          "content": "{errors.structureCommentaires3}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 380,
          "content": "name=\"structureCommentaires4\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 381,
          "content": "value={formData.structureCommentaires4 || ''}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 384,
          "content": "isInvalid={!!errors.structureCommentaires4}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 387,
          "content": "{errors.structureCommentaires4}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 403,
          "content": "name=\"structureCommentaires5\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 404,
          "content": "value={formData.structureCommentaires5 || ''}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 407,
          "content": "isInvalid={!!errors.structureCommentaires5}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 410,
          "content": "{errors.structureCommentaires5}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 423,
          "content": "name=\"structureCommentaires6\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 424,
          "content": "value={formData.structureCommentaires6 || ''}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 427,
          "content": "isInvalid={!!errors.structureCommentaires6}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 430,
          "content": "{errors.structureCommentaires6}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 437,
          "content": "<div className={styles.structureInfo}>",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 441,
          "content": "<strong>Informations de structure</strong>",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 443,
          "content": "Cette section contient toutes les informations détaillées de la structure :",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 460,
          "content": "title=\"Structure\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/ContactStructureSection.js",
          "line": 470,
          "content": "export default ContactStructureSection;",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 2,
          "content": "import styles from './StructureSearchSection.module.css';",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 8,
          "content": "* StructureSearchSection - Section de recherche et sélection de structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 12,
          "content": "* @param {string} props.structureSearchTerm - Terme de recherche pour la structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 14,
          "content": "* @param {Array} props.structureResults - Résultats de la recherche de structures",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 16,
          "content": "* @param {Function} props.setShowStructureResults - Fonction pour contrôler l'affichage des résultats",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 18,
          "content": "* @param {Object} props.structureDropdownRef - Référence pour gérer le clic en dehors du dropdown",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 19,
          "content": "* @param {Object} props.selectedStructure - Structure sélectionnée",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 20,
          "content": "* @param {Function} props.handleSelectStructure - Fonction pour sélectionner une structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 22,
          "content": "* @param {Function} props.handleCreateStructure - Fonction pour créer une nouvelle structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 24,
          "content": "const StructureSearchSection = ({",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 26,
          "content": "setStructureSearchTerm,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 28,
          "content": "showStructureResults,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 30,
          "content": "isSearchingStructures,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 32,
          "content": "selectedStructure,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 34,
          "content": "handleRemoveStructure,",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 37,
          "content": "const [showAddStructure, setShowAddStructure] = React.useState(true);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 39,
          "content": "// Synchroniser l'état d'affichage avec la structure sélectionnée",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 41,
          "content": "if (selectedStructure && selectedStructure.id) {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 44,
          "content": "setShowAddStructure(true);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 46,
          "content": "}, [selectedStructure]);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 48,
          "content": "// Fonction pour ajouter une structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 49,
          "content": "const handleAddStructure = React.useCallback((structure) => {",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 51,
          "content": "handleSelectStructure(structure);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 53,
          "content": "setShowAddStructure(false);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 55,
          "content": "}, [handleSelectStructure, setStructureSearchTerm]);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 57,
          "content": "// Fonction pour retirer la structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 59,
          "content": "handleRemoveStructure();",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 61,
          "content": "}, [handleRemoveStructure]);",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 65,
          "content": "title=\"Structure\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 68,
          "content": "hasDropdown={showAddStructure}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 70,
          "content": "headerClassName=\"structure\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 72,
          "content": "<div className={styles.cardBody} ref={structureDropdownRef}>",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 74,
          "content": "{selectedStructure && selectedStructure.id && (",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 77,
          "content": "Structure sélectionnée",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 79,
          "content": "<div className={styles.structureItem}>",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 81,
          "content": "entity={selectedStructure}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 83,
          "content": "onRemove={handleRemoveStructureLocal}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 110,
          "content": "{showAddStructure && (",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 113,
          "content": "{selectedStructure ? 'Changer de structure' : 'Ajouter une structure'}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 117,
          "content": "searchTerm={structureSearchTerm}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 119,
          "content": "results={structureResults}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 121,
          "content": "setShowResults={setShowStructureResults}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 123,
          "content": "placeholder=\"Rechercher une structure par nom...\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 125,
          "content": "onCreateNew={handleCreateStructure}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 133,
          "content": "createNewText=\"Créer une nouvelle structure\"",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 138,
          "content": "{/* Bouton pour changer de structure si une est déjà sélectionnée */}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 139,
          "content": "{selectedStructure && selectedStructure.id && !showAddStructure && (",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 143,
          "content": "onClick={() => setShowAddStructure(true)}",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 146,
          "content": "Changer de structure",
          "module": "contacts"
        },
        {
          "file": "src/components/contacts/sections/StructureSearchSection.js",
          "line": 154,
          "content": "export default StructureSearchSection;",
          "module": "contacts"
        },
        {
          "file": "src/components/contrats/ContratTemplateEditorSimple.js",
          "line": 201,
          "content": "{ category: 'Contact', label: 'Structure du contact', value: '{contact_structure}' },",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/ContratTemplateEditorSimple.js",
          "line": 213,
          "content": "{ category: 'Contact (Compat.)', label: 'Structure du contact', value: '{programmateur_structure}' },",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/ContratTemplateEditorSimple.js",
          "line": 222,
          "content": "// Variables Structure",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/ContratTemplateEditorSimple.js",
          "line": 223,
          "content": "{ category: 'Structure', label: 'Nom de la structure', value: '{structure_nom}' },",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/ContratTemplateEditorSimple.js",
          "line": 224,
          "content": "{ category: 'Structure', label: 'SIRET de la structure', value: '{structure_siret}' },",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/ContratTemplateEditorSimple.js",
          "line": 226,
          "content": "{ category: 'Structure', label: 'Code postal de la structure', value: '{structure_code_postal}' },",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/ContratTemplateEditorSimple.js",
          "line": 227,
          "content": "{ category: 'Structure', label: 'Ville de la structure', value: '{structure_ville}' },",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/ContratTemplateEditorSimple.js",
          "line": 228,
          "content": "{ category: 'Structure', label: 'Email de la structure', value: '{structure_email}' },",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/ContratTemplateEditorSimple.js",
          "line": 230,
          "content": "{ category: 'Structure', label: 'Type de structure', value: '{structure_type}' },",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/ContratTemplateEditorSimple.js",
          "line": 237,
          "content": "{ category: 'Artiste', label: 'Structure de l\\'artiste', value: '{artiste_structure_nom}' },",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/ContratTemplateEditorSimple.js",
          "line": 238,
          "content": "{ category: 'Artiste', label: 'SIRET structure artiste', value: '{artiste_structure_siret}' },",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/ContratTemplateEditorSimple.js",
          "line": 540,
          "content": "{['Entreprise', 'Programmateur', 'Structure', 'Artiste', 'Concert', 'Lieu', 'Financier', 'Dates', 'Signature', 'Spécial'].map(category => (",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 17,
          "content": "structure",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 108,
          "content": "if (structure) {",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 113,
          "content": "raisonSociale: structure.nom || structure.structureRaisonSociale || '',",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 147,
          "content": "}, [structure, concert, artiste, lieu]);",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 1319,
          "content": "<h6>Structure organisatrice</h6>",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/ContratGeneratorNew.js",
          "line": 1320,
          "content": "<p className=\"small mb-1\"><strong>Nom:</strong> {concert?.preContratStructureNom || 'Non défini'}</p>",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/hooks/useContratTemplatePreview.js",
          "line": 49,
          "content": ".replace(/{programmateur_structure}/g, 'Association Culturelle XYZ') // Rétrocompatibilité",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/hooks/useTemplateEditor.js",
          "line": 101,
          "content": "structure_nom: 'Salle de Concert Le Zénith',",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/hooks/useTemplateVariables.js",
          "line": 27,
          "content": "{ label: 'Structure du contact', value: 'programmateur_structure_nom' }, // Variable rétrocompatible",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/hooks/useTemplateVariables.js",
          "line": 29,
          "content": "{ label: 'Structure de l\\'artiste', value: 'artiste_structure_nom' },",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/hooks/useTemplateVariables.js",
          "line": 34,
          "content": "{ label: 'Nom de la structure', value: 'structure_nom' },",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/hooks/useTemplateVariables.js",
          "line": 36,
          "content": "{ label: 'Email', value: 'structure_email' },",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/hooks/useTemplateVariables.js",
          "line": 38,
          "content": "{ label: 'Site Web', value: 'structure_site_web' },",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/hooks/useTemplateVariables.js",
          "line": 40,
          "content": "{ label: 'Licence', value: 'structure_licence' }",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/hooks/useTemplateVariables.js",
          "line": 54,
          "content": "{ label: 'Contact - Structure', value: 'programmateur_structure_nom' },",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/hooks/useTemplateVariables.js",
          "line": 59,
          "content": "{ label: 'Artiste - Structure', value: 'artiste_structure_nom' },",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/hooks/useTemplateVariables.js",
          "line": 60,
          "content": "{ label: 'Artiste - SIRET', value: 'artiste_structure_siret' },",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/hooks/useTemplateVariables.js",
          "line": 74,
          "content": "{ label: 'Contact - Structure', value: 'programmateur_structure_nom' }, // Variable rétrocompatible",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/hooks/useTemplateVariables.js",
          "line": 78,
          "content": "{ label: 'Artiste - Structure', value: 'artiste_structure_nom' }",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/sections/ContratTemplateBodySection.js",
          "line": 80,
          "content": "<li>Structurez votre contrat en articles numérotés pour plus de clarté.</li>",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/desktop/sections/UserGuide.js",
          "line": 23,
          "content": "<h4>1. Structure du modèle</h4>",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/sections/ContratInfoCard.js",
          "line": 80,
          "content": "// Formatage du contact avec nom complet et structure",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/sections/ContratInfoCard.js",
          "line": 94,
          "content": "// Chercher la structure dans différents endroits possibles",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/sections/ContratInfoCard.js",
          "line": 95,
          "content": "const structure = programmateur.structureCache?.raisonSociale",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/sections/ContratInfoCard.js",
          "line": 97,
          "content": "|| programmateur.structure",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/sections/ContratInfoCard.js",
          "line": 100,
          "content": "console.log('[DEBUG ContratInfoCard] nomComplet:', nomComplet, 'structure:', structure);",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/sections/ContratInfoCard.js",
          "line": 102,
          "content": "if (structure) {",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/sections/ContratInfoCard.js",
          "line": 103,
          "content": "return `${nomComplet} (${structure})`;",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/sections/ContratPdfViewer.js",
          "line": 25,
          "content": "structureData: pdfData.structure,",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/sections/ContratsTableNew.js",
          "line": 227,
          "content": "// Nom officiel/raison sociale de la structure contractante",
          "module": "contrats"
        },
        {
          "file": "src/components/contrats/sections/ContratsTableNew.js",
          "line": 235,
          "content": "// NOTE: Correspond au nom officiel de la structure/contractant",
          "module": "contrats"
        },
        {
          "file": "src/components/dates/DatesTable.js",
          "line": 10,
          "content": "* Dérive un code collaborateur à partir du nom de structure",
          "module": "other"
        },
        {
          "file": "src/components/dates/DatesTable.js",
          "line": 12,
          "content": "const deriveCollaboratorCode = (structureName) => {",
          "module": "other"
        },
        {
          "file": "src/components/dates/DatesTable.js",
          "line": 22,
          "content": "if (knownCodes[structureName]) {",
          "module": "other"
        },
        {
          "file": "src/components/dates/DatesTable.js",
          "line": 27,
          "content": "return structureName",
          "module": "other"
        },
        {
          "file": "src/components/dates/DatesTable.js",
          "line": 78,
          "content": "entreprise: concert.structureNom || '-',",
          "module": "other"
        },
        {
          "file": "src/components/dates/DatesTable.js",
          "line": 91,
          "content": "coll: deriveCollaboratorCode(concert.structureNom),",
          "module": "other"
        },
        {
          "file": "src/components/debug/BrevoDiagnostic.js",
          "line": 357,
          "content": "addDebugLog('info', 'Structure email envoyée à Brevo:', {",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 7,
          "content": "* Composant de débogage pour vérifier l'état de migration des structures",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 9,
          "content": "function CheckStructureMigration() {",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 10,
          "content": "const [structureId, setStructureId] = useState('structure_1750614430892_trixam2ig');",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 27,
          "content": "structureId,",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 32,
          "content": "inStructures: false,",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 38,
          "content": "console.log(`🔍 Vérification de la structure: ${structureId}`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 43,
          "content": "const unifiedDoc = await getDoc(doc(db, 'contacts_unified', structureId));",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 50,
          "content": "nom: data.structure?.raisonSociale || data.structureRaisonSociale,",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 63,
          "content": "// 2. Vérifier dans structures (nouveau modèle)",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 64,
          "content": "console.log('📋 Vérification dans structures...');",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 66,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', structureId));",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 68,
          "content": "const data = structureDoc.data();",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 70,
          "content": "migrationReport.structureData = {",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 79,
          "content": "console.log('✅ Trouvé dans structures:', migrationReport.structureData);",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 81,
          "content": "console.log('❌ Non trouvé dans structures');",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 84,
          "content": "console.error('Erreur lors de la vérification dans structures:', error);",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 92,
          "content": "where('structureId', '==', structureId),",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 130,
          "content": "if (migrationReport.inStructures && !migrationReport.inContactsUnified) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 132,
          "content": "migrationReport.recommendations.push('✅ Structure complètement migrée vers le nouveau modèle');",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 135,
          "content": "migrationReport.recommendations.push('⚠️ Structure existe dans les deux collections');",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 137,
          "content": "} else if (!migrationReport.inStructures && migrationReport.inContactsUnified) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 139,
          "content": "migrationReport.recommendations.push('❌ Structure non migrée vers le nouveau modèle');",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 140,
          "content": "migrationReport.recommendations.push('Action: Migrer vers la collection structures');",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 142,
          "content": "migrationReport.recommendations.push('⚠️ ATTENTION: Des liaisons existent pour une structure non migrée!');",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 146,
          "content": "migrationReport.recommendations.push('❌ Structure introuvable dans toutes les collections');",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 165,
          "content": "const checkAllStructures = async () => {",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 184,
          "content": "console.log('🔍 Recherche de toutes les structures...');",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 186,
          "content": "// 1. Récupérer toutes les structures de contacts_unified de type structure",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 190,
          "content": "where('entityType', '==', 'structure')",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 193,
          "content": "console.log(`📋 ${unifiedSnapshot.size} structures trouvées dans contacts_unified`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 195,
          "content": "// 2. Récupérer toutes les structures du nouveau modèle",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 197,
          "content": "collection(db, 'structures'),",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 200,
          "content": "const structuresSnapshot = await getDocs(structuresQuery);",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 201,
          "content": "console.log(`📋 ${structuresSnapshot.size} structures trouvées dans structures`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 203,
          "content": "// 3. Analyser chaque structure de contacts_unified",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 205,
          "content": "const structureId = unifiedDoc.id;",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 210,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', structureId));",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 215,
          "content": "where('structureId', '==', structureId),",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 220,
          "content": "const structureInfo = {",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 222,
          "content": "nom: unifiedData.structure?.raisonSociale || unifiedData.structureRaisonSociale || 'Sans nom',",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 224,
          "content": "inStructures: structureDoc.exists(),",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 229,
          "content": "if (structureDoc.exists() && unifiedDoc.exists()) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 230,
          "content": "results.duplicated.push(structureInfo);",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 232,
          "content": "results.notMigrated.push(structureInfo);",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 235,
          "content": "...structureInfo,",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 242,
          "content": "// 4. Vérifier les structures qui existent seulement dans le nouveau modèle",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 244,
          "content": "const structureId = structureDoc.id;",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 245,
          "content": "const structureData = structureDoc.data();",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 248,
          "content": "const unifiedDoc = await getDoc(doc(db, 'contacts_unified', structureId));",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 251,
          "content": "id: structureId,",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 254,
          "content": "inStructures: true",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 273,
          "content": "<h2>🔍 Vérification de l'état de migration des structures</h2>",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 285,
          "content": "Vérifier une structure spécifique",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 295,
          "content": "Analyser toutes les structures de l'organisation",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 303,
          "content": "value={structureId}",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 304,
          "content": "onChange={(e) => setStructureId(e.target.value)}",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 316,
          "content": "disabled={loading || !structureId}",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 334,
          "content": "onClick={checkAllStructures}",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 345,
          "content": "{loading ? 'Analyse en cours...' : 'Analyser toutes les structures'}",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 432,
          "content": "<p style={{ margin: 0, color: '#6c757d' }}>Structures analysées</p>",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 450,
          "content": "<h4 style={{ color: '#721c24' }}>⚠️ Structures avec liaisons orphelines ({bulkReport.withOrphanLiaisons.length})</h4>",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 453,
          "content": "{bulkReport.withOrphanLiaisons.map((structure, idx) => (",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 467,
          "content": "<h4>Structures non migrées ({bulkReport.notMigrated.length})</h4>",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 488,
          "content": "{bulkReport.notMigrated.map((structure, idx) => (",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 502,
          "content": "<h4>Structures dupliquées ({bulkReport.duplicated.length})</h4>",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 504,
          "content": "{bulkReport.duplicated.map((structure, idx) => (",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 516,
          "content": "<h4>✅ Structures correctement migrées ({bulkReport.migrated.length})</h4>",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 518,
          "content": "{bulkReport.migrated.map((structure, idx) => (",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 534,
          "content": "<li>Migrer les {bulkReport.notMigrated.length} structures non migrées vers le nouveau modèle</li>",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 537,
          "content": "<li>⚠️ Corriger en priorité les {bulkReport.withOrphanLiaisons.length} structures avec liaisons orphelines</li>",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 540,
          "content": "<li>Nettoyer les {bulkReport.duplicated.length} structures dupliquées en supprimant de contacts_unified</li>",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 599,
          "content": "<h4>Collection structures</h4>",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 603,
          "content": "{report.structureData && (",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 605,
          "content": "<p><strong>Raison sociale:</strong> {report.structureData.raisonSociale}</p>",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 607,
          "content": "<p><strong>Email:</strong> {report.structureData.email}</p>",
          "module": "other"
        },
        {
          "file": "src/components/debug/CheckStructureMigration.js",
          "line": 655,
          "content": "export default CheckStructureMigration;",
          "module": "other"
        },
        {
          "file": "src/components/debug/ConcertContactsDebug.js",
          "line": 21,
          "content": "const analyzeContactStructure = async () => {",
          "module": "other"
        },
        {
          "file": "src/components/debug/ConcertContactsDebug.js",
          "line": 78,
          "content": "analyzeContactStructure();",
          "module": "other"
        },
        {
          "file": "src/components/debug/ConcertContactsDebug.js",
          "line": 83,
          "content": "<h2>Analyse de la structure des contacts dans les concerts</h2>",
          "module": "other"
        },
        {
          "file": "src/components/debug/ConcertContactsDebug.js",
          "line": 153,
          "content": "<h4>Structure actuelle:</h4>",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 18,
          "content": "structures: []",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 35,
          "content": "for (const entityType of ['contacts', 'lieux', 'concerts', 'structures']) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 42,
          "content": "setTestEntities({ contacts: [], lieux: [], concerts: [], structures: [] });",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 60,
          "content": "structureId: '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 149,
          "content": "// Test 3: Associer un contact existant à une structure",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 151,
          "content": "addTestResult('Test Contact via Structure', 'running', 'Test d\\'association en cours...');",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 156,
          "content": "nom: `Contact Test Structure ${Date.now()}`,",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 157,
          "content": "nomLowercase: `contact test structure ${Date.now()}`.toLowerCase(),",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 162,
          "content": "structureId: '', // Sera mis à jour après",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 164,
          "content": "structureRaisonSociale: '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 174,
          "content": "// Créer une structure avec ce contact",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 176,
          "content": "nom: `Structure Test ${Date.now()}`,",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 177,
          "content": "nomLowercase: `structure test ${Date.now()}`.toLowerCase(),",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 179,
          "content": "raisonSociale: 'SARL Structure Test',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 185,
          "content": "email: 'structure@test.com',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 191,
          "content": "const { id: structureId } = await createEntity('structures', structureData);",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 194,
          "content": "await updateBidirectionalRelation('structure', structureId, 'contact', contactId);",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 196,
          "content": "addTestResult('Test Contact via Structure', 'success',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 197,
          "content": "`Contact créé (${contactId}) et associé à la structure (${structureId})`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 200,
          "content": "await verifyBidirectionalRelation(structureId, contactId, 'structure-contact');",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 203,
          "content": "addTestResult('Note Structure', 'info',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 207,
          "content": "addTestResult('Test Contact via Structure', 'error', error.message);",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 225,
          "content": "structureId: '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 258,
          "content": "// Créer une structure",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 260,
          "content": "nom: `Structure Partagée ${Date.now()}`,",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 261,
          "content": "nomLowercase: `structure partagée ${Date.now()}`.toLowerCase(),",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 263,
          "content": "raisonSociale: 'EURL Structure Partagée',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 269,
          "content": "const { id: structureId } = await createEntity('structures', structureData);",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 274,
          "content": "await updateBidirectionalRelation('structure', structureId, 'contact', contactId);",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 277,
          "content": "`Contact (${contactId}) associé au lieu (${lieuId}), concert (${concertId}) ET structure (${structureId})`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 285,
          "content": "contactFinal.structureId === structureId) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 287,
          "content": "'Le contact contient bien les références au lieu, concert ET structure');",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 320,
          "content": "`${data.nom} - Lieux: ${data.lieuxIds?.length || 0}, Concerts: ${data.concertsIds?.length || 0}, Structure: ${data.structureNom || 'Aucune'}`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 384,
          "content": "if (sourceType === 'structure' && targetType === 'contact') {",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 385,
          "content": "// Mise à jour du contact pour ajouter la structure",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 387,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', sourceId));",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 388,
          "content": "const structureData = structureDoc.data();",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 392,
          "content": "structureId: sourceId,",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 393,
          "content": "structureNom: structureData.nom || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 394,
          "content": "structureRaisonSociale: structureData.raisonSociale || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 435,
          "content": "if (relationType === 'structure-contact') {",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 436,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', entityId));",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 439,
          "content": "if (structureData.contactIds?.includes(contactId) && contactData.structureId === entityId) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 441,
          "content": "'Relations structure ↔ contact correctement établies');",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 444,
          "content": "'Relations structure ↔ contact incomplètes');",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 469,
          "content": "await testContactFromStructure();",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactCreationTester.js",
          "line": 556,
          "content": "<strong>Structures:</strong> {testEntities.structures.map(s => s.nom).join(', ')}",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactEmailDebug.js",
          "line": 91,
          "content": "<h4>Structure complète des données:</h4>",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationDiagnostic.js",
          "line": 43,
          "content": "const oldLogic = contactData.hasOwnProperty('structureRaisonSociale') ||",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationDiagnostic.js",
          "line": 54,
          "content": "structureRaisonSociale: !!contactData.structureRaisonSociale,",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationDiagnostic.js",
          "line": 55,
          "content": "structureAdresse: !!contactData.structureAdresse,",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationDiagnostic.js",
          "line": 68,
          "content": ": contactData.structureRaisonSociale || contactData.structureNom || 'Contact sans nom',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationDiagnostic.js",
          "line": 79,
          "content": "structureRaisonSociale: contactData.structureRaisonSociale,",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationDiagnostic.js",
          "line": 80,
          "content": "structureNom: contactData.structureNom,",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 78,
          "content": "structure: !!(data.structureRaisonSociale || data.structureAdresse || data.structureEmail),",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 107,
          "content": "addLog(`⏭️ Contact complètement migré: ${contactData.prenom || 'Structure'} ${contactData.nom || contactData.structureNom || contactId}`, 'info');",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 112,
          "content": "addLog(`🔄 Contact partiellement migré (sera re-migré): ${contactData.prenom || 'Structure'} ${contactData.nom || contactData.structureNom || contactId}`, 'warning');",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 120,
          "content": "const hasStructureData = contactData.structureNom?.trim() || contactData.structureRaisonSociale?.trim();",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 123,
          "content": "if (hasStructureData && hasPersonneData) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 124,
          "content": "contactType = 'structure+personne';",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 125,
          "content": "addLog(`🏢👤 Contact mixte détecté: Structure \"${contactData.structureNom}\" + Personne \"${contactData.prenom} ${contactData.nom}\"`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 127,
          "content": "contactType = 'structure';",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 128,
          "content": "addLog(`🏢 Structure pure détectée: \"${contactData.structureNom}\"`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 137,
          "content": "// Construire les métadonnées structure depuis les données existantes",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 139,
          "content": "raisonSociale: contactData.structureNom || contactData.structureRaisonSociale || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 141,
          "content": "codePostal: contactData.structureCodePostal || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 143,
          "content": "departement: contactData.structureDepartement || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 145,
          "content": "pays: contactData.structurePays || 'France',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 147,
          "content": "telephone1: contactData.structureTelephone1 || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 149,
          "content": "mobile: contactData.structureMobile || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 151,
          "content": "email: contactData.structureEmail || ''",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 206,
          "content": "// Section 1: Structure (17 champs)",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 207,
          "content": "structureRaisonSociale: structureData.raisonSociale,",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 209,
          "content": "structureSuiteAdresse1: contactData.structureSuiteAdresse1 || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 210,
          "content": "structureCodePostal: structureData.codePostal,",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 212,
          "content": "structureDepartement: structureData.departement,",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 213,
          "content": "structureRegion: structureData.region,",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 215,
          "content": "structureSiteWeb: structureData.siteWeb,",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 216,
          "content": "structureTelephone1: structureData.telephone1,",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 218,
          "content": "structureMobile: structureData.mobile,",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 219,
          "content": "structureFax: structureData.fax,",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 221,
          "content": "structureCommentaires1: contactData.structureCommentaires1 || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 222,
          "content": "structureCommentaires2: contactData.structureCommentaires2 || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 224,
          "content": "structureCommentaires4: contactData.structureCommentaires4 || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 225,
          "content": "structureCommentaires5: contactData.structureCommentaires5 || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 310,
          "content": "structureName: hasStructureData ? structureData.raisonSociale : 'Structure non définie',",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 316,
          "content": "structure: hasStructureData,",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 326,
          "content": "const migrationSummary = hasPersonneData && hasStructureData",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 330,
          "content": ": structureData.raisonSociale;",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 353,
          "content": "Cet outil migre automatiquement les contacts avec structureId vers le format unifié",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 420,
          "content": "{migration.contactType === 'structure+personne' ? '🏢👤' :",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 422,
          "content": "{migration.contactType === 'structure+personne'",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 423,
          "content": "? `${migration.contactName} + ${migration.structureName}`",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 425,
          "content": "? migration.structureName",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 460,
          "content": "<li><strong>Analyse TOUS les contacts</strong> (structures, personnes, mixtes)</li>",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 461,
          "content": "<li><strong>Détecte le type</strong> selon les nouvelles règles (structure + personne)</li>",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 470,
          "content": "🏢 <strong>Structure pure</strong> : Seulement structureNom rempli<br/>",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactMigrationTool.js",
          "line": 472,
          "content": "🏢👤 <strong>Structure + Personne</strong> : Les deux remplis = 2 fiches distinctes",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactsMigrationDiagnostic.js",
          "line": 7,
          "content": "import styles from './DataStructureFixer.module.css';",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactsMigrationDiagnostic.js",
          "line": 51,
          "content": "structures: {",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactsMigrationDiagnostic.js",
          "line": 133,
          "content": "// 3. Analyser les STRUCTURES",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactsMigrationDiagnostic.js",
          "line": 134,
          "content": "console.log('🏢 Analyse des structures...');",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactsMigrationDiagnostic.js",
          "line": 135,
          "content": "const structuresSnapshot = await getDocs(collection(db, 'structures'));",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactsMigrationDiagnostic.js",
          "line": 137,
          "content": "for (const docSnap of structuresSnapshot.docs) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactsMigrationDiagnostic.js",
          "line": 142,
          "content": "results.structures.total++;",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactsMigrationDiagnostic.js",
          "line": 145,
          "content": "results.structures.avecContactsIds++;",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactsMigrationDiagnostic.js",
          "line": 148,
          "content": "results.structures.avecContactIds++;",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactsMigrationDiagnostic.js",
          "line": 196,
          "content": "if (results.structures.avecContactsIds > 0) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactsMigrationDiagnostic.js",
          "line": 199,
          "content": "message: `${results.structures.avecContactsIds} structures utilisent 'contactsIds' au lieu de 'contactIds'`,",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactsMigrationDiagnostic.js",
          "line": 296,
          "content": "'- Modifier la structure des données\\n' +",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactsMigrationDiagnostic.js",
          "line": 603,
          "content": "<h3>🏢 Structures ({diagnosticResults.structures.total} total)</h3>",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactsMigrationDiagnostic.js",
          "line": 608,
          "content": "<td className={styles.number}>{diagnosticResults.structures.avecContactsIds}</td>",
          "module": "other"
        },
        {
          "file": "src/components/debug/ContactsMigrationDiagnostic.js",
          "line": 612,
          "content": "<td className={styles.number}>{diagnosticResults.structures.avecContactIds}</td>",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 8,
          "content": "import styles from './DataStructureFixer.module.css';",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 10,
          "content": "const DataStructureFixer = () => {",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 18,
          "content": "// Scanner les collections pour trouver les structures imbriquées",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 25,
          "content": "const collections = ['contacts', 'lieux', 'artistes', 'structures'];",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 42,
          "content": "// Vérifier les structures imbriquées",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 47,
          "content": "(collName === 'structures' && data.structure && typeof data.structure === 'object')",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 79,
          "content": "// Corriger les structures imbriquées",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 111,
          "content": "structureId: data.structureId || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 112,
          "content": "structureNom: data.structureNom || data.structure?.raisonSociale || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 123,
          "content": "structure: deleteField()",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 166,
          "content": "} else if (collName === 'structures' && data.structure) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 184,
          "content": "structure: deleteField()",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 214,
          "content": "// Corriger les adresses imbriquées dans les structures",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 222,
          "content": "const structuresIssues = results.structures;",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 223,
          "content": "if (!structuresIssues || structuresIssues.nestedAddress.length === 0) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 231,
          "content": "for (const item of structuresIssues.nestedAddress) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 233,
          "content": "const docRef = doc(db, 'structures', item.id);",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 330,
          "content": "Cet outil permet de détecter et corriger les problèmes de structure de données",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 378,
          "content": "<span className={styles.statLabel}>Structures imbriquées:</span>",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 387,
          "content": "{collName === 'structures' && issues.nestedAddress && (",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 397,
          "content": "<h6>Documents avec structure imbriquée:</h6>",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 411,
          "content": "{collName === 'structures' && issues.nestedAddress?.length > 0 && (",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 413,
          "content": "<h6>Structures avec adresse imbriquée:</h6>",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 438,
          "content": "await fixNestedStructures();",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 466,
          "content": "onClick={fixNestedStructures}",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 470,
          "content": "Structures imbriquées seulement",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 486,
          "content": "{results.structures?.nestedAddress?.length > 0 && (",
          "module": "other"
        },
        {
          "file": "src/components/debug/DataStructureFixer.js",
          "line": 527,
          "content": "export default DataStructureFixer;",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 17,
          "content": "structures: true",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 23,
          "content": "structures: []",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 40,
          "content": "for (const entityType of ['contacts', 'lieux', 'concerts', 'structures']) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 48,
          "content": "setTestEntities({ contacts: [], lieux: [], concerts: [], structures: [] });",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 67,
          "content": "structureId: '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 239,
          "content": "// ============== TESTS DE CRÉATION DE STRUCTURES ==============",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 241,
          "content": "// Test 5: Créer une structure depuis un contact",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 243,
          "content": "addTestResult('Structure via Contact', 'running', 'Test création structure depuis formulaire contact...');",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 246,
          "content": "// Simuler la création d'une structure via ContactStructureSection",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 248,
          "content": "nom: `Structure Test Contact ${Date.now()}`,",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 249,
          "content": "nomLowercase: `structure test contact ${Date.now()}`.toLowerCase(),",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 253,
          "content": "adresse: '321 Rue Structure',",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 263,
          "content": "const { id: structureId } = await createEntity('structures', structureData);",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 266,
          "content": "nom: `Contact avec Structure ${Date.now()}`,",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 267,
          "content": "nomLowercase: `contact avec structure ${Date.now()}`.toLowerCase(),",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 269,
          "content": "email: 'contact.structure@test.com',",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 271,
          "content": "structureNom: structureData.nom,",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 272,
          "content": "structureRaisonSociale: structureData.raisonSociale,",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 282,
          "content": "// Mettre à jour la structure pour ajouter le contact",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 283,
          "content": "await updateDoc(doc(db, 'structures', structureId), {",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 288,
          "content": "addTestResult('Structure via Contact', 'success',",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 289,
          "content": "`✅ Structure créée (${structureId}) et associée au contact (${contactId})`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 291,
          "content": "addTestResult('Note Structure', 'info',",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 295,
          "content": "addTestResult('Structure via Contact', 'error', error.message);",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 299,
          "content": "// Test 6: Test complexe - Contact avec Lieu ET Structure",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 304,
          "content": "// Créer une structure",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 306,
          "content": "nom: `Structure Complexe ${Date.now()}`,",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 307,
          "content": "nomLowercase: `structure complexe ${Date.now()}`.toLowerCase(),",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 315,
          "content": "const { id: structureId } = await createEntity('structures', structureData);",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 337,
          "content": "structureId: structureId,",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 338,
          "content": "structureNom: structureData.nom,",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 339,
          "content": "structureRaisonSociale: structureData.raisonSociale,",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 355,
          "content": "structureId: structureId,",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 364,
          "content": "await updateDoc(doc(db, 'structures', structureId), {",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 379,
          "content": "`✅ Création complexe réussie: Concert (${concertId}) + Contact (${contactId}) + Lieu (${lieuId}) + Structure (${structureId})`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 534,
          "content": "if (selectedTests.structures) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 556,
          "content": "Test complet de création de contacts, lieux et structures depuis différents formulaires",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 585,
          "content": "checked={selectedTests.structures}",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 586,
          "content": "onChange={(e) => setSelectedTests(prev => ({ ...prev, structures: e.target.checked }))}",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 589,
          "content": "{' '}Tests Structures",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 597,
          "content": "disabled={isRunning || (!selectedTests.contacts && !selectedTests.lieux && !selectedTests.structures)}",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 641,
          "content": "testEntities.concerts.length > 0 || testEntities.structures.length > 0) && (",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 660,
          "content": "{testEntities.structures.length > 0 && (",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 662,
          "content": "<strong>Structures:</strong> {testEntities.structures.map(s => s.raisonSociale || s.nom).join(', ')}",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityCreationTester.js",
          "line": 674,
          "content": "<li><strong>Tests Structures :</strong> Création de structures depuis contacts (API SIRENE ou manuel)</li>",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntityRelationsDebugger.js",
          "line": 282,
          "content": "<option value=\"structures\">Structures</option>",
          "module": "other"
        },
        {
          "file": "src/components/debug/FestitestContactFinder.js",
          "line": 32,
          "content": "structures: [],",
          "module": "other"
        },
        {
          "file": "src/components/debug/FestitestContactFinder.js",
          "line": 41,
          "content": "const collections = ['contacts', 'structures', 'concerts', 'lieux', 'contrats', 'factures', 'artistes'];",
          "module": "other"
        },
        {
          "file": "src/components/debug/FestitestContactFinder.js",
          "line": 110,
          "content": "// Rechercher aussi \"meltin recordz\" dans les structures",
          "module": "other"
        },
        {
          "file": "src/components/debug/FestitestContactFinder.js",
          "line": 121,
          "content": "console.log(`✅ ${meltinSnapshot.size} structure(s) \"meltin\" trouvée(s)`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/FestitestContactFinder.js",
          "line": 125,
          "content": "allData.structures.push({",
          "module": "other"
        },
        {
          "file": "src/components/debug/FestitestContactFinder.js",
          "line": 150,
          "content": "meltinStructure: allData.structures.find(s =>",
          "module": "other"
        },
        {
          "file": "src/components/debug/FestitestContactFinder.js",
          "line": 155,
          "content": "allStructures: allData.structures,",
          "module": "other"
        },
        {
          "file": "src/components/debug/FestitestContactFinder.js",
          "line": 195,
          "content": "'Structure ID': data.structureId || 'N/A',",
          "module": "other"
        },
        {
          "file": "src/components/debug/FestitestContactFinder.js",
          "line": 196,
          "content": "'Structure Nom': data.structureNom || 'N/A',",
          "module": "other"
        },
        {
          "file": "src/components/debug/FestitestContactFinder.js",
          "line": 214,
          "content": "Cet outil recherche le contact \"jean fons\" lié au concert festitest et la structure \"meltin recordz\"",
          "module": "other"
        },
        {
          "file": "src/components/debug/FestitestContactFinder.js",
          "line": 295,
          "content": "<strong>Structure des métadonnées:</strong> Les champs affichés ci-dessus montrent",
          "module": "other"
        },
        {
          "file": "src/components/debug/GenericDetailViewTest.js",
          "line": 23,
          "content": "structure: {",
          "module": "other"
        },
        {
          "file": "src/components/debug/GenericDetailViewTest.js",
          "line": 58,
          "content": "const demoStructure = {",
          "module": "other"
        },
        {
          "file": "src/components/debug/GenericDetailViewTest.js",
          "line": 98,
          "content": "className={selectedView === 'structure' ? styles.active : ''}",
          "module": "other"
        },
        {
          "file": "src/components/debug/GenericDetailViewTest.js",
          "line": 101,
          "content": "Structure avec GenericDetailView",
          "module": "other"
        },
        {
          "file": "src/components/debug/GenericDetailViewTest.js",
          "line": 150,
          "content": "<h3>Structure</h3>",
          "module": "other"
        },
        {
          "file": "src/components/debug/GenericDetailViewTest.js",
          "line": 152,
          "content": "entity={demoStructure}",
          "module": "other"
        },
        {
          "file": "src/components/debug/GenericDetailViewTest.js",
          "line": 154,
          "content": "onClick={() => alert('Clic sur structure')}",
          "module": "other"
        },
        {
          "file": "src/components/debug/GenericDetailViewTest.js",
          "line": 202,
          "content": "<h3><i className=\"bi bi-building\"></i> Structure associée</h3>",
          "module": "other"
        },
        {
          "file": "src/components/debug/GenericDetailViewTest.js",
          "line": 204,
          "content": "entity={demoContact.structure}",
          "module": "other"
        },
        {
          "file": "src/components/debug/GenericDetailViewTest.js",
          "line": 284,
          "content": "{selectedView === 'structure' && (",
          "module": "other"
        },
        {
          "file": "src/components/debug/GenericDetailViewTest.js",
          "line": 286,
          "content": "<h2>Vue Structure avec GenericDetailView</h2>",
          "module": "other"
        },
        {
          "file": "src/components/debug/GenericDetailViewTest.js",
          "line": 299,
          "content": "<h3><i className=\"bi bi-building\"></i> Informations de la structure</h3>",
          "module": "other"
        },
        {
          "file": "src/components/debug/GenericDetailViewTest.js",
          "line": 308,
          "content": "<h3><i className=\"bi bi-person\"></i> Contacts de la structure (3)</h3>",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 11,
          "content": "* Résout le problème des fallbacks multiples (contact.structure?.raisonSociale || contact.structureRaisonSociale)",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 99,
          "content": "// Vérifier les champs structure",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 101,
          "content": "'structureRaisonSociale', 'structureEmail', 'structureTelephone1',",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 102,
          "content": "'structureAdresse', 'structureVille', 'structureCodePostal'",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 108,
          "content": "const hasStructureRoot = structureRootFields.some(field => data[field]);",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 109,
          "content": "const hasStructureNested = data.structure && Object.keys(data.structure).length > 0;",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 114,
          "content": "if ((hasStructureRoot && hasStructureNested) || (hasPersonneRoot && hasPersonneNested)) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 119,
          "content": "if (hasStructureRoot || hasPersonneRoot) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 124,
          "content": "if (hasStructureNested || hasPersonneNested) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 135,
          "content": "// Conflits structure",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 136,
          "content": "if (data.structureRaisonSociale && data.structure?.raisonSociale) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 138,
          "content": "conflicts.push(`structureRaisonSociale: \"${data.structureRaisonSociale}\" ≠ structure.raisonSociale: \"${data.structure.raisonSociale}\"`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 141,
          "content": "if (data.structureEmail && data.structure?.email) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 143,
          "content": "conflicts.push(`structureEmail: \"${data.structureEmail}\" ≠ structure.email: \"${data.structure.email}\"`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 161,
          "content": "const structureFields = [",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 162,
          "content": "'structureRaisonSociale', 'structureEmail', 'structureTelephone1',",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 163,
          "content": "'structureAdresse', 'structureVille', 'structureCodePostal'",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 167,
          "content": "structureFields.forEach(field => {",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 179,
          "content": "if (data.structure?.raisonSociale || data.structureRaisonSociale) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 180,
          "content": "return data.structure?.raisonSociale || data.structureRaisonSociale;",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 249,
          "content": "// Normaliser les champs structure",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 250,
          "content": "if (data.structureRaisonSociale || data.structureEmail || data.structureAdresse) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 252,
          "content": "raisonSociale: data.structureRaisonSociale || data.structure?.raisonSociale || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 253,
          "content": "nom: data.structureNom || data.structure?.nom || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 255,
          "content": "telephone1: data.structureTelephone1 || data.structure?.telephone1 || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 256,
          "content": "telephone2: data.structureTelephone2 || data.structure?.telephone2 || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 258,
          "content": "fax: data.structureFax || data.structure?.fax || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 259,
          "content": "siteWeb: data.structureSiteWeb || data.structure?.siteWeb || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 261,
          "content": "type: data.structureType || data.structure?.type || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 262,
          "content": "adresse: data.structureAdresse || data.structure?.adresse || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 263,
          "content": "suiteAdresse: data.structureSuiteAdresse1 || data.structure?.suiteAdresse || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 265,
          "content": "ville: data.structureVille || data.structure?.ville || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 266,
          "content": "departement: data.structureDepartement || data.structure?.departement || '',",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 268,
          "content": "pays: data.structurePays || data.structure?.pays || 'France'",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 271,
          "content": "// Supprimer les anciens champs racine structure",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 273,
          "content": "delete normalized.structureNom;",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 275,
          "content": "delete normalized.structureTelephone1;",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 277,
          "content": "delete normalized.structureMobile;",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 279,
          "content": "delete normalized.structureSiteWeb;",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 281,
          "content": "delete normalized.structureType;",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 283,
          "content": "delete normalized.structureSuiteAdresse1;",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 285,
          "content": "delete normalized.structureVille;",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 287,
          "content": "delete normalized.structureRegion;",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 355,
          "content": "<strong>Objectif :</strong> Centraliser toutes les données dans les objets <code>structure</code> et <code>personne</code>",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 357,
          "content": "<strong>Avant :</strong> <code>contact.structure?.raisonSociale || contact.structureRaisonSociale</code>",
          "module": "other"
        },
        {
          "file": "src/components/debug/HybridFormatNormalizer.js",
          "line": 497,
          "content": "<li><strong>Maintenance facilitée</strong> : Structure claire et prévisible</li>",
          "module": "other"
        },
        {
          "file": "src/components/debug/ListDebugger.js",
          "line": 8,
          "content": "import styles from './DataStructureFixer.module.css';",
          "module": "other"
        },
        {
          "file": "src/components/debug/ListDebugger.js",
          "line": 23,
          "content": "const collections = ['contacts', 'lieux', 'concerts', 'structures'];",
          "module": "other"
        },
        {
          "file": "src/components/debug/ListDebugger.js",
          "line": 43,
          "content": "// 3. Analyser la structure des documents",
          "module": "other"
        },
        {
          "file": "src/components/debug/ListDebugger.js",
          "line": 57,
          "content": "// Vérifier structure imbriquée",
          "module": "other"
        },
        {
          "file": "src/components/debug/ListDebugger.js",
          "line": 60,
          "content": "structures.nested++;",
          "module": "other"
        },
        {
          "file": "src/components/debug/ListDebugger.js",
          "line": 63,
          "content": "if (structures.samples.length < 3) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/ListDebugger.js",
          "line": 73,
          "content": "structures.flat++;",
          "module": "other"
        },
        {
          "file": "src/components/debug/ListDebugger.js",
          "line": 78,
          "content": "structures.missingOrgId++;",
          "module": "other"
        },
        {
          "file": "src/components/debug/ListDebugger.js",
          "line": 80,
          "content": "structures.wrongOrgId++;",
          "module": "other"
        },
        {
          "file": "src/components/debug/ListDebugger.js",
          "line": 84,
          "content": "debugResults[collName] = structures;",
          "module": "other"
        },
        {
          "file": "src/components/debug/ListDebugger.js",
          "line": 221,
          "content": "<li>{data.nested} documents ont une structure imbriquée</li>",
          "module": "other"
        },
        {
          "file": "src/components/debug/ListDebugger.js",
          "line": 230,
          "content": "<strong>Solution :</strong> Utilisez l'outil \"Structure des données\" pour corriger",
          "module": "other"
        },
        {
          "file": "src/components/debug/ListDebugger.js",
          "line": 236,
          "content": "<summary>Voir des exemples de structures imbriquées</summary>",
          "module": "other"
        },
        {
          "file": "src/components/debug/ListDebugger.js",
          "line": 248,
          "content": "<strong>Structures imbriquées détectées !</strong>",
          "module": "other"
        },
        {
          "file": "src/components/debug/ListDebugger.js",
          "line": 249,
          "content": "<p>Certains documents ont une structure imbriquée qui empêche leur affichage.</p>",
          "module": "other"
        },
        {
          "file": "src/components/debug/ListDebugger.js",
          "line": 258,
          "content": "<p>→ Utilisez l'outil \"Structure des données\" pour les ajouter.</p>",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntrepriseIdDebug.js",
          "line": 27,
          "content": "const collections = ['contacts', 'lieux', 'concerts', 'structures'];",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntrepriseIdFixer.js",
          "line": 18,
          "content": "const collections = ['contacts', 'lieux', 'concerts', 'artistes', 'structures'];",
          "module": "other"
        },
        {
          "file": "src/components/debug/EntrepriseIdFixer.js",
          "line": 105,
          "content": "'structures',",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 8,
          "content": "import styles from './DataStructureFixer.module.css';",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 13,
          "content": "* - Crée les structures manquantes",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 14,
          "content": "* - Crée les liaisons entre structures et personnes",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 46,
          "content": "const [structuresSnap, personnesSnap, liaisonsSnap, unifiedSnap] = await Promise.all([",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 47,
          "content": "getDocs(query(collection(db, 'structures'), where('entrepriseId', '==', currentOrganization.id))),",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 76,
          "content": "// Analyser les structures manquantes",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 78,
          "content": "structuresSnap.forEach(doc => {",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 81,
          "content": "structuresExistantes.add(structure.siret);",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 85,
          "content": "const structuresACreer = [];",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 88,
          "content": "if (unified.entityType === 'structure' && unified.structure?.siret) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 90,
          "content": "structuresACreer.push({",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 104,
          "content": "liaisonsExistantes.add(`${liaison.structureId}-${liaison.personneId}`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 110,
          "content": "if (unified.entityType === 'structure' && unified.personnes?.length > 0) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 121,
          "content": "structures: {",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 122,
          "content": "total: structuresSnap.size,",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 124,
          "content": "details: structuresACreer",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 136,
          "content": "addLog(`✅ Analyse terminée: ${personnesACorreger.length} personnes à corriger, ${structuresACreer.length} structures à créer`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 158,
          "content": "structuresCreees: 0,",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 191,
          "content": "// 2. Créer les structures manquantes",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 194,
          "content": "if (!dryRun && analysis.structures.details.length > 0) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 198,
          "content": "for (const structureInfo of analysis.structures.details) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 199,
          "content": "const unifiedDoc = unifiedSnap.docs.find(doc => doc.id === structureInfo.id);",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 203,
          "content": "const structure = unified.structure;",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 205,
          "content": "const structureId = `structure_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 208,
          "content": "raisonSociale: structure.raisonSociale || structure.nom || 'Structure sans nom',",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 230,
          "content": "addLog(`- Création: ${structureData.raisonSociale} (SIRET: ${structure.siret})`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 232,
          "content": "await setDoc(doc(db, 'structures', structureId), structureData);",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 241,
          "content": "// Recharger toutes les données pour avoir les nouvelles structures",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 243,
          "content": "getDocs(query(collection(db, 'structures'), where('entrepriseId', '==', currentOrganization.id))),",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 249,
          "content": "const structuresBySiret = new Map();",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 251,
          "content": "const structure = doc.data();",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 253,
          "content": "structuresBySiret.set(structure.siret, { id: doc.id, ...structure });",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 275,
          "content": "if (unified.entityType === 'structure' && unified.structure?.siret && unified.personnes?.length > 0) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 277,
          "content": "if (!structureData) continue;",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 297,
          "content": "structureId: structureData.id,",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 309,
          "content": "addLog(`- Liaison: ${personneData.prenom} ${personneData.nom} ↔ ${structureData.raisonSociale}`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 330,
          "content": "addLog(`✅ Correction terminée: ${results.personnesCorrigees} personnes, ${results.structuresCreees} structures, ${results.liaisonsCreees} liaisons`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 346,
          "content": "<p>Corrige les données migrées : isPersonneLibre, structures manquantes, liaisons</p>",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 398,
          "content": "<div className={styles.statValue}>{analysis.structures.aCreer}</div>",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 425,
          "content": "{analysis.structures.details.length > 0 && (",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 427,
          "content": "<summary>Structures à créer ({analysis.structures.details.length})</summary>",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 429,
          "content": "{analysis.structures.details.slice(0, 10).map((s, i) => (",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 434,
          "content": "{analysis.structures.details.length > 10 && (",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 435,
          "content": "<li>... et {analysis.structures.details.length - 10} autres</li>",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 452,
          "content": "<span className={styles.resultLabel}>Structures créées:</span>",
          "module": "other"
        },
        {
          "file": "src/components/debug/RelationalMigrationFixer.js",
          "line": 453,
          "content": "<span className={styles.resultValue}>{results.structuresCreees}</span>",
          "module": "other"
        },
        {
          "file": "src/components/debug/SophieMadetMigration.js",
          "line": 28,
          "content": "structureId: \"85011847200016\",",
          "module": "other"
        },
        {
          "file": "src/components/debug/SophieMadetMigration.js",
          "line": 80,
          "content": "// Vérifier si Sophie existe dans les personnes d'une structure",
          "module": "other"
        },
        {
          "file": "src/components/debug/SophieMadetMigration.js",
          "line": 116,
          "content": "// 3. Vérifier si la structure associée existe dans contacts_unified",
          "module": "other"
        },
        {
          "file": "src/components/debug/SophieMadetMigration.js",
          "line": 117,
          "content": "addLog('🔍 Vérification de la structure associée...');",
          "module": "other"
        },
        {
          "file": "src/components/debug/SophieMadetMigration.js",
          "line": 119,
          "content": "let associatedStructure = null;",
          "module": "other"
        },
        {
          "file": "src/components/debug/SophieMadetMigration.js",
          "line": 121,
          "content": "// Chercher la structure dans contacts_unified",
          "module": "other"
        },
        {
          "file": "src/components/debug/SophieMadetMigration.js",
          "line": 125,
          "content": "where('entityType', '==', 'structure')",
          "module": "other"
        },
        {
          "file": "src/components/debug/SophieMadetMigration.js",
          "line": 128,
          "content": "const structureSnapshot = await getDocs(structureQuery);",
          "module": "other"
        },
        {
          "file": "src/components/debug/SophieMadetMigration.js",
          "line": 130,
          "content": "structureSnapshot.forEach(doc => {",
          "module": "other"
        },
        {
          "file": "src/components/debug/SophieMadetMigration.js",
          "line": 132,
          "content": "// Vérifier si l'ID de structure correspond (peut être dans metadata)",
          "module": "other"
        },
        {
          "file": "src/components/debug/SophieMadetMigration.js",
          "line": 133,
          "content": "if (data.metadata && data.metadata.originalStructureId === completeData.structureId) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/SophieMadetMigration.js",
          "line": 135,
          "content": "addLog('✅ Structure associée trouvée dans contacts_unified');",
          "module": "other"
        },
        {
          "file": "src/components/debug/SophieMadetMigration.js",
          "line": 141,
          "content": "if (associatedStructure && associatedStructure.personnes && associatedStructure.personnes.length < 3) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/SophieMadetMigration.js",
          "line": 142,
          "content": "addLog('📝 Ajout de Sophie à la structure existante...');",
          "module": "other"
        },
        {
          "file": "src/components/debug/SophieMadetMigration.js",
          "line": 144,
          "content": "// Ajouter Sophie aux personnes de la structure",
          "module": "other"
        },
        {
          "file": "src/components/debug/SophieMadetMigration.js",
          "line": 161,
          "content": "const structureRef = doc(db, 'contacts_unified', associatedStructure.id);",
          "module": "other"
        },
        {
          "file": "src/components/debug/SophieMadetMigration.js",
          "line": 162,
          "content": "await updateDoc(structureRef, {",
          "module": "other"
        },
        {
          "file": "src/components/debug/SophieMadetMigration.js",
          "line": 167,
          "content": "addLog('✅ Sophie ajoutée à la structure avec succès');",
          "module": "other"
        },
        {
          "file": "src/components/debug/SophieMadetMigration.js",
          "line": 231,
          "content": "associatedToStructure: !!associatedStructure",
          "module": "other"
        },
        {
          "file": "src/components/debug/SophieMadetMigration.js",
          "line": 279,
          "content": "<div>Associée à structure: {results.details.associatedToStructure ? '✅' : '❌'}</div>",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructureAddressMigration.js",
          "line": 8,
          "content": "import styles from './DataStructureFixer.module.css';",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructureAddressMigration.js",
          "line": 10,
          "content": "const StructureAddressMigration = () => {",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructureAddressMigration.js",
          "line": 18,
          "content": "// Scanner les structures pour trouver les adresses imbriquées",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructureAddressMigration.js",
          "line": 25,
          "content": "console.log('🔍 Scan des structures pour adresses imbriquées...');",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructureAddressMigration.js",
          "line": 26,
          "content": "const snapshot = await getDocs(collection(db, 'structures'));",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructureAddressMigration.js",
          "line": 78,
          "content": "const docRef = doc(db, 'structures', item.id);",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructureAddressMigration.js",
          "line": 134,
          "content": "setTimeout(() => scanStructures(), 1000);",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructureAddressMigration.js",
          "line": 148,
          "content": "<h3>🏠 Migration des adresses de structures</h3>",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructureAddressMigration.js",
          "line": 150,
          "content": "Cet outil corrige les adresses imbriquées dans les structures pour qu'elles soient correctement affichées dans les pré-contrats",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructureAddressMigration.js",
          "line": 163,
          "content": "onClick={scanStructures}",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructureAddressMigration.js",
          "line": 174,
          "content": "Scanner les structures",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructureAddressMigration.js",
          "line": 187,
          "content": "Structures",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructureAddressMigration.js",
          "line": 204,
          "content": "<h6>Structures avec adresse imbriquée:</h6>",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructureAddressMigration.js",
          "line": 285,
          "content": "export default StructureAddressMigration;",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructuresClickDebug.js",
          "line": 8,
          "content": "* Debug component to test structure click functionality",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructuresClickDebug.js",
          "line": 10,
          "content": "const StructuresClickDebug = () => {",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructuresClickDebug.js",
          "line": 13,
          "content": "const [structures, setStructures] = useState([]);",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructuresClickDebug.js",
          "line": 18,
          "content": "const loadStructures = async () => {",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructuresClickDebug.js",
          "line": 20,
          "content": "console.log('🔍 StructuresClickDebug: Loading structures...');",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructuresClickDebug.js",
          "line": 23,
          "content": "const structuresRef = collection(db, 'structures');",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructuresClickDebug.js",
          "line": 24,
          "content": "const q = query(structuresRef, limit(5));",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructuresClickDebug.js",
          "line": 27,
          "content": "const structuresData = snapshot.docs.map(doc => ({",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructuresClickDebug.js",
          "line": 32,
          "content": "console.log('📋 Loaded structures:', structuresData);",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructuresClickDebug.js",
          "line": 35,
          "content": "console.error('❌ Error loading structures:', err);",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructuresClickDebug.js",
          "line": 43,
          "content": "loadStructures();",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructuresClickDebug.js",
          "line": 50,
          "content": "const handleStructureClick = (structure) => {",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructuresClickDebug.js",
          "line": 51,
          "content": "console.log('🖱️ Structure clicked:', structure);",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructuresClickDebug.js",
          "line": 55,
          "content": "navigate(`/structures/${structure.id}`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructuresClickDebug.js",
          "line": 64,
          "content": "navigate('/structures/test-id');",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructuresClickDebug.js",
          "line": 70,
          "content": "<h2>🔍 Structures Click Debug</h2>",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructuresClickDebug.js",
          "line": 79,
          "content": "<h2>🔍 Structures Click Debug</h2>",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructuresClickDebug.js",
          "line": 87,
          "content": "<h2>🔍 Structures Click Debug</h2>",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructuresClickDebug.js",
          "line": 93,
          "content": "<li>Structures Found: {structures.length}</li>",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructuresClickDebug.js",
          "line": 110,
          "content": "Test Navigation to /structures/test-id",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructuresClickDebug.js",
          "line": 114,
          "content": "<h3>Structures List (Click to Test):</h3>",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructuresClickDebug.js",
          "line": 116,
          "content": "<p>No structures found</p>",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructuresClickDebug.js",
          "line": 119,
          "content": "{structures.map((structure, index) => (",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructuresClickDebug.js",
          "line": 122,
          "content": "onClick={() => handleStructureClick(structure)}",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructuresClickDebug.js",
          "line": 138,
          "content": "<strong>#{index + 1} - {structure.nom || 'Unnamed Structure'}</strong>",
          "module": "other"
        },
        {
          "file": "src/components/debug/StructuresClickDebug.js",
          "line": 157,
          "content": "export default StructuresClickDebug;",
          "module": "other"
        },
        {
          "file": "src/components/debug/SystemAuditTool.js",
          "line": 40,
          "content": "const entityTypes = ['artistes', 'concerts', 'lieux', 'contacts', 'structures'];",
          "module": "other"
        },
        {
          "file": "src/components/debug/SystemAuditTool.js",
          "line": 84,
          "content": "structureId: data.structureId || null",
          "module": "other"
        },
        {
          "file": "src/components/debug/SystemAuditTool.js",
          "line": 101,
          "content": "structureId: data.structureId || null",
          "module": "other"
        },
        {
          "file": "src/components/debug/TestDeleteContactDebug.js",
          "line": 6,
          "content": "import structuresService from '@/services/contacts/structuresService';",
          "module": "other"
        },
        {
          "file": "src/components/debug/TestDeleteContactDebug.js",
          "line": 14,
          "content": "const [testStructure, setTestStructure] = useState(null);",
          "module": "other"
        },
        {
          "file": "src/components/debug/TestDeleteContactDebug.js",
          "line": 33,
          "content": "// Chercher une structure sans liaisons actives",
          "module": "other"
        },
        {
          "file": "src/components/debug/TestDeleteContactDebug.js",
          "line": 34,
          "content": "addLog('Recherche d\\'une structure de test...');",
          "module": "other"
        },
        {
          "file": "src/components/debug/TestDeleteContactDebug.js",
          "line": 36,
          "content": "collection(db, 'structures'),",
          "module": "other"
        },
        {
          "file": "src/components/debug/TestDeleteContactDebug.js",
          "line": 40,
          "content": "const structuresSnapshot = await getDocs(structuresQuery);",
          "module": "other"
        },
        {
          "file": "src/components/debug/TestDeleteContactDebug.js",
          "line": 42,
          "content": "// Pour chaque structure, vérifier les liaisons",
          "module": "other"
        },
        {
          "file": "src/components/debug/TestDeleteContactDebug.js",
          "line": 44,
          "content": "const structureId = doc.id;",
          "module": "other"
        },
        {
          "file": "src/components/debug/TestDeleteContactDebug.js",
          "line": 47,
          "content": "where('structureId', '==', structureId),",
          "module": "other"
        },
        {
          "file": "src/components/debug/TestDeleteContactDebug.js",
          "line": 53,
          "content": "setTestStructure({",
          "module": "other"
        },
        {
          "file": "src/components/debug/TestDeleteContactDebug.js",
          "line": 57,
          "content": "addLog(`Structure trouvée: ${doc.data().raisonSociale} (ID: ${doc.id})`, 'success');",
          "module": "other"
        },
        {
          "file": "src/components/debug/TestDeleteContactDebug.js",
          "line": 89,
          "content": "// Tester la suppression d'une structure",
          "module": "other"
        },
        {
          "file": "src/components/debug/TestDeleteContactDebug.js",
          "line": 91,
          "content": "if (!testStructure) {",
          "module": "other"
        },
        {
          "file": "src/components/debug/TestDeleteContactDebug.js",
          "line": 96,
          "content": "addLog(`Tentative de suppression de la structure ${testStructure.raisonSociale}...`);",
          "module": "other"
        },
        {
          "file": "src/components/debug/TestDeleteContactDebug.js",
          "line": 99,
          "content": "const result = await structuresService.deleteStructure(testStructure.id);",
          "module": "other"
        },
        {
          "file": "src/components/debug/TestDeleteContactDebug.js",
          "line": 102,
          "content": "addLog('✅ Structure supprimée avec succès!', 'success');",
          "module": "other"
        },
        {
          "file": "src/components/debug/TestDeleteContactDebug.js",
          "line": 147,
          "content": "<h5>Structure de test</h5>",
          "module": "other"
        },
        {
          "file": "src/components/debug/TestDeleteContactDebug.js",
          "line": 150,
          "content": "{testStructure ? (",
          "module": "other"
        },
        {
          "file": "src/components/debug/TestDeleteContactDebug.js",
          "line": 157,
          "content": "onClick={testDeleteStructure}",
          "module": "other"
        },
        {
          "file": "src/components/debug/TestDeleteContactDebug.js",
          "line": 160,
          "content": "Supprimer cette structure",
          "module": "other"
        },
        {
          "file": "src/components/debug/TestDeleteContactDebug.js",
          "line": 165,
          "content": "Aucune structure sans liaisons actives trouvée",
          "module": "other"
        },
        {
          "file": "src/components/debug/UnifiedContactSelectorTest.js",
          "line": 6,
          "content": "import styles from './DataStructureFixer.module.css';",
          "module": "other"
        },
        {
          "file": "src/components/devis/DevisEditor.js",
          "line": 30,
          "content": "const structureId = searchParams.get('structureId');",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisEditor.js",
          "line": 40,
          "content": "structureId: structureId || '',",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 4,
          "content": "import { getStructureById } from '@/services/structureService';",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 162,
          "content": "// Auto-remplir l'adresse administrative depuis la structure",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 164,
          "content": "const fetchStructureAddress = async () => {",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 167,
          "content": "const structure = await getStructureById(devisData.structureId);",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 185,
          "content": "console.error('Erreur lors de la récupération de l\\'adresse de la structure:', error);",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 190,
          "content": "fetchStructureAddress();",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 198,
          "content": "// Fonction pour actualiser manuellement l'adresse depuis la structure",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 200,
          "content": "if (devisData.structureId) {",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 202,
          "content": "const structure = await getStructureById(devisData.structureId);",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 220,
          "content": "console.error('Erreur lors de la récupération de l\\'adresse de la structure:', error);",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 228,
          "content": "console.log('devisData.structureId:', devisData.structureId);",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 230,
          "content": "// Si pas de structureId, créer quand même quelques adresses d'exemple",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 232,
          "content": "console.log('Pas de structureId, création d\\'adresses d\\'exemple');",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 252,
          "content": "const structure = await getStructureById(devisData.structureId);",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 253,
          "content": "console.log('Structure récupérée:', structure);",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 255,
          "content": "if (!structure) {",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 256,
          "content": "console.log('Structure non trouvée');",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 400,
          "content": "<Form.Label>Structure</Form.Label>",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 402,
          "content": "{devisData.structureNom || 'Structure X'}",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 437,
          "content": "onClick={actualiserAdresseStructure}",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 439,
          "content": "title=\"Récupérer l'adresse de la structure\"",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 442,
          "content": "Actualiser depuis la structure",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisForm.js",
          "line": 885,
          "content": "Voici les autres adresses que nous avons trouvées concernant cette structure :",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisList.js",
          "line": 133,
          "content": "{devisItem.structure && `${devisItem.structure} • `}",
          "module": "devis"
        },
        {
          "file": "src/components/devis/DevisPreview.js",
          "line": 57,
          "content": "<div><strong>{devisData.structureNom || 'Nom de la structure'}</strong></div>",
          "module": "devis"
        },
        {
          "file": "src/components/devis/sections/DevisTable.js",
          "line": 29,
          "content": "// Filtre texte - recherche dans Ref, Structure, Projet",
          "module": "devis"
        },
        {
          "file": "src/components/devis/sections/DevisTable.js",
          "line": 33,
          "content": "devisItem.structure?.toLowerCase().includes(searchTerm.toLowerCase()) ||",
          "module": "devis"
        },
        {
          "file": "src/components/devis/sections/DevisTable.js",
          "line": 175,
          "content": "label: 'Structure',",
          "module": "devis"
        },
        {
          "file": "src/components/devis/sections/DevisTable.js",
          "line": 178,
          "content": "render: (devisItem) => <span>{devisItem.structure || '—'}</span>",
          "module": "devis"
        },
        {
          "file": "src/components/devis/sections/DevisTable.js",
          "line": 346,
          "content": "placeholder=\"(Référence, Structure, Projet)\"",
          "module": "devis"
        },
        {
          "file": "src/components/factures/FactureParametersEditor.js",
          "line": 87,
          "content": "nom_structure: 'Salle de Concert XYZ',",
          "module": "factures"
        },
        {
          "file": "src/components/factures/FactureParametersEditor.js",
          "line": 89,
          "content": "ville_structure: '69000 Lyon',",
          "module": "factures"
        },
        {
          "file": "src/components/factures/FactureParametersEditor.js",
          "line": 91,
          "content": "tva_structure: 'FR98765432109',",
          "module": "factures"
        },
        {
          "file": "src/components/factures/FactureParametersEditor.js",
          "line": 93,
          "content": "telephone_structure: '04 78 90 12 34',",
          "module": "factures"
        },
        {
          "file": "src/components/factures/FactureTemplateEditor.js",
          "line": 151,
          "content": "// Variables Client (structure)",
          "module": "factures"
        },
        {
          "file": "src/components/factures/FactureTemplateEditor.js",
          "line": 152,
          "content": "{ category: 'Client', label: 'Nom du client', value: '{nom_structure}' },",
          "module": "factures"
        },
        {
          "file": "src/components/factures/FactureTemplateEditor.js",
          "line": 154,
          "content": "{ category: 'Client', label: 'Ville du client', value: '{ville_structure}' },",
          "module": "factures"
        },
        {
          "file": "src/components/factures/FactureTemplateEditor.js",
          "line": 156,
          "content": "{ category: 'Client', label: 'N° TVA du client', value: '{tva_structure}' },",
          "module": "factures"
        },
        {
          "file": "src/components/factures/FactureTemplateEditor.js",
          "line": 158,
          "content": "{ category: 'Client', label: 'Téléphone du client', value: '{telephone_structure}' },",
          "module": "factures"
        },
        {
          "file": "src/components/forms/FormSubmissionViewer.js",
          "line": 108,
          "content": "// Rétrocompatibilité avec l'ancienne structure (programmateur → contact)",
          "module": "forms"
        },
        {
          "file": "src/components/forms/FormSubmissionViewer.js",
          "line": 127,
          "content": "<h5>Structure</h5>",
          "module": "forms"
        },
        {
          "file": "src/components/forms/FormSubmissionViewer.js",
          "line": 128,
          "content": "{(submission.contactData?.structure || submission.programmateurData?.structure) && (",
          "module": "forms"
        },
        {
          "file": "src/components/forms/FormSubmissionViewer.js",
          "line": 131,
          "content": "<dd>{submission.contactData?.structure?.raisonSociale || submission.contactData?.structure?.nom || submission.programmateurData?.structure?.raisonSociale || submission.programmateurData?.structure?.nom || 'N/A'}</dd>",
          "module": "forms"
        },
        {
          "file": "src/components/forms/FormSubmissionViewer.js",
          "line": 133,
          "content": "<dd>{submission.contactData?.structure?.siret || submission.programmateurData?.structure?.siret || 'N/A'}</dd>",
          "module": "forms"
        },
        {
          "file": "src/components/forms/FormSubmissionViewer.js",
          "line": 135,
          "content": "<dd>{submission.contactData?.structure?.type || submission.programmateurData?.structure?.type || 'N/A'}</dd>",
          "module": "forms"
        },
        {
          "file": "src/components/forms/FormSubmissionViewer.js",
          "line": 138,
          "content": "{submission.contactData?.structure?.adresse || submission.programmateurData?.structure?.adresse || ''}<br />",
          "module": "forms"
        },
        {
          "file": "src/components/forms/FormSubmissionViewer.js",
          "line": 139,
          "content": "{submission.contactData?.structure?.codePostal || submission.programmateurData?.structure?.codePostal} {submission.contactData?.structure?.ville || submission.programmateurData?.structure?.ville}",
          "module": "forms"
        },
        {
          "file": "src/components/forms/FormSubmissionViewer.js",
          "line": 165,
          "content": "{/* Données de la structure si présentes */}",
          "module": "forms"
        },
        {
          "file": "src/components/forms/FormSubmissionViewer.js",
          "line": 167,
          "content": "<Card title=\"Informations de la structure\" className=\"mb-4\">",
          "module": "forms"
        },
        {
          "file": "src/components/forms/FormSubmissionViewer.js",
          "line": 170,
          "content": "<dd>{submission.structureData.nom || 'N/A'}</dd>",
          "module": "forms"
        },
        {
          "file": "src/components/forms/FormSubmissionViewer.js",
          "line": 174,
          "content": "<dd>{submission.structureData.siret}</dd>",
          "module": "forms"
        },
        {
          "file": "src/components/forms/FormSubmissionViewer.js",
          "line": 177,
          "content": "{submission.structureData.adresse && (",
          "module": "forms"
        },
        {
          "file": "src/components/forms/FormSubmissionViewer.js",
          "line": 179,
          "content": "<dt>Adresse de la structure</dt>",
          "module": "forms"
        },
        {
          "file": "src/components/forms/FormSubmissionViewer.js",
          "line": 181,
          "content": "{submission.structureData.adresse}<br />",
          "module": "forms"
        },
        {
          "file": "src/components/forms/FormSubmissionViewer.js",
          "line": 182,
          "content": "{submission.structureData.codePostal} {submission.structureData.ville}",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 29,
          "content": "// Informations de la structure (optionnel)",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 31,
          "content": "structureSiret: '',",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 33,
          "content": "structureCodePostal: '',",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 35,
          "content": "structureNumeroIntracommunautaire: '',",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 99,
          "content": "if (submissionData.lieuData || submissionData.signataireData || submissionData.structureData) {",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 108,
          "content": "// Données de la structure",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 109,
          "content": "structureNom: submissionData.structureData?.nom || '',",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 111,
          "content": "structureAdresse: submissionData.structureData?.adresse || '',",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 112,
          "content": "structureCodePostal: submissionData.structureData?.codePostal || '',",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 114,
          "content": "structureNumeroIntracommunautaire: submissionData.structureData?.numeroIntracommunautaire || '',",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 125,
          "content": "if (submissionData.structureData?.nom) {",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 126,
          "content": "setSiretSearch(submissionData.structureData.nom);",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 238,
          "content": "structureNom: nom,",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 240,
          "content": "structureAdresse: adresse || siege.adresse || '',",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 242,
          "content": "structureVille: siege.libelle_commune || '',",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 273,
          "content": "// Validation structure (obligatoire)",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 274,
          "content": "if (!formData.structureNom.trim()) errors.push('Le nom de la structure est obligatoire');",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 276,
          "content": "if (!formData.structureCodePostal.trim()) errors.push('Le code postal de la structure est obligatoire');",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 277,
          "content": "if (!formData.structureVille.trim()) errors.push('La ville de la structure est obligatoire');",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 310,
          "content": "// Créer la soumission de formulaire avec structure claire",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 330,
          "content": "// DONNÉES DE LA STRUCTURE (obligatoire)",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 332,
          "content": "nom: formData.structureNom,",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 334,
          "content": "adresse: formData.structureAdresse,",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 336,
          "content": "ville: formData.structureVille,",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 337,
          "content": "numeroIntracommunautaire: formData.structureNumeroIntracommunautaire",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 453,
          "content": "{/* Section Recherche Structure */}",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 455,
          "content": "title=\"Informations de votre structure\"",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 511,
          "content": "{/* Champs de structure (pré-remplis ou saisissables manuellement) */}",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 514,
          "content": "<label htmlFor=\"structureNom\" className={styles.formLabel}>Nom / Raison sociale *</label>",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 517,
          "content": "id=\"structureNom\"",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 520,
          "content": "placeholder=\"Nom de votre structure\"",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 527,
          "content": "<label htmlFor=\"structureSiret\" className={styles.formLabel}>SIRET</label>",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 530,
          "content": "id=\"structureSiret\"",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 534,
          "content": "value={formData.structureSiret}",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 541,
          "content": "<label htmlFor=\"structureNumeroIntracommunautaire\" className={styles.formLabel}>N° TVA Intracommunautaire</label>",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 544,
          "content": "id=\"structureNumeroIntracommunautaire\"",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 548,
          "content": "value={formData.structureNumeroIntracommunautaire}",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 554,
          "content": "<label htmlFor=\"structureAdresse\" className={styles.formLabel}>Adresse de la structure *</label>",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 557,
          "content": "id=\"structureAdresse\"",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 560,
          "content": "placeholder=\"Adresse de votre structure\"",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 569,
          "content": "<label htmlFor=\"structureCodePostal\" className={styles.formLabel}>Code postal *</label>",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 572,
          "content": "id=\"structureCodePostal\"",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 576,
          "content": "value={formData.structureCodePostal}",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 582,
          "content": "<label htmlFor=\"structureVille\" className={styles.formLabel}>Ville *</label>",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 585,
          "content": "id=\"structureVille\"",
          "module": "forms"
        },
        {
          "file": "src/components/forms/PublicContactForm.js",
          "line": 589,
          "content": "value={formData.structureVille}",
          "module": "forms"
        },
        {
          "file": "src/components/forms/mobile/FormValidationInterface.js",
          "line": 45,
          "content": "structureFields,",
          "module": "forms"
        },
        {
          "file": "src/components/forms/mobile/FormValidationInterface.js",
          "line": 181,
          "content": "{/* Structure information - Mobile version */}",
          "module": "forms"
        },
        {
          "file": "src/components/forms/mobile/FormValidationInterface.js",
          "line": 183,
          "content": "title=\"Informations de la structure\"",
          "module": "forms"
        },
        {
          "file": "src/components/forms/mobile/FormValidationInterface.js",
          "line": 185,
          "content": "fields={structureFields}",
          "module": "forms"
        },
        {
          "file": "src/components/forms/mobile/FormValidationInterface.js",
          "line": 193,
          "content": "structureFieldsMapping={true}",
          "module": "forms"
        },
        {
          "file": "src/components/forms/mobile/sections/ValidationSection.js",
          "line": 20,
          "content": "structureFieldsMapping,",
          "module": "forms"
        },
        {
          "file": "src/components/forms/mobile/sections/ValidationSection.js",
          "line": 61,
          "content": "// Gestion spéciale pour les champs de structure",
          "module": "forms"
        },
        {
          "file": "src/components/forms/mobile/sections/ValidationSection.js",
          "line": 63,
          "content": "const structureKey = field.key.replace('structure.', '');",
          "module": "forms"
        },
        {
          "file": "src/components/forms/mobile/sections/ValidationSection.js",
          "line": 64,
          "content": "return existingData.structure && existingData.structure[structureKey];",
          "module": "forms"
        },
        {
          "file": "src/components/forms/validation/FormValidationInterface.js",
          "line": 37,
          "content": "structureFields,",
          "module": "forms"
        },
        {
          "file": "src/components/forms/validation/FormValidationInterface.js",
          "line": 206,
          "content": "{/* Structure information */}",
          "module": "forms"
        },
        {
          "file": "src/components/forms/validation/FormValidationInterface.js",
          "line": 208,
          "content": "title=\"Informations de la structure\"",
          "module": "forms"
        },
        {
          "file": "src/components/forms/validation/FormValidationInterface.js",
          "line": 210,
          "content": "fields={structureFields}",
          "module": "forms"
        },
        {
          "file": "src/components/forms/validation/FormValidationInterface.js",
          "line": 213,
          "content": "formData={formData.structureData || formData.programmateurData || formData.contactData || formData.data}",
          "module": "forms"
        },
        {
          "file": "src/components/forms/validation/FormValidationInterface.js",
          "line": 218,
          "content": "structureFieldsMapping={true}",
          "module": "forms"
        },
        {
          "file": "src/components/forms/validation/FormValidationInterfaceNew.js",
          "line": 61,
          "content": "structureFields,",
          "module": "forms"
        },
        {
          "file": "src/components/forms/validation/FormValidationInterfaceNew.js",
          "line": 85,
          "content": "// Règles de validation pour les champs de structure",
          "module": "forms"
        },
        {
          "file": "src/components/forms/validation/FormValidationInterfaceNew.js",
          "line": 284,
          "content": "{/* Structure information */}",
          "module": "forms"
        },
        {
          "file": "src/components/forms/validation/FormValidationInterfaceNew.js",
          "line": 286,
          "content": "title=\"Informations de la structure\"",
          "module": "forms"
        },
        {
          "file": "src/components/forms/validation/FormValidationInterfaceNew.js",
          "line": 288,
          "content": "fields={structureFields}",
          "module": "forms"
        },
        {
          "file": "src/components/forms/validation/FormValidationInterfaceNew.js",
          "line": 296,
          "content": "structureFieldsMapping={true}",
          "module": "forms"
        },
        {
          "file": "src/components/forms/validation/ValidationSection.js",
          "line": 17,
          "content": "structureFieldsMapping = false",
          "module": "forms"
        },
        {
          "file": "src/components/forms/validation/ValidationSection.js",
          "line": 103,
          "content": "} else if (category === 'structure' && structureFieldsMapping) {",
          "module": "forms"
        },
        {
          "file": "src/components/forms/validation/ValidationSection.js",
          "line": 106,
          "content": "if (formData.structure && typeof formData.structure === 'object') {",
          "module": "forms"
        },
        {
          "file": "src/components/forms/validation/ValidationSection.js",
          "line": 111,
          "content": "formValue = formData.structure || '';",
          "module": "forms"
        },
        {
          "file": "src/components/forms/validation/ValidationSection.js",
          "line": 116,
          "content": "if (formData.structure && typeof formData.structure === 'object') {",
          "module": "forms"
        },
        {
          "file": "src/components/forms/validation/ValidationSection.js",
          "line": 117,
          "content": "formValue = formData.structure[field.id] || '';",
          "module": "forms"
        },
        {
          "file": "src/components/forms/validation/ValidationSection.js",
          "line": 167,
          "content": "} else if (category === 'structure' && structureFieldsMapping) {",
          "module": "forms"
        },
        {
          "file": "src/components/forms/validation/ValidationSection.js",
          "line": 170,
          "content": "existingValue = existingData ? existingData.structure || '' : '';",
          "module": "forms"
        },
        {
          "file": "src/components/forms/validation/ValidationSection.js",
          "line": 173,
          "content": "if (formData.structure && typeof formData.structure === 'object') {",
          "module": "forms"
        },
        {
          "file": "src/components/forms/validation/ValidationSection.js",
          "line": 176,
          "content": "// Nouveau format : structureData.nom → raisonSociale",
          "module": "forms"
        },
        {
          "file": "src/components/forms/validation/ValidationSection.js",
          "line": 179,
          "content": "formValue = formData.structure || '';",
          "module": "forms"
        },
        {
          "file": "src/components/forms/validation/ValidationSection.js",
          "line": 183,
          "content": "const fieldKey = `structure${field.id.charAt(0).toUpperCase() + field.id.slice(1)}`;",
          "module": "forms"
        },
        {
          "file": "src/components/forms/validation/ValidationSection.js",
          "line": 185,
          "content": "// Pour formData, chercher dans l'objet structure ou directement",
          "module": "forms"
        },
        {
          "file": "src/components/forms/validation/ValidationSection.js",
          "line": 187,
          "content": "if (formData.structure && typeof formData.structure === 'object') {",
          "module": "forms"
        },
        {
          "file": "src/components/forms/validation/ValidationSection.js",
          "line": 188,
          "content": "formValue = formData.structure[field.id] || '';",
          "module": "forms"
        },
        {
          "file": "src/components/forms/validation/ValidationSection.js",
          "line": 190,
          "content": "// Nouveau format : les champs sont directement dans structureData",
          "module": "forms"
        },
        {
          "file": "src/components/layout/Sidebar.js",
          "line": 10,
          "content": "console.log(\"Le composant Sidebar est rendu avec nouvelle structure hiérarchique\");",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/LieuView.js",
          "line": 37,
          "content": "const structure = relatedData?.structure || null;",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/LieuView.js",
          "line": 42,
          "content": "const structuresList = structure ? [structure] : [];",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/LieuView.js",
          "line": 82,
          "content": "structure: `/structures/${entityId}`,",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/LieuView.js",
          "line": 149,
          "content": "{(contactsList.length > 0 || structuresList.length > 0 || concertsArray.length > 0 || artistesArray.length > 0) && (",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/LieuView.js",
          "line": 168,
          "content": "{/* Structures */}",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/LieuView.js",
          "line": 169,
          "content": "{structuresList.slice(0, 3).map((structure) => (",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/LieuView.js",
          "line": 172,
          "content": "entityType=\"structure\"",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/LieuView.js",
          "line": 173,
          "content": "name={structure.nom || 'Structure'}",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/LieuView.js",
          "line": 176,
          "content": "const structureId = structure.id || structure.structureId;",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/LieuView.js",
          "line": 177,
          "content": "navigateToEntity('structure', structureId);",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/LieuView.js",
          "line": 212,
          "content": "{(contactsList.length + structuresList.length + concertsArray.length + artistesArray.length) > 3 && (",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/LieuView.js",
          "line": 214,
          "content": "Et {(contactsList.length + structuresList.length + concertsArray.length + artistesArray.length) - 3} autres entités liées...",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 18,
          "content": "import styles from './LieuStructuresSection.module.css';",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 21,
          "content": "* Component to display and manage structures associated with a venue",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 23,
          "content": "export const LieuStructuresSection = ({ lieu, isEditing = false }) => {",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 26,
          "content": "const [structures, setStructures] = useState([]);",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 30,
          "content": "const [selectedStructure, setSelectedStructure] = useState(null);",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 33,
          "content": "// Charger les structures associées au lieu",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 35,
          "content": "const fetchAssociatedStructures = async () => {",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 40,
          "content": "// Requête pour trouver les structures qui ont ce lieu dans leur tableau lieuxAssocies",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 42,
          "content": "collection(db, 'structures'),",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 47,
          "content": "const structuresData = [];",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 50,
          "content": "structuresData.push({",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 56,
          "content": "setStructures(structuresData);",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 58,
          "content": "console.error('Erreur lors de la récupération des structures:', error);",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 64,
          "content": "fetchAssociatedStructures();",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 67,
          "content": "// Recherche de structures",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 69,
          "content": "const searchStructures = async () => {",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 79,
          "content": "// Créer une requête pour rechercher des structures par nom",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 81,
          "content": "collection(db, 'structures'),",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 89,
          "content": "const structure = {",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 96,
          "content": "results.push(structure);",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 100,
          "content": "// Filtrer les structures déjà associées",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 102,
          "content": "!structures.some(s => s.id === result.id)",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 107,
          "content": "console.error('Erreur lors de la recherche de structures:', error);",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 115,
          "content": "searchStructures();",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 120,
          "content": "}, [searchTerm, structures]);",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 138,
          "content": "// Sélectionner une structure",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 139,
          "content": "const handleSelectStructure = async (structure) => {",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 141,
          "content": "// Mettre à jour le document de la structure pour ajouter ce lieu",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 143,
          "content": "await updateDoc(structureRef, {",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 148,
          "content": "setStructures(prev => [...prev, structure]);",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 152,
          "content": "console.error('Erreur lors de l\\'association de la structure:', error);",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 156,
          "content": "// Supprimer l'association avec une structure",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 159,
          "content": "// Mettre à jour le document de la structure pour retirer ce lieu",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 161,
          "content": "await updateDoc(structureRef, {",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 166,
          "content": "setStructures(prev => prev.filter(s => s.id !== structureId));",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 172,
          "content": "// Naviguer vers la création d'une nouvelle structure",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 174,
          "content": "navigate('/structures/nouveau', {",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 187,
          "content": "title=\"Structures associées\"",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 197,
          "content": "onClick={handleCreateStructure}",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 201,
          "content": "<span className=\"d-none d-sm-inline ms-1\">Associer une structure</span>",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 210,
          "content": "<div className={styles.structuresListContainer}>",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 211,
          "content": "{/* Interface de recherche pour ajouter des structures (en mode édition) */}",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 215,
          "content": "<label className={styles.searchLabel}>Rechercher et associer une structure</label>",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 245,
          "content": "{isSearching ? 'Recherche en cours...' : `${searchResults.length} structure(s) trouvée(s)`}",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 266,
          "content": "<span className={styles.loadingText}>Recherche de structures...</span>",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 273,
          "content": "{searchResults.map(structure => (",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 276,
          "content": "className={`${styles.resultItem} ${selectedStructure?.id === structure.id ? styles.resultItemSelected : ''}`}",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 279,
          "content": "setSelectedStructure(selectedStructure?.id === structure.id ? null : structure);",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 282,
          "content": "<div className={styles.structureName}>",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 284,
          "content": "{selectedStructure?.id === structure.id && (",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 289,
          "content": "<div className={styles.structureDetail}>Type: {structure.type}</div>",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 292,
          "content": "<div className={styles.structureDetail}>",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 298,
          "content": "<div className={styles.structureDetail}>",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 308,
          "content": "{/* Bouton d'association pour la structure sélectionnée */}",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 313,
          "content": "Structure sélectionnée : <strong>{selectedStructure.nom}</strong>",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 320,
          "content": "onClick={() => setSelectedStructure(null)}",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 330,
          "content": "handleSelectStructure(selectedStructure);",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 335,
          "content": "Associer cette structure",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 345,
          "content": "Aucune structure trouvée pour \"{searchTerm}\"",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 351,
          "content": "onClick={handleCreateStructure}",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 354,
          "content": "Créer une nouvelle structure",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 372,
          "content": "{/* Liste des structures associées */}",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 373,
          "content": "<div className={styles.associatedStructures}>",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 375,
          "content": "Structures associées ({structures.length})",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 377,
          "content": "{structures.length > 0 ? (",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 378,
          "content": "structures.map(structure => (",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 379,
          "content": "<div key={structure.id} className={styles.structureItem}>",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 380,
          "content": "<Link to={`/structures/${structure.id}`} className={styles.structureLink}>",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 388,
          "content": "onClick={() => handleRemoveStructure(structure.id)}",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 397,
          "content": "<div className={styles.textEmpty}>Aucune structure associée.</div>",
          "module": "other"
        },
        {
          "file": "src/components/lieux/desktop/sections/LieuStructuresSection.js",
          "line": 406,
          "content": "export default LieuStructuresSection;",
          "module": "other"
        },
        {
          "file": "src/components/lieux/mobile/LieuMobileForm.js",
          "line": 324,
          "content": "{prog.structureNom && (",
          "module": "other"
        },
        {
          "file": "src/components/lieux/mobile/LieuMobileForm.js",
          "line": 325,
          "content": "<div className=\"small text-muted\">{prog.structureNom}</div>",
          "module": "other"
        },
        {
          "file": "src/components/parametres/ParametresCompte.js",
          "line": 132,
          "content": "// (ajouter ici la logique spécifique selon votre structure de données)",
          "module": "other"
        },
        {
          "file": "src/components/parametres/ParametresEntreprise.js",
          "line": 14,
          "content": "import StructureLegalSection from '@/components/structures/desktop/StructureLegalSection';",
          "module": "other"
        },
        {
          "file": "src/components/parametres/ParametresEntreprise.js",
          "line": 105,
          "content": "<StructureLegalSection",
          "module": "other"
        },
        {
          "file": "src/components/parametres/sync/SyncManager.js",
          "line": 20,
          "content": "structures: true",
          "module": "other"
        },
        {
          "file": "src/components/parametres/sync/SyncManager.js",
          "line": 237,
          "content": "{name === 'structures' && 'Entreprises et associations'}",
          "module": "other"
        },
        {
          "file": "src/components/pdf/ContratPDFWrapper.js",
          "line": 61,
          "content": "structure,",
          "module": "other"
        },
        {
          "file": "src/components/pdf/ContratPDFWrapper.js",
          "line": 71,
          "content": "structureData,",
          "module": "other"
        },
        {
          "file": "src/components/pdf/ContratPDFWrapper.js",
          "line": 86,
          "content": "structure: structure || structureData || {},",
          "module": "other"
        },
        {
          "file": "src/components/pdf/ContratPDFWrapper.js",
          "line": 138,
          "content": "console.log('[DEBUG ContratPDFWrapper] Structure data:', safeData.structure);",
          "module": "other"
        },
        {
          "file": "src/components/pdf/ContratPDFWrapper.js",
          "line": 232,
          "content": "'contact_structure': safeData.contact?.structure || safeData.programmateur?.structure || 'Non spécifiée',",
          "module": "other"
        },
        {
          "file": "src/components/pdf/ContratPDFWrapper.js",
          "line": 244,
          "content": "'programmateur_structure': safeData.contact?.structure || safeData.programmateur?.structure || 'Non spécifiée',",
          "module": "other"
        },
        {
          "file": "src/components/pdf/ContratPDFWrapper.js",
          "line": 274,
          "content": "// Variables structure (utiliser les données du contact si pas de structure séparée)",
          "module": "other"
        },
        {
          "file": "src/components/pdf/ContratPDFWrapper.js",
          "line": 275,
          "content": "'structure_nom': safeData.structure?.nom || safeData.structure?.raisonSociale || safeData.contact?.structure || safeData.programmateur?.structure || 'Non spécifiée',",
          "module": "other"
        },
        {
          "file": "src/components/pdf/ContratPDFWrapper.js",
          "line": 277,
          "content": "'structure_adresse': (() => {",
          "module": "other"
        },
        {
          "file": "src/components/pdf/ContratPDFWrapper.js",
          "line": 279,
          "content": "if (safeData.structure?.adresse && typeof safeData.structure.adresse === 'object') {",
          "module": "other"
        },
        {
          "file": "src/components/pdf/ContratPDFWrapper.js",
          "line": 282,
          "content": "return safeData.structure?.adresse || safeData.contact?.adresse || safeData.programmateur?.adresse || 'Non spécifiée';",
          "module": "other"
        },
        {
          "file": "src/components/pdf/ContratPDFWrapper.js",
          "line": 284,
          "content": "'structure_code_postal': (() => {",
          "module": "other"
        },
        {
          "file": "src/components/pdf/ContratPDFWrapper.js",
          "line": 285,
          "content": "if (safeData.structure?.adresse && typeof safeData.structure.adresse === 'object') {",
          "module": "other"
        },
        {
          "file": "src/components/pdf/ContratPDFWrapper.js",
          "line": 288,
          "content": "return safeData.structure?.codePostal || 'Non spécifié';",
          "module": "other"
        },
        {
          "file": "src/components/pdf/ContratPDFWrapper.js",
          "line": 290,
          "content": "'structure_ville': (() => {",
          "module": "other"
        },
        {
          "file": "src/components/pdf/ContratPDFWrapper.js",
          "line": 291,
          "content": "if (safeData.structure?.adresse && typeof safeData.structure.adresse === 'object') {",
          "module": "other"
        },
        {
          "file": "src/components/pdf/ContratPDFWrapper.js",
          "line": 294,
          "content": "return safeData.structure?.ville || 'Non spécifiée';",
          "module": "other"
        },
        {
          "file": "src/components/pdf/ContratPDFWrapper.js",
          "line": 296,
          "content": "'structure_pays': (() => {",
          "module": "other"
        },
        {
          "file": "src/components/pdf/ContratPDFWrapper.js",
          "line": 297,
          "content": "if (safeData.structure?.adresse && typeof safeData.structure.adresse === 'object') {",
          "module": "other"
        },
        {
          "file": "src/components/pdf/ContratPDFWrapper.js",
          "line": 300,
          "content": "return safeData.structure?.pays || 'France';",
          "module": "other"
        },
        {
          "file": "src/components/pdf/ContratPDFWrapper.js",
          "line": 302,
          "content": "'structure_email': safeData.structure?.email || 'Non spécifié',",
          "module": "other"
        },
        {
          "file": "src/components/pdf/ContratPDFWrapper.js",
          "line": 303,
          "content": "'structure_telephone': safeData.structure?.telephone || 'Non spécifié',",
          "module": "other"
        },
        {
          "file": "src/components/pdf/ContratPDFWrapper.js",
          "line": 929,
          "content": "structureData,",
          "module": "other"
        },
        {
          "file": "src/components/pdf/ContratPDFWrapper.js",
          "line": 946,
          "content": "structure: structureData || {},",
          "module": "other"
        },
        {
          "file": "src/components/pdf/ContratPDFWrapper.js",
          "line": 979,
          "content": "Programmateur: {safeData.programmateur.structure || 'Non spécifié'}",
          "module": "other"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 11,
          "content": "const PreContratGenerator = ({ concert, contact, artiste, lieu, structure }) => {",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 13,
          "content": "structure: structure?.id || 'aucune',",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 14,
          "content": "structureData: structure",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 22,
          "content": "// Structure",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 224,
          "content": "console.log('[WORKFLOW_TEST] 4. Chargement des données de structure dans le pré-contrat - initialisation des données');",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 236,
          "content": "if (hasEmptyAddress && structure) {",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 237,
          "content": "console.log('[PreContratGenerator] Adresse vide dans le pré-contrat, chargement depuis la structure');",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 250,
          "content": "console.log('[PreContratGenerator] Données non vides ou pas de structure, pas de mise à jour');",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 255,
          "content": "if (structure) {",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 256,
          "content": "console.log('[WORKFLOW_TEST] 4. Chargement des données de structure dans le pré-contrat - structure trouvée, application des données');",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 277,
          "content": "console.log('[WORKFLOW_TEST] 4. Chargement des données de structure dans le pré-contrat - données appliquées');",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 297,
          "content": "}, [structure, artiste, concert, lieu, existingPreContrat]);",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 299,
          "content": "// Charger les responsables d'administration liés à la structure",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 302,
          "content": "if (!structure?.id || !currentOrg?.id) return;",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 306,
          "content": "console.log('[PreContrat] Chargement responsables admin pour structure:', structure.id);",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 308,
          "content": "// Rechercher dans contacts_unified pour cette structure",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 321,
          "content": "// Si c'est une structure avec des personnes",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 322,
          "content": "if (data.entityType === 'structure' && data.personnes && Array.isArray(data.personnes)) {",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 324,
          "content": "if (doc.id === structure.id || data.structure?.id === structure.id ||",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 326,
          "content": "data.structure?.raisonSociale === structure.structureRaisonSociale) {",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 335,
          "content": "structureId: doc.id,",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 342,
          "content": "// Si c'est une personne libre liée à cette structure",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 351,
          "content": "structureId: structure.id,",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 368,
          "content": "}, [structure, currentOrg]);",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 544,
          "content": "{/* Section Structure */}",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 547,
          "content": "<h4>Structure</h4>",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 1116,
          "content": "<h6>Structure</h6>",
          "module": "precontrats"
        },
        {
          "file": "src/components/precontrats/desktop/PreContratGenerator.js",
          "line": 1194,
          "content": "<strong>Structure :</strong> {formData.raisonSociale || 'Non renseignée'}",
          "module": "precontrats"
        },
        {
          "file": "src/components/relances/RelancesTracker.js",
          "line": 227,
          "content": "relance.entityType === 'structures' ? 'bi-building' : 'bi-tag'",
          "module": "other"
        },
        {
          "file": "src/components/relances/RelancesTracker.js",
          "line": 587,
          "content": "<option value=\"structures\">Structure</option>",
          "module": "other"
        },
        {
          "file": "src/components/structures/StructureDetails.js",
          "line": 1,
          "content": "// src/components/structures/StructureDetails.js",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureDetails.js",
          "line": 6,
          "content": "import StructuresDesktopDetails from './desktop/StructureDetails';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureDetails.js",
          "line": 7,
          "content": "import StructuresMobileDetails from './mobile/StructureDetails';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureDetails.js",
          "line": 10,
          "content": "* Composant wrapper responsive pour les détails d'une structure",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureDetails.js",
          "line": 13,
          "content": "function StructureDetails(props) {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureDetails.js",
          "line": 18,
          "content": "<StructuresMobileDetails {...props} />",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureDetails.js",
          "line": 20,
          "content": "<StructuresDesktopDetails {...props} />",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureDetails.js",
          "line": 24,
          "content": "export default StructureDetails;",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 3,
          "content": "import { useStructureDetails } from '@/hooks/structures';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 11,
          "content": "import styles from './StructureViewTabs.module.css';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 13,
          "content": "const StructureViewTabs = ({ id: propId }) => {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 31,
          "content": "structure,",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 37,
          "content": "} = useStructureDetails(id);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 42,
          "content": "if (lastLocalUpdate && structure?.updatedAt) {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 45,
          "content": "console.log('[StructureViewTabs] Utilisation des commentaires locaux (plus récents)');",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 51,
          "content": "const result = structure?.commentaires || localCommentaires || [];",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 54,
          "content": "}, [localCommentaires, structure?.commentaires, structure?.updatedAt, lastLocalUpdate]);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 56,
          "content": "// Synchroniser les commentaires locaux avec les données de la structure de manière intelligente",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 58,
          "content": "if (structure?.commentaires) {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 67,
          "content": "console.log('[StructureViewTabs] Synchronisation des commentaires depuis Firebase');",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 70,
          "content": "console.log('[StructureViewTabs] Commentaires locaux plus récents, pas de synchronisation');",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 73,
          "content": "}, [structure?.commentaires, structure?.updatedAt, lastLocalUpdate, localCommentaires.length]);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 81,
          "content": "//   if (newTag && (!structure?.tags || !structure.tags.includes(newTag))) {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 82,
          "content": "//     console.log('Ajouter tag:', newTag, 'à la structure:', id);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 89,
          "content": "console.log('Supprimer tag:', tagToRemove, 'de la structure:', id);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 226,
          "content": "console.log('🎯 onAddClick appelé pour dates!', { structureId: structure?.id || id, structureName: structure?.nom || structure?.structureRaisonSociale || 'Structure' });",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 228,
          "content": "structureId: structure?.id || id,",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 229,
          "content": "structureName: structure?.nom || structure?.structureRaisonSociale || 'Structure'",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 295,
          "content": "notFoundTitle: 'Structure non trouvée',",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 312,
          "content": "render: (structure) => {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 449,
          "content": "console.log('Ouvrir modal ajout tag structure');",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 458,
          "content": "console.log('Ouvrir modal gestion tags structure');",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 463,
          "content": "render: (structure) => (",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 466,
          "content": "{structure?.tags && structure.tags.length > 0 ? (",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 500,
          "content": "console.log('[DEBUG StructureViewTabs] Contacts disponibles:', contacts?.length || 0);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 502,
          "content": "console.log('[DEBUG StructureViewTabs] Loading:', loading);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 568,
          "content": "console.log('Détacher contact de la structure');",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 629,
          "content": "if (!id) throw new Error('ID de la structure manquant');",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 631,
          "content": "const docRef = doc(db, 'structures', id);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 635,
          "content": "if (!docSnap.exists()) throw new Error('Structure non trouvée');",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 670,
          "content": "render: (structure) => {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 720,
          "content": "entity={structure}",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 723,
          "content": "entityType=\"structure\"",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructureViewTabs.js",
          "line": 729,
          "content": "export default StructureViewTabs;",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 1,
          "content": "// src/components/structures/StructuresList.js",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 7,
          "content": "import { useDeleteStructure } from '@/hooks/structures';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 9,
          "content": "import StructureCreationModal from '@/components/contacts/modal/StructureCreationModal';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 13,
          "content": "* Liste unifiée des structures utilisant le composant générique ListWithFilters",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 16,
          "content": "function StructuresList() {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 17,
          "content": "console.log('🏢 Main StructuresList component loaded');",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 21,
          "content": "const [showStructureModal, setShowStructureModal] = useState(false);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 38,
          "content": "const hasStructureData = contact.structureRaisonSociale?.trim();",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 41,
          "content": "if (hasStructureData && hasPersonneData) {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 45,
          "content": "id: `${contact.id}_structure`,",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 47,
          "content": "_viewType: 'structure',",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 62,
          "content": "_viewType: hasStructureData ? 'structure' : 'personne',",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 63,
          "content": "_displayType: hasStructureData ? 'Structure' : 'Personne'",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 76,
          "content": "const { handleDelete } = useDeleteStructure(onDeleteSuccess);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 84,
          "content": "const hasStructureData = contact.structureRaisonSociale?.trim();",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 87,
          "content": "if (hasStructureData) {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 99,
          "content": "contact.email || contact.mailDirect || contact.structureEmail",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 111,
          "content": "id: 'structures',",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 113,
          "content": "value: typeCount.structures || 0,",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 149,
          "content": "if (contact._viewType === 'structure') {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 156,
          "content": "const hasStructureData = contact.structureRaisonSociale?.trim();",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 158,
          "content": "type = 'Structure'; icon = 'bi bi-building'; variant = 'info';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 184,
          "content": "if (contact._viewType === 'structure') {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 185,
          "content": "return contact.structureRaisonSociale || 'Structure sans nom';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 192,
          "content": "const hasStructureData = contact.structureRaisonSociale?.trim();",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 194,
          "content": "return contact.structureRaisonSociale || 'Structure sans nom';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 207,
          "content": "if (contact.structureRaisonSociale) {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 208,
          "content": "return contact.structureSiret || contact.structureId || 'Structure';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 210,
          "content": "return contact.fonction || contact.structureNom || '—';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 220,
          "content": "return contact.email || contact.mailDirect || contact.structureEmail || '—';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 230,
          "content": "return contact.telephone || contact.telDirect || contact.structureTelephone1 || '—';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 279,
          "content": "if (contact._viewType === 'structure') {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 280,
          "content": "return contact.structureRaisonSociale || 'Structure';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 287,
          "content": "const hasStructureData = contact.structureRaisonSociale?.trim();",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 289,
          "content": "return contact.structureRaisonSociale || 'Structure';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 295,
          "content": "// Callback appelé après création réussie d'une structure",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 297,
          "content": "console.log('Structure créée:', newStructure);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 299,
          "content": "// Optionnel : ouvrir l'onglet de la nouvelle structure",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 306,
          "content": "onClick={() => setShowStructureModal(true)}",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 308,
          "content": "Nouvelle structure",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 344,
          "content": "{/* Modal de création de structure */}",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 346,
          "content": "show={showStructureModal}",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 347,
          "content": "onHide={() => setShowStructureModal(false)}",
          "module": "structures"
        },
        {
          "file": "src/components/structures/StructuresList.js",
          "line": 354,
          "content": "export default StructuresList;",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureAddressSection.js",
          "line": 1,
          "content": "// src/components/structures/core/useStructureAddressSection.js",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureAddressSection.js",
          "line": 5,
          "content": "* Hook contenant la logique partagée pour l'affichage des adresses d'une structure",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureAddressSection.js",
          "line": 9,
          "content": "* @param {Object} props.structure - Données de la structure",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureAddressSection.js",
          "line": 13,
          "content": "export const useStructureAddressSection = ({ structure, formatValue }) => {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureAddressSection.js",
          "line": 17,
          "content": "if (!structure) return null;",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureAddressSection.js",
          "line": 37,
          "content": "}, [structure]);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureAddressSection.js",
          "line": 41,
          "content": "if (!structure) return null;",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureAddressSection.js",
          "line": 80,
          "content": "}, [structure, formatValue]);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureAddressSection.js",
          "line": 82,
          "content": "// Vérifier si la structure existe après avoir défini tous les hooks",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureAddressSection.js",
          "line": 93,
          "content": "export default useStructureAddressSection;",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 1,
          "content": "// src/components/structures/core/useStructureDetails.js",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 13,
          "content": "* Hook contenant la logique partagée pour l'affichage et la gestion des détails d'une structure",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 16,
          "content": "* @param {string} id - Identifiant de la structure à afficher",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 17,
          "content": "* @returns {Object} - États et fonctions pour gérer les détails de structure",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 19,
          "content": "export const useStructureDetailsCore = (id) => {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 21,
          "content": "const [structure, setStructure] = useState(null);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 29,
          "content": "// Chargement des données de la structure",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 31,
          "content": "const fetchStructure = async () => {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 34,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', id));",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 36,
          "content": "const structureData = {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 38,
          "content": "...structureDoc.data()",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 40,
          "content": "setStructure(structureData);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 43,
          "content": "if (structureData.contactsAssocies?.length > 0) {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 44,
          "content": "fetchContacts(structureData.contactsAssocies);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 47,
          "content": "setError('Structure non trouvée');",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 51,
          "content": "console.error('Erreur lors du chargement de la structure:', error);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 58,
          "content": "fetchStructure();",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 99,
          "content": "// Mise à jour des contacts pour retirer la référence à cette structure",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 107,
          "content": "// Si le contact a une structureId correspondant à cette structure,",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 109,
          "content": "if (progData.structureId === id) {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 111,
          "content": "structureId: null,",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 120,
          "content": "// Supprimer la structure",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 121,
          "content": "await deleteDoc(doc(db, 'structures', id));",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 124,
          "content": "console.error('Erreur lors de la suppression de la structure:', error);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 132,
          "content": "// Fonction pour obtenir le libellé correspondant au type de structure",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 150,
          "content": "navigate(`/structures/${id}/edit`);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 154,
          "content": "navigate('/structures');",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 159,
          "content": "structure,",
          "module": "structures"
        },
        {
          "file": "src/components/structures/core/useStructureDetails.js",
          "line": 179,
          "content": "export default useStructureDetailsCore;",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureDetails.js",
          "line": 2,
          "content": "import StructureViewTabs from '../StructureViewTabs';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureDetails.js",
          "line": 5,
          "content": "* Wrapper component for structure details",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureDetails.js",
          "line": 8,
          "content": "const StructureDetails = () => {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureDetails.js",
          "line": 12,
          "content": "export default StructureDetails;",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 11,
          "content": "import StructureIdentitySection from './sections/StructureIdentitySection';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 14,
          "content": "import StructureSignataireSection from './sections/StructureSignataireSection';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 15,
          "content": "import StructureBillingSection from './sections/StructureBillingSection';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 17,
          "content": "import StructureContactsSection from './sections/StructureContactsSection';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 18,
          "content": "import StructureConcertsManagementSection from './sections/StructureConcertsManagementSection';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 20,
          "content": "import styles from './StructureForm.module.css';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 23,
          "content": "* Composant de formulaire structure enrichi - Style moderne TourCraft",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 26,
          "content": "const StructureFormEnhanced = () => {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 66,
          "content": "// Adresse du lieu (séparée des infos structure)",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 89,
          "content": "// Callback mémorisé pour la sélection de structure via recherche",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 123,
          "content": "toast.success('Informations de la structure importées');",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 137,
          "content": "const loadAssociations = useCallback(async (structure) => {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 176,
          "content": "// Chargement des données de la structure",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 178,
          "content": "const loadStructure = async () => {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 185,
          "content": "const docRef = doc(db, 'structures', id);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 190,
          "content": "const structure = { id: docSnap.id, ...data };",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 243,
          "content": "await loadAssociations(structure);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 245,
          "content": "setError('Structure introuvable');",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 249,
          "content": "setError('Erreur lors du chargement de la structure');",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 255,
          "content": "loadStructure();",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 369,
          "content": "errors.push('Le type de structure est obligatoire');",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 448,
          "content": "const structureData = {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 465,
          "content": "delete structureData.adresseLieu;",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 468,
          "content": "structureData.createdAt = new Date();",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 469,
          "content": "const docRef = await addDoc(collection(db, 'structures'), structureData);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 471,
          "content": "navigate(`/structures/${docRef.id}`);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 473,
          "content": "const docRef = doc(db, 'structures', id);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 475,
          "content": "toast.success('Structure modifiée avec succès !');",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 510,
          "content": "title={isNewFromUrl ? 'Nouvelle Structure' : 'Modifier Structure'}",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 537,
          "content": "onClick={() => navigate(isNewFromUrl ? '/structures' : `/structures/${id}`)}",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 548,
          "content": "<StructureSiretSearchSection companySearch={companySearch} />",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 553,
          "content": "<StructureIdentitySection",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 676,
          "content": "<StructureSignataireSection",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 683,
          "content": "<StructureContactsSection",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 724,
          "content": "<StructureConcertsManagementSection",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 882,
          "content": "<StructureBillingSection",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 888,
          "content": "<StructureNotesSection",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureForm.js",
          "line": 900,
          "content": "export default StructureFormEnhanced;",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureLegalSection.js",
          "line": 3,
          "content": "import styles from './StructureLegalSection.module.css';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureLegalSection.js",
          "line": 6,
          "content": "* Section d'informations légales d'une structure",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureLegalSection.js",
          "line": 9,
          "content": "* @param {Object} props.structure - Objet structure à afficher en mode visualisation",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureLegalSection.js",
          "line": 15,
          "content": "const StructureLegalSection = ({",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureLegalSection.js",
          "line": 30,
          "content": "<Form.Label htmlFor=\"structureSiret\">SIRET</Form.Label>",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureLegalSection.js",
          "line": 32,
          "content": "id=\"structureSiret\"",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureLegalSection.js",
          "line": 47,
          "content": "<Form.Label htmlFor=\"structureCodeAPE\">Code APE</Form.Label>",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureLegalSection.js",
          "line": 49,
          "content": "id=\"structureCodeAPE\"",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureLegalSection.js",
          "line": 64,
          "content": "<Form.Label htmlFor=\"structureMentionsLegales\">Mentions légales</Form.Label>",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureLegalSection.js",
          "line": 66,
          "content": "id=\"structureMentionsLegales\"",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureLegalSection.js",
          "line": 72,
          "content": "placeholder=\"Mentions légales de la structure\"",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureLegalSection.js",
          "line": 82,
          "content": "<Form.Label htmlFor=\"structureTva\">TVA Intracommunautaire</Form.Label>",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureLegalSection.js",
          "line": 84,
          "content": "id=\"structureTva\"",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureLegalSection.js",
          "line": 100,
          "content": "<p className={styles.fieldValue}>{formatValue(structure?.siret)}</p>",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureLegalSection.js",
          "line": 104,
          "content": "<p className={styles.fieldValue}>{formatValue(structure?.codeAPE)}</p>",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureLegalSection.js",
          "line": 108,
          "content": "<p className={styles.fieldValue}>{formatValue(structure?.tva)}</p>",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureLegalSection.js",
          "line": 112,
          "content": "<p className={styles.fieldValue}>{formatValue(structure?.mentionsLegales)}</p>",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureLegalSection.js",
          "line": 120,
          "content": "export default StructureLegalSection;",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 1,
          "content": "// src/components/structures/desktop/StructureView.js",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 4,
          "content": "import { useStructureDetails } from '@/hooks/structures';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 12,
          "content": "import styles from './StructureView.module.css';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 15,
          "content": "* Composant des détails d'une structure - Interface moderne et épurée",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 18,
          "content": "function StructureView({ id: propId }) {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 24,
          "content": "const detailsHook = useStructureDetails(id);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 27,
          "content": "structure,",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 47,
          "content": "const structureData = useMemo(() => {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 88,
          "content": "nom: structure.nom || \"Structure sans nom\",",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 113,
          "content": "}, [structure, formatValue]);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 116,
          "content": "const handleEdit = () => navigate(`/structures/${id}/edit`);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 118,
          "content": "// const handleDeleteStructure = () => {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 150,
          "content": "if (!structureData) {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 151,
          "content": "return <ErrorMessage message=\"Structure introuvable\" />;",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 155,
          "content": "<div className={styles.structureDetails}>",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 158,
          "content": "title={structureData.nom}",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 159,
          "content": "subtitle={`${structureData.type} • Créé le ${structureData.dateCreation}`}",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 174,
          "content": "{/* Informations de la Structure */}",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 176,
          "content": "<h2>Informations de la structure</h2>",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 179,
          "content": "<div className={styles.structureInfoGrid}>",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 183,
          "content": "<p className={styles.value}>{structureData.type}</p>",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 186,
          "content": "{structureData.raisonSociale && (",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 189,
          "content": "<p className={styles.value}>{structureData.raisonSociale}</p>",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 194,
          "content": "{structureData.numeroSiret && (",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 197,
          "content": "<p className={styles.value}>{structureData.numeroSiret}</p>",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 201,
          "content": "{structureData.numeroTVA && (",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 204,
          "content": "<p className={styles.value}>{structureData.numeroTVA}</p>",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 212,
          "content": "{structureData.email ? (",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 213,
          "content": "<a href={`mailto:${structureData.email}`} className={styles.emailLink}>",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 225,
          "content": "{structureData.telephone ? (",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 226,
          "content": "<a href={`tel:${structureData.telephone}`} className={styles.phoneLink}>",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 238,
          "content": "{structureData.siteWeb ? (",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 239,
          "content": "<a href={structureData.siteWeb} target=\"_blank\" rel=\"noopener noreferrer\" className={styles.webLink}>",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 251,
          "content": "<p className={styles.value}>{structureData.adresse}</p>",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 256,
          "content": "<p className={styles.value}>{structureData.ville} {structureData.codePostal}</p>",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 259,
          "content": "{structureData.pays !== \"France\" && (",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 262,
          "content": "<p className={styles.value}>{structureData.pays}</p>",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 341,
          "content": "{(structureData.presentation || structureData.description) && (",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 343,
          "content": "<h2>{structureData.presentation ? 'Présentation' : 'Description'}</h2>",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 345,
          "content": "{structureData.presentation || structureData.description}",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 351,
          "content": "{structureData.notes && (",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 355,
          "content": "{structureData.notes}",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 366,
          "content": "<span className={styles.historyValue}>{structureData.dateCreation}</span>",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructureView.js",
          "line": 386,
          "content": "export default StructureView;",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 10,
          "content": "import styles from './StructuresList.module.css';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 13,
          "content": "* Version simplifiée de StructuresList",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 16,
          "content": "const StructuresList = () => {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 17,
          "content": "console.log('🏗️ Desktop StructuresList component loaded');",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 19,
          "content": "const { openStructureTab } = useTabs();",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 23,
          "content": "data: structures = [],",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 26,
          "content": "} = useMultiOrgQuery('structures', {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 32,
          "content": "console.log('🏗️ StructuresList: État du hook', { structures: structures.length, loading, error });",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 38,
          "content": "const [structureToDelete, setStructureToDelete] = useState(null);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 44,
          "content": "const displayedStructures = useMemo(() => {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 50,
          "content": "result = result.filter(structure =>",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 60,
          "content": "result = result.filter(structure => structure.type === typeFilter);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 82,
          "content": "}, [structures, searchTerm, typeFilter, sortBy, sortDirection]);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 86,
          "content": "total: structures.length,",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 87,
          "content": "filtered: displayedStructures.length,",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 89,
          "content": "entreprises: structures.filter(s => s.type === 'entreprise').length,",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 91,
          "content": "collectivites: structures.filter(s => s.type === 'collectivite').length,",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 93,
          "content": "}), [structures, displayedStructures]);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 96,
          "content": "const handleDeleteClick = useCallback((structure) => {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 102,
          "content": "if (!structureToDelete) return;",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 109,
          "content": "where('structureId', '==', structureToDelete.id)",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 114,
          "content": "alert(`Cette structure ne peut pas être supprimée car elle est associée à ${contactSnapshot.size} contact(s).`);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 118,
          "content": "// Supprimer la structure",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 119,
          "content": "await deleteDoc(doc(db, 'structures', structureToDelete.id));",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 123,
          "content": "setStructureToDelete(null);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 133,
          "content": "}, [structureToDelete]);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 153,
          "content": "if (loading && structures.length === 0) {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 158,
          "content": "<p>Chargement des structures...</p>",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 168,
          "content": "{error.message || 'Une erreur est survenue lors du chargement des structures.'}",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 178,
          "content": "<h1 className={styles.title}>Structures</h1>",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 181,
          "content": "onClick={() => navigate('/structures/nouveau')}",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 185,
          "content": "Nouvelle Structure",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 250,
          "content": "{displayedStructures.length} / {structures.length} résultats",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 255,
          "content": "{displayedStructures.length > 0 ? (",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 275,
          "content": "{displayedStructures.map(structure => (",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 279,
          "content": "console.log('🖱️ Desktop StructuresList row clicked:', structure);",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 281,
          "content": "openStructureTab(structure.id, structure.nom || structure.raisonSociale || 'Structure');",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 301,
          "content": "onClick={() => navigate(`/structures/${structure.id}/edit`)}",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 308,
          "content": "onClick={() => handleDeleteClick(structure)}",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 324,
          "content": "? 'Aucune structure ne correspond à vos critères de recherche.'",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 338,
          "content": "Êtes-vous sûr de vouloir supprimer la structure \"{structureToDelete?.nom || structureToDelete?.raisonSociale}\" ?",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/StructuresList.js",
          "line": 363,
          "content": "export default StructuresList;",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureBillingSection.js",
          "line": 4,
          "content": "import styles from './StructureBillingSection.module.css';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureBillingSection.js",
          "line": 7,
          "content": "* Section component for structure's billing information",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureBillingSection.js",
          "line": 15,
          "content": "const StructureBillingSection = ({ formData, handleChange, errors = {} }) => {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureBillingSection.js",
          "line": 97,
          "content": "Utiliser la même adresse que la structure",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureBillingSection.js",
          "line": 204,
          "content": "export default StructureBillingSection;",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureConcertsManagementSection.js",
          "line": 5,
          "content": "* Section component for managing structure concerts",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureConcertsManagementSection.js",
          "line": 11,
          "content": "* @param {string} props.entityId - Structure ID for bidirectional relations",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureConcertsManagementSection.js",
          "line": 14,
          "content": "const StructureConcertsManagementSection = ({",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureConcertsManagementSection.js",
          "line": 27,
          "content": "entityType=\"structure\"",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureConcertsManagementSection.js",
          "line": 34,
          "content": "export default StructureConcertsManagementSection;",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureContactsSection.js",
          "line": 5,
          "content": "* Section component for managing structure contacts",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureContactsSection.js",
          "line": 11,
          "content": "* @param {string} props.entityId - Structure ID for bidirectional relations",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureContactsSection.js",
          "line": 14,
          "content": "const StructureContactsSection = ({",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureContactsSection.js",
          "line": 27,
          "content": "entityType=\"structure\"",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureContactsSection.js",
          "line": 34,
          "content": "export default StructureContactsSection;",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureIdentitySection.js",
          "line": 3,
          "content": "import styles from './StructureIdentitySection.module.css';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureIdentitySection.js",
          "line": 7,
          "content": "* Section component for structure's identity information",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureIdentitySection.js",
          "line": 15,
          "content": "const StructureIdentitySection = ({ formData, handleChange, errors = {} }) => {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureIdentitySection.js",
          "line": 20,
          "content": "className={styles.structureFormCard}",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureIdentitySection.js",
          "line": 60,
          "content": "<Form.Label className={styles.formLabel}>Type de structure</Form.Label>",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureIdentitySection.js",
          "line": 77,
          "content": "{errors.type || 'Le type de structure est requis'}",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureIdentitySection.js",
          "line": 120,
          "content": "export default StructureIdentitySection;",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureNotesSection.js",
          "line": 3,
          "content": "import styles from './StructureNotesSection.module.css';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureNotesSection.js",
          "line": 6,
          "content": "* Section component for structure notes",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureNotesSection.js",
          "line": 14,
          "content": "const StructureNotesSection = ({ formData, handleChange, isEditing = true }) => {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureNotesSection.js",
          "line": 52,
          "content": "export default StructureNotesSection;",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureSignataireSection.js",
          "line": 4,
          "content": "import styles from './StructureSignataireSection.module.css';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureSignataireSection.js",
          "line": 7,
          "content": "* Section component for structure's contract signatory information",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureSignataireSection.js",
          "line": 15,
          "content": "const StructureSignataireSection = ({ signataire, handleSignataireChange, errors = {} }) => {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureSignataireSection.js",
          "line": 20,
          "content": "className={styles.structureFormCard}",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureSignataireSection.js",
          "line": 124,
          "content": "export default StructureSignataireSection;",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureSiretSearchSection.js",
          "line": 4,
          "content": "import styles from './StructureSiretSearchSection.module.css';",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureSiretSearchSection.js",
          "line": 7,
          "content": "* Section component for SIRET/Company search in Structure form",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureSiretSearchSection.js",
          "line": 13,
          "content": "const StructureSiretSearchSection = ({ companySearch }) => {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureSiretSearchSection.js",
          "line": 19,
          "content": "<h3 className={styles.sectionTitle}>Rechercher une structure existante</h3>",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/sections/StructureSiretSearchSection.js",
          "line": 44,
          "content": "export default StructureSiretSearchSection;",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/utils.js",
          "line": 2,
          "content": "* Gets the CSS class for the badge based on structure type",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/utils.js",
          "line": 4,
          "content": "* @param {string} type - Structure type",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/utils.js",
          "line": 23,
          "content": "* Gets the display label for the structure type",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/utils.js",
          "line": 25,
          "content": "* @param {string} type - Structure type",
          "module": "structures"
        },
        {
          "file": "src/components/structures/desktop/utils.js",
          "line": 26,
          "content": "* @returns {string} Human-readable label for the structure type",
          "module": "structures"
        },
        {
          "file": "src/components/structures/mobile/StructureDetails.js",
          "line": 5,
          "content": "* Version mobile du détail d'une structure",
          "module": "structures"
        },
        {
          "file": "src/components/structures/mobile/StructureDetails.js",
          "line": 8,
          "content": "const StructureDetails = () => {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/mobile/StructureDetails.js",
          "line": 12,
          "content": "export default StructureDetails;",
          "module": "structures"
        },
        {
          "file": "src/components/structures/mobile/StructureForm.js",
          "line": 5,
          "content": "* Version mobile du formulaire de structure",
          "module": "structures"
        },
        {
          "file": "src/components/structures/mobile/StructureForm.js",
          "line": 8,
          "content": "const StructureForm = () => {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/mobile/StructureForm.js",
          "line": 12,
          "content": "export default StructureForm;",
          "module": "structures"
        },
        {
          "file": "src/components/structures/mobile/StructuresList.js",
          "line": 5,
          "content": "* Version mobile de la liste des structures",
          "module": "structures"
        },
        {
          "file": "src/components/structures/mobile/StructuresList.js",
          "line": 8,
          "content": "const StructuresList = () => {",
          "module": "structures"
        },
        {
          "file": "src/components/structures/mobile/StructuresList.js",
          "line": 9,
          "content": "console.log('📱 Mobile StructuresList component loaded');",
          "module": "structures"
        },
        {
          "file": "src/components/structures/mobile/StructuresList.js",
          "line": 13,
          "content": "export default StructuresList;",
          "module": "structures"
        },
        {
          "file": "src/components/tabs/TabManagerProduction.js",
          "line": 35,
          "content": "import ContactsList from '@/components/contacts/ContactsList'; // Liste unifiée contacts + structures",
          "module": "other"
        },
        {
          "file": "src/components/tabs/TabManagerProduction.js",
          "line": 42,
          "content": "// import StructureViewTabs from '@/components/structures/StructureViewTabs'; // Plus utilisé - maintenant tout est des contacts",
          "module": "other"
        },
        {
          "file": "src/components/tabs/TabManagerProduction.js",
          "line": 223,
          "content": "case 'StructuresPage':",
          "module": "other"
        },
        {
          "file": "src/components/tabs/TabManagerProduction.js",
          "line": 224,
          "content": "// Afficher la liste unifiée des contacts (structures + personnes)",
          "module": "other"
        },
        {
          "file": "src/components/tabs/TabManagerProduction.js",
          "line": 226,
          "content": "case 'StructureDetailsPage':",
          "module": "other"
        },
        {
          "file": "src/components/tabs/TabManagerProduction.js",
          "line": 227,
          "content": "// Afficher les détails d'une structure (maintenant c'est un contact de type structure)",
          "module": "other"
        },
        {
          "file": "src/components/tabs/TabManagerProduction.js",
          "line": 230,
          "content": "id={activeTab.params?.structureId}",
          "module": "other"
        },
        {
          "file": "src/components/tabs/TabManagerProduction.js",
          "line": 233,
          "content": "// Afficher les détails d'un contact (structure ou personne)",
          "module": "other"
        },
        {
          "file": "src/components/ui/AssociatePersonModal.js",
          "line": 10,
          "content": "* Modal pour associer une personne existante à une structure",
          "module": "other"
        },
        {
          "file": "src/components/ui/AssociatePersonModal.js",
          "line": 12,
          "content": "function AssociatePersonModal({ isOpen, onClose, onAssociate, structureId, allowMultiple = true, existingPersonIds = [] }) {",
          "module": "other"
        },
        {
          "file": "src/components/ui/EntityCard.example.js",
          "line": 15,
          "content": "const handleStructureClick = (id) => navigate(`/structures/${id}`);",
          "module": "other"
        },
        {
          "file": "src/components/ui/EntityCard.example.js",
          "line": 43,
          "content": "{/* Structure */}",
          "module": "other"
        },
        {
          "file": "src/components/ui/EntityCard.example.js",
          "line": 45,
          "content": "entityType=\"structure\"",
          "module": "other"
        },
        {
          "file": "src/components/ui/EntityCard.example.js",
          "line": 48,
          "content": "onClick={() => handleStructureClick('struct-789')}",
          "module": "other"
        },
        {
          "file": "src/components/ui/EntityCard.example.js",
          "line": 87,
          "content": "entityType=\"structure\"",
          "module": "other"
        },
        {
          "file": "src/components/ui/EntityCard.example.js",
          "line": 90,
          "content": "onClick={() => handleStructureClick('struct-long')}",
          "module": "other"
        },
        {
          "file": "src/components/ui/EntityCard.js",
          "line": 10,
          "content": "* @param {string} props.entityType - Type d'entité ('artiste', 'contact', 'structure', 'lieu', 'concert')",
          "module": "other"
        },
        {
          "file": "src/components/ui/EntityCard.js",
          "line": 43,
          "content": "structure: {",
          "module": "other"
        },
        {
          "file": "src/components/ui/EntityCard.js",
          "line": 44,
          "content": "colorClass: styles.entityStructure,",
          "module": "other"
        },
        {
          "file": "src/components/ui/EntityCard.js",
          "line": 47,
          "content": "defaultSubtitle: 'Structure'",
          "module": "other"
        },
        {
          "file": "src/components/ui/EntityCard.js",
          "line": 148,
          "content": "entityType: PropTypes.oneOf(['artiste', 'contact', 'structure', 'lieu', 'concert']).isRequired,",
          "module": "other"
        },
        {
          "file": "src/components/ui/EntitySearchField.js",
          "line": 160,
          "content": "{entity.structure && <span className={styles.entityStructure}>{entity.structure}</span>}",
          "module": "other"
        },
        {
          "file": "src/components/ui/EntitySearchField.js",
          "line": 184,
          "content": "{localSelectedEntity.structure && (",
          "module": "other"
        },
        {
          "file": "src/components/ui/EntitySearchField.js",
          "line": 185,
          "content": "<div className={styles.entityStructure}>{localSelectedEntity.structure}</div>",
          "module": "other"
        },
        {
          "file": "src/components/ui/EntitySelector.js",
          "line": 74,
          "content": "structures: {",
          "module": "other"
        },
        {
          "file": "src/components/ui/EntitySelector.js",
          "line": 75,
          "content": "collection: 'structures',",
          "module": "other"
        },
        {
          "file": "src/components/ui/LegalInfoSection.js",
          "line": 42,
          "content": "type: 'Type de structure',",
          "module": "other"
        },
        {
          "file": "src/components/ui/LegalInfoSection.js",
          "line": 77,
          "content": "// Options pour les types de structure",
          "module": "other"
        },
        {
          "file": "src/components/ui/LegalInfoSection.js",
          "line": 142,
          "content": "{structureTypes.map(option => (",
          "module": "other"
        },
        {
          "file": "src/components/ui/ListWithFilters.js",
          "line": 188,
          "content": "// Détecter et aplatir les structures imbriquées",
          "module": "other"
        },
        {
          "file": "src/components/ui/ListWithFilters.js",
          "line": 190,
          "content": "console.warn(`⚠️ Structure imbriquée détectée pour contact ${item.id}`);",
          "module": "other"
        },
        {
          "file": "src/components/ui/ListWithFilters.js",
          "line": 196,
          "content": "structures: item.structures || item.contact.structures || [],",
          "module": "other"
        },
        {
          "file": "src/components/ui/ListWithFilters.js",
          "line": 203,
          "content": "console.warn(`⚠️ Structure imbriquée détectée pour lieu ${item.id}`);",
          "module": "other"
        },
        {
          "file": "src/components/ui/ListWithFilters.js",
          "line": 210,
          "content": "structures: item.structures || item.lieu.structures || [],",
          "module": "other"
        },
        {
          "file": "src/components/ui/ListWithFilters.js",
          "line": 216,
          "content": "console.warn(`⚠️ Structure imbriquée détectée pour artiste ${item.id}`);",
          "module": "other"
        },
        {
          "file": "src/components/ui/ListWithFilters.js",
          "line": 225,
          "content": "if (entityType === 'structures' && item.structure && typeof item.structure === 'object') {",
          "module": "other"
        },
        {
          "file": "src/components/ui/ListWithFilters.js",
          "line": 226,
          "content": "console.warn(`⚠️ Structure imbriquée détectée pour structure ${item.id}`);",
          "module": "other"
        },
        {
          "file": "src/components/ui/ListWithFilters.js",
          "line": 228,
          "content": "...item.structure,",
          "module": "other"
        },
        {
          "file": "src/components/ui/ListWithFilters.js",
          "line": 339,
          "content": "// 🔍 DEBUG: Voir la structure des données",
          "module": "other"
        },
        {
          "file": "src/components/ui/ListWithFilters.js",
          "line": 341,
          "content": "console.log('🔍 DEBUG Structure du premier élément:', {",
          "module": "other"
        },
        {
          "file": "src/components/ui/ListWithFilters.js",
          "line": 360,
          "content": "structureId: loadedItems[0].structureId,",
          "module": "other"
        },
        {
          "file": "src/components/ui/ResponsiveList.js",
          "line": 96,
          "content": "...(entityType === 'structures' && {",
          "module": "other"
        },
        {
          "file": "src/config/entityConfigurations.js",
          "line": 175,
          "content": "subtitle: (prog) => prog.structure?.nom || prog.fonction || '',",
          "module": "other"
        },
        {
          "file": "src/config/entityConfigurations.js",
          "line": 194,
          "content": "id: 'structure',",
          "module": "other"
        },
        {
          "file": "src/config/entityConfigurations.js",
          "line": 198,
          "content": "relation: 'structure',",
          "module": "other"
        },
        {
          "file": "src/config/entityConfigurations.js",
          "line": 233,
          "content": "structure: {",
          "module": "other"
        },
        {
          "file": "src/config/entityConfigurations.js",
          "line": 234,
          "content": "collection: 'structures',",
          "module": "other"
        },
        {
          "file": "src/config/entityConfigurations.js",
          "line": 237,
          "content": "displayName: 'Structure',",
          "module": "other"
        },
        {
          "file": "src/config/entityConfigurations.js",
          "line": 344,
          "content": "structure: {",
          "module": "other"
        },
        {
          "file": "src/config/entityConfigurations.js",
          "line": 345,
          "content": "collection: 'structures',",
          "module": "other"
        },
        {
          "file": "src/config/entityConfigurations.js",
          "line": 348,
          "content": "displayName: 'Structure',",
          "module": "other"
        },
        {
          "file": "src/config/entityConfigurations.js",
          "line": 355,
          "content": "// Configuration pour les Structures",
          "module": "other"
        },
        {
          "file": "src/config/entityConfigurations.js",
          "line": 357,
          "content": "title: 'Structure',",
          "module": "other"
        },
        {
          "file": "src/config/entityConfigurations.js",
          "line": 359,
          "content": "pluralTitle: 'Structures',",
          "module": "other"
        },
        {
          "file": "src/config/entityConfigurations.js",
          "line": 374,
          "content": "{ key: 'type', label: 'Type de structure', type: 'text' },",
          "module": "other"
        },
        {
          "file": "src/config/entityConfigurations.js",
          "line": 430,
          "content": "inverseField: 'structureId',",
          "module": "other"
        },
        {
          "file": "src/config/entityConfigurations.js",
          "line": 438,
          "content": "inverseField: 'structureId',",
          "module": "other"
        },
        {
          "file": "src/config/sidebarConfig.js",
          "line": 63,
          "content": "id: 'structures',",
          "module": "other"
        },
        {
          "file": "src/config/sidebarConfig.js",
          "line": 66,
          "content": "path: '/structures'",
          "module": "other"
        },
        {
          "file": "src/config/tagsHierarchy.js",
          "line": 3,
          "content": "* Structure en arborescence avec catégories et sous-catégories",
          "module": "other"
        },
        {
          "file": "src/context/ContactModalsContext.js",
          "line": 15,
          "content": "const [showStructureModal, setShowStructureModal] = useState(false);",
          "module": "other"
        },
        {
          "file": "src/context/ContactModalsContext.js",
          "line": 21,
          "content": "const openStructureModal = () => {",
          "module": "other"
        },
        {
          "file": "src/context/ContactModalsContext.js",
          "line": 25,
          "content": "const closeStructureModal = () => {",
          "module": "other"
        },
        {
          "file": "src/context/ContactModalsContext.js",
          "line": 50,
          "content": "showStructureModal,",
          "module": "other"
        },
        {
          "file": "src/context/ContactModalsContext.js",
          "line": 55,
          "content": "openStructureModal,",
          "module": "other"
        },
        {
          "file": "src/context/ModalsContext.js",
          "line": 16,
          "content": "structureCreation: false,",
          "module": "other"
        },
        {
          "file": "src/context/ModalsContext.js",
          "line": 20,
          "content": "const openStructureCreationModal = () => {",
          "module": "other"
        },
        {
          "file": "src/context/ModalsContext.js",
          "line": 21,
          "content": "setActiveModals(prev => ({ ...prev, structureCreation: true }));",
          "module": "other"
        },
        {
          "file": "src/context/ModalsContext.js",
          "line": 24,
          "content": "const closeStructureCreationModal = () => {",
          "module": "other"
        },
        {
          "file": "src/context/ModalsContext.js",
          "line": 25,
          "content": "setActiveModals(prev => ({ ...prev, structureCreation: false }));",
          "module": "other"
        },
        {
          "file": "src/context/ModalsContext.js",
          "line": 38,
          "content": "openStructureCreationModal,",
          "module": "other"
        },
        {
          "file": "src/context/TabsContext.js",
          "line": 177,
          "content": "const openStructureTab = useCallback((structureId, structureName) => {",
          "module": "other"
        },
        {
          "file": "src/context/TabsContext.js",
          "line": 179,
          "content": "id: `structure-${structureId}`,",
          "module": "other"
        },
        {
          "file": "src/context/TabsContext.js",
          "line": 181,
          "content": "path: `/structures/${structureId}`,",
          "module": "other"
        },
        {
          "file": "src/context/TabsContext.js",
          "line": 183,
          "content": "params: { structureId },",
          "module": "other"
        },
        {
          "file": "src/context/TabsContext.js",
          "line": 229,
          "content": "const openStructuresListTab = useCallback(() => {",
          "module": "other"
        },
        {
          "file": "src/context/TabsContext.js",
          "line": 231,
          "content": "id: 'structures-list',",
          "module": "other"
        },
        {
          "file": "src/context/TabsContext.js",
          "line": 233,
          "content": "path: '/structures',",
          "module": "other"
        },
        {
          "file": "src/context/TabsContext.js",
          "line": 260,
          "content": "const tabId = prefilledData.structureId ? `date-creation-${prefilledData.structureId}` : 'date-creation';",
          "module": "other"
        },
        {
          "file": "src/context/TabsContext.js",
          "line": 261,
          "content": "const tabTitle = prefilledData.structureName ? `Nouvelle Date - ${prefilledData.structureName}` : 'Nouvelle Date';",
          "module": "other"
        },
        {
          "file": "src/context/TabsContext.js",
          "line": 324,
          "content": "openStructureTab,",
          "module": "other"
        },
        {
          "file": "src/context/TabsContext.js",
          "line": 329,
          "content": "openStructuresListTab,",
          "module": "other"
        },
        {
          "file": "src/context/TabsContext.js",
          "line": 349,
          "content": "openStructureTab,",
          "module": "other"
        },
        {
          "file": "src/context/TabsContext.js",
          "line": 354,
          "content": "openStructuresListTab,",
          "module": "other"
        },
        {
          "file": "src/debug/EntrepriseIdFixer.js",
          "line": 98,
          "content": "// 3. Optionnel : Corriger aussi les concerts et structures si nécessaire",
          "module": "other"
        },
        {
          "file": "src/debug/EntrepriseIdFixer.js",
          "line": 134,
          "content": "// 4. Structures",
          "module": "other"
        },
        {
          "file": "src/debug/EntrepriseIdFixer.js",
          "line": 135,
          "content": "console.log('\\n🏛️ Vérification des structures...');",
          "module": "other"
        },
        {
          "file": "src/debug/EntrepriseIdFixer.js",
          "line": 136,
          "content": "const allStructuresQuery = query(collection(db, 'structures'));",
          "module": "other"
        },
        {
          "file": "src/debug/EntrepriseIdFixer.js",
          "line": 139,
          "content": "let structuresFixed = 0;",
          "module": "other"
        },
        {
          "file": "src/debug/EntrepriseIdFixer.js",
          "line": 142,
          "content": "allStructuresSnapshot.forEach(docSnapshot => {",
          "module": "other"
        },
        {
          "file": "src/debug/EntrepriseIdFixer.js",
          "line": 145,
          "content": "structuresToFix.push({",
          "module": "other"
        },
        {
          "file": "src/debug/EntrepriseIdFixer.js",
          "line": 152,
          "content": "console.log(`Structures à corriger: ${structuresToFix.length}`);",
          "module": "other"
        },
        {
          "file": "src/debug/EntrepriseIdFixer.js",
          "line": 153,
          "content": "fixLog.push(`Structures à corriger: ${structuresToFix.length}`);",
          "module": "other"
        },
        {
          "file": "src/debug/EntrepriseIdFixer.js",
          "line": 155,
          "content": "// Corriger les structures",
          "module": "other"
        },
        {
          "file": "src/debug/EntrepriseIdFixer.js",
          "line": 158,
          "content": "await updateDoc(doc(db, 'structures', structure.id), {",
          "module": "other"
        },
        {
          "file": "src/debug/EntrepriseIdFixer.js",
          "line": 161,
          "content": "structuresFixed++;",
          "module": "other"
        },
        {
          "file": "src/debug/EntrepriseIdFixer.js",
          "line": 162,
          "content": "console.log(`✅ Structure corrigée: ${structure.nom} (${structure.id})`);",
          "module": "other"
        },
        {
          "file": "src/debug/EntrepriseIdFixer.js",
          "line": 165,
          "content": "console.error(`❌ Erreur structure ${structure.id}:`, error);",
          "module": "other"
        },
        {
          "file": "src/debug/EntrepriseIdFixer.js",
          "line": 174,
          "content": "structures: { total: structuresToFix.length, fixed: structuresFixed }",
          "module": "other"
        },
        {
          "file": "src/debug/EntrepriseIdFixer.js",
          "line": 181,
          "content": "console.log(`Structures: ${structuresFixed}/${structuresToFix.length} corrigés`);",
          "module": "other"
        },
        {
          "file": "src/debug/EntrepriseIdFixer.js",
          "line": 235,
          "content": "<p><strong>Structures:</strong> {fixResults.structures.fixed}/{fixResults.structures.total} corrigés</p>",
          "module": "other"
        },
        {
          "file": "src/hooks/artistes/useArtisteDetails.js",
          "line": 62,
          "content": "name: 'structure',",
          "module": "other"
        },
        {
          "file": "src/hooks/artistes/useArtisteDetails.js",
          "line": 64,
          "content": "idField: 'structureId',",
          "module": "other"
        },
        {
          "file": "src/hooks/artistes/useArtisteDetails.js",
          "line": 66,
          "content": "essential: true // La structure est essentielle pour l'affichage de l'artiste",
          "module": "other"
        },
        {
          "file": "src/hooks/artistes/useArtisteDetails.js",
          "line": 244,
          "content": "const handleStructureChange = useCallback((structure) => {",
          "module": "other"
        },
        {
          "file": "src/hooks/artistes/useArtisteDetails.js",
          "line": 246,
          "content": "structureId: structure?.id || null,",
          "module": "other"
        },
        {
          "file": "src/hooks/artistes/useArtisteDetails.js",
          "line": 247,
          "content": "structure: structure || null",
          "module": "other"
        },
        {
          "file": "src/hooks/artistes/useArtisteDetails.js",
          "line": 280,
          "content": "handleStructureChange,",
          "module": "other"
        },
        {
          "file": "src/hooks/artistes/useArtisteDetails.js",
          "line": 284,
          "content": "structure: detailsHook.relatedData?.structure || null,",
          "module": "other"
        },
        {
          "file": "src/hooks/artistes/useArtisteDetails.js",
          "line": 285,
          "content": "loadingStructure: detailsHook.loadingRelated?.structure || false,",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useEntitySearch.js",
          "line": 329,
          "content": "// Structure (avec préfixe pour éviter imbrication)",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useEntitySearch.js",
          "line": 331,
          "content": "structureNom: '',",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useEntitySearch.js",
          "line": 333,
          "content": "structureSiret: '',",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useEntitySearch.js",
          "line": 335,
          "content": "structureCodePostal: '',",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useEntitySearch.js",
          "line": 337,
          "content": "structurePays: 'France',",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useEntitySearch.js",
          "line": 339,
          "content": "structureType: '',",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useEntitySearch.js",
          "line": 380,
          "content": "case 'structures':",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useEntitySearch.js",
          "line": 453,
          "content": "case 'structures':",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useFormSubmission.js",
          "line": 127,
          "content": "// APLATISSEMENT FORCÉ pour les contacts avec structure imbriquée",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useFormSubmission.js",
          "line": 146,
          "content": "// Champs structure si présents",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useFormSubmission.js",
          "line": 148,
          "content": "structureRaisonSociale: processedData.structure.raisonSociale || '',",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useFormSubmission.js",
          "line": 150,
          "content": "structureType: processedData.structure.type || '',",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useFormSubmission.js",
          "line": 152,
          "content": "structureCodePostal: processedData.structure.codePostal || '',",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useFormSubmission.js",
          "line": 154,
          "content": "structurePays: processedData.structure.pays || 'France',",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useFormSubmission.js",
          "line": 156,
          "content": "structureNumeroIntracommunautaire: processedData.structure.numeroIntracommunautaire || ''",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useFormSubmission.js",
          "line": 158,
          "content": "structureId: processedData.structureId || '',",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useFormSubmission.js",
          "line": 159,
          "content": "structureNom: processedData.structureNom || '',",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useFormSubmission.js",
          "line": 160,
          "content": "structureRaisonSociale: processedData.structureRaisonSociale || '',",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useFormSubmission.js",
          "line": 162,
          "content": "structureType: processedData.structureType || '',",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useFormSubmission.js",
          "line": 163,
          "content": "structureAdresse: processedData.structureAdresse || '',",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useFormSubmission.js",
          "line": 165,
          "content": "structureVille: processedData.structureVille || '',",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useFormSubmission.js",
          "line": 166,
          "content": "structurePays: processedData.structurePays || 'France',",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useFormSubmission.js",
          "line": 168,
          "content": "structureNumeroIntracommunautaire: processedData.structureNumeroIntracommunautaire || ''",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useFormSubmission.js",
          "line": 173,
          "content": "structureId: processedData.structureId || '',",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useSafeRelations.js",
          "line": 36,
          "content": "structure: { collection: 'structures', field: 'structureId', isArray: false, reverseField: 'concertsIds' }",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useSafeRelations.js",
          "line": 47,
          "content": "structure: { collection: 'structures', field: 'structureId', isArray: false }",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useSafeRelations.js",
          "line": 49,
          "content": "structure: {",
          "module": "other"
        },
        {
          "file": "src/hooks/common/useSafeRelations.js",
          "line": 50,
          "content": "contacts: { collection: 'contacts', field: 'contactsIds', isArray: true, reverseField: 'structureId' },",
          "module": "other"
        },
        {
          "file": "src/hooks/concerts/useConcertAssociations.js",
          "line": 93,
          "content": "// Mise à jour des associations structure-concert",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertAssociations.js",
          "line": 94,
          "content": "const updateStructureAssociation = async (concertId, concertData, newStructureId, oldStructureId, currentLieu) => {",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertAssociations.js",
          "line": 96,
          "content": "// Si une nouvelle structure est sélectionnée",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertAssociations.js",
          "line": 98,
          "content": "const structureRef = doc(db, 'structures', newStructureId);",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertAssociations.js",
          "line": 99,
          "content": "const structureDoc = await getDoc(structureRef);",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertAssociations.js",
          "line": 101,
          "content": "if (structureDoc.exists()) {",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertAssociations.js",
          "line": 102,
          "content": "// Ajouter le concert à la liste des concerts associés de la structure",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertAssociations.js",
          "line": 110,
          "content": "await updateDoc(structureRef, {",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertAssociations.js",
          "line": 117,
          "content": "// Si une ancienne structure était associée et a changé",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertAssociations.js",
          "line": 118,
          "content": "if (oldStructureId && oldStructureId !== newStructureId) {",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertAssociations.js",
          "line": 120,
          "content": "const oldStructureDoc = await getDoc(oldStructureRef);",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertAssociations.js",
          "line": 122,
          "content": "if (oldStructureDoc.exists()) {",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertAssociations.js",
          "line": 124,
          "content": "const oldStructureData = oldStructureDoc.data();",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertAssociations.js",
          "line": 125,
          "content": "const updatedConcerts = (oldStructureData.concertsAssocies || [])",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertAssociations.js",
          "line": 128,
          "content": "await updateDoc(oldStructureRef, {",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertAssociations.js",
          "line": 135,
          "content": "console.error('Erreur lors de la mise à jour des associations structure-concert:', error);",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertAssociations.js",
          "line": 185,
          "content": "updateStructureAssociation,",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 73,
          "content": "const [initialStructureId, setInitialStructureId] = useState(null);",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 127,
          "content": "name: 'structure',",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 129,
          "content": "idField: 'structureId',",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 130,
          "content": "alternativeIdFields: ['structure'], // Champs alternatifs pour compatibilité",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 133,
          "content": "essential: true, // La structure est essentielle pour debug",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 134,
          "content": "loadRelated: false // 🚫 SÉCURITÉ MAXIMALE: Empêche la structure de charger ses relations",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 161,
          "content": "if (data.structureId) {",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 162,
          "content": "setInitialStructureId(data.structureId);",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 203,
          "content": "setInitialStructureId(data.structureId || null);",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 239,
          "content": "// ✅ FINAL: Créer les customQueries avec la vraie logique de structure",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 241,
          "content": "structure: async (concertData) => {",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 242,
          "content": "console.log('🏢 Structure customQuery appelée avec concertData:', concertData);",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 243,
          "content": "debugLog('[useConcertDetails] customQuery structure appelée', 'info', 'useConcertDetails');",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 245,
          "content": "// D'abord vérifier si le concert a directement un structureId",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 249,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', concertData.structureId));",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 251,
          "content": "const result = { id: structureDoc.id, ...structureDoc.data() };",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 256,
          "content": "console.error('Erreur lors du chargement direct de la structure:', err);",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 263,
          "content": "console.log('🏢 Pas de contact, pas de structure');",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 264,
          "content": "debugLog('[useConcertDetails] Pas de contact, pas de structure', 'info', 'useConcertDetails');",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 279,
          "content": "if (!contactData.structureId) {",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 280,
          "content": "console.log('🏢 Contact sans structure');",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 281,
          "content": "debugLog('[useConcertDetails] Contact sans structure', 'info', 'useConcertDetails');",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 285,
          "content": "// Charger la structure du contact",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 286,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', contactData.structureId));",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 288,
          "content": "const result = { id: structureDoc.id, ...structureDoc.data() };",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 290,
          "content": "debugLog('[useConcertDetails] Structure trouvée via contact', 'info', 'useConcertDetails');",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 294,
          "content": "console.log('🏢 Structure du contact non trouvée');",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 297,
          "content": "console.error('🏢 Erreur lors du chargement de la structure via contact:', err);",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 303,
          "content": "return { id: 'test', nom: 'Test Structure' };",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 436,
          "content": "if (relatedData.structure?.id || initialStructureId) {",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 438,
          "content": "stableAssociations.updateStructureAssociation(",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 441,
          "content": "relatedData.structure?.id || null,",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 466,
          "content": "}, [id, initialContactIds, initialArtisteId, initialStructureId, initialLieuId, genericDetails?.relatedData]); // Dépendances réduites",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 526,
          "content": "// Structure",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 527,
          "content": "if (relatedData.structure?.id || initialStructureId) {",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 528,
          "content": "const structureId = relatedData.structure?.id || initialStructureId;",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 533,
          "content": "const docRef = doc(db, 'structures', structureId);",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 535,
          "content": "results.structure = docSnap.exists() ? { id: structureId, ...docSnap.data() } : null;",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 537,
          "content": "console.error(\"Erreur lors du chargement de la structure:\", error);",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 567,
          "content": "}, [initialContactIds, initialArtisteId, initialStructureId, initialLieuId, genericDetails?.relatedData]); // Dépendances réduites",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 996,
          "content": "structure: genericDetails?.relatedData?.structure || null,",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 1039,
          "content": "setStructure: (structure) => genericDetails?.setRelatedEntity('structure', structure),",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 1062,
          "content": "structureSearch: {",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 1063,
          "content": "selectedEntity: genericDetails?.relatedData?.structure || null,",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetails.js",
          "line": 1064,
          "content": "setSelectedEntity: (structure) => genericDetails?.setRelatedEntity('structure', structure),",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 74,
          "content": "name: 'structure',",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 76,
          "content": "idField: 'structureId',",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 77,
          "content": "alternativeIdFields: ['structure'],",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 80,
          "content": "essential: true // La structure est essentielle pour debug",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 103,
          "content": "// Ajouter les customQueries pour la structure",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 105,
          "content": "structure: async (concertData) => {",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 106,
          "content": "console.log('🏢 Structure customQuery appelée avec concertData:', concertData);",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 107,
          "content": "debugLog('[useConcertDetailsFixed] customQuery structure appelée', 'info', 'useConcertDetailsFixed');",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 109,
          "content": "// D'abord vérifier si le concert a directement un structureId",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 113,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', concertData.structureId));",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 115,
          "content": "const result = { id: structureDoc.id, ...structureDoc.data() };",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 120,
          "content": "console.error('Erreur lors du chargement direct de la structure:', err);",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 133,
          "content": "console.log('🏢 Pas de contact, pas de structure');",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 134,
          "content": "debugLog('[useConcertDetailsFixed] Pas de contact, pas de structure', 'info', 'useConcertDetailsFixed');",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 149,
          "content": "if (!contactData.structureId) {",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 150,
          "content": "console.log('🏢 Contact sans structure');",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 151,
          "content": "debugLog('[useConcertDetailsFixed] Contact sans structure', 'info', 'useConcertDetailsFixed');",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 155,
          "content": "// Charger la structure du contact",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 156,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', contactData.structureId));",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 158,
          "content": "const result = { id: structureDoc.id, ...structureDoc.data() };",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 160,
          "content": "debugLog('[useConcertDetailsFixed] Structure trouvée via contact', 'info', 'useConcertDetailsFixed');",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 164,
          "content": "console.log('🏢 Structure du contact non trouvée');",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 167,
          "content": "console.error('🏢 Erreur lors du chargement de la structure via contact:', err);",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 236,
          "content": "structure: genericDetails.relatedData?.structure",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 287,
          "content": "structure: genericDetails.relatedData?.structure,",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsFixed.js",
          "line": 311,
          "content": "setStructure: genericDetails.setStructure,",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsWithRoles.js",
          "line": 58,
          "content": "name: 'structure',",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsWithRoles.js",
          "line": 60,
          "content": "idField: 'structureId',",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertDetailsWithRoles.js",
          "line": 64,
          "content": "customQuery: originalHookResult.customQueries?.structure",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertForm.js",
          "line": 56,
          "content": "console.log('[WORKFLOW_TEST] 2. Sauvegarde du concert avec structureId - transformation des données', {",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertForm.js",
          "line": 58,
          "content": "structureNom: data.structureNom",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertFormWithRelations.js",
          "line": 23,
          "content": "const [structure, setStructure] = useState(null);",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertFormWithRelations.js",
          "line": 79,
          "content": "// Charger la structure",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertFormWithRelations.js",
          "line": 81,
          "content": "const structDoc = await getDoc(doc(db, 'structures', baseHook.formData.structureId));",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertFormWithRelations.js",
          "line": 83,
          "content": "setStructure({ id: structDoc.id, ...structDoc.data() });",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertFormWithRelations.js",
          "line": 86,
          "content": "setStructure(null);",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertFormWithRelations.js",
          "line": 104,
          "content": "baseHook.formData?.structureId,",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertFormWithRelations.js",
          "line": 139,
          "content": "const handleStructureChange = (newStructure) => {",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertFormWithRelations.js",
          "line": 140,
          "content": "console.log('[WORKFLOW_TEST] 2. Sauvegarde du concert avec structureId - gestion de la structure:', newStructure);",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertFormWithRelations.js",
          "line": 143,
          "content": "if (baseHook.handleStructureChange) {",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertFormWithRelations.js",
          "line": 144,
          "content": "baseHook.handleStructureChange(newStructure);",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertFormWithRelations.js",
          "line": 147,
          "content": "console.log('[WORKFLOW_TEST] 2. Sauvegarde du concert avec structureId - mise à jour manuelle des données');",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertFormWithRelations.js",
          "line": 150,
          "content": "structureId: newStructure?.id || null,",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertFormWithRelations.js",
          "line": 151,
          "content": "structureNom: newStructure?.nom || newStructure?.raisonSociale || ''",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertFormWithRelations.js",
          "line": 164,
          "content": "handleStructureChange,",
          "module": "concerts"
        },
        {
          "file": "src/hooks/concerts/useConcertFormWithRelations.js",
          "line": 170,
          "content": "structure,",
          "module": "concerts"
        },
        {
          "file": "src/hooks/contacts/useAdresseValidation.js",
          "line": 107,
          "content": "* @usedBy ContactForm, LieuForm, StructureForm, AdresseInput",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActions.js",
          "line": 7,
          "content": "export function useContactActions(contactId, contactType = 'structure') {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 13,
          "content": "export function useContactActionsRelational(contactId, contactType = 'structure') {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 18,
          "content": "updateStructure,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 20,
          "content": "associatePersonToStructure,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 24,
          "content": "getStructureWithPersonnes,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 25,
          "content": "getPersonneWithStructures",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 33,
          "content": "const currentTags = contactType === 'structure'",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 35,
          "content": ": getPersonneWithStructures(contactId)?.tags || [];",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 41,
          "content": "if (contactType === 'structure') {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 56,
          "content": "}, [contactId, contactType, updateStructure, updatePersonne, getStructureWithPersonnes, getPersonneWithStructures]);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 62,
          "content": "if (contactType === 'structure') {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 64,
          "content": "currentTags = structure?.tags || [];",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 66,
          "content": "const personne = getPersonneWithStructures(contactId);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 77,
          "content": "}, [contactId, contactType, handleTagsChange, getStructureWithPersonnes, getPersonneWithStructures]);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 87,
          "content": "if (contactType !== 'structure') {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 88,
          "content": "throw new Error('Association uniquement possible pour les structures');",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 92,
          "content": "const structure = getStructureWithPersonnes(contactId);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 93,
          "content": "const existingPersonIds = structure?.personnes?.map(p => p.id) || [];",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 106,
          "content": "associatePersonToStructure(contactId, person.id, {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 119,
          "content": "}, [contactId, contactType, associatePersonToStructure, getStructureWithPersonnes]);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 142,
          "content": "// Si une fonction est fournie et qu'on est dans une structure, mettre à jour la liaison",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 144,
          "content": "const structure = getStructureWithPersonnes(contactId);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 145,
          "content": "const personne = structure?.personnes?.find(p => p.id === updatedPersonData.id);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 159,
          "content": "}, [contactId, contactType, updatePersonne, updateLiaison, getStructureWithPersonnes]);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 163,
          "content": "if (contactType !== 'structure') {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 164,
          "content": "throw new Error('Dissociation uniquement possible depuis une structure');",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 169,
          "content": "`Êtes-vous sûr de vouloir dissocier \"${personDisplayName}\" de cette structure ?\\n\\n` +",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 178,
          "content": "const structure = getStructureWithPersonnes(contactId);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 179,
          "content": "const personneWithLiaison = structure?.personnes?.find(p => p.id === personne.id);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 186,
          "content": "await dissociatePersonFromStructure(personneWithLiaison.liaison.id);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 188,
          "content": "// Marquer la personne comme personne libre si elle n'a plus de structure",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 190,
          "content": "const activeLiaisons = personneStructures?.structures?.filter(s => s.liaison.actif) || [];",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 196,
          "content": "alert(`\"${personDisplayName}\" a été dissocié(e) de la structure avec succès.`);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 202,
          "content": "}, [contactId, contactType, dissociatePersonFromStructure, getStructureWithPersonnes, getPersonneWithStructures, currentUser]);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 218,
          "content": "if (contactType !== 'structure') {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 219,
          "content": "throw new Error('Contact prioritaire uniquement pour les structures');",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 232,
          "content": "const structure = getStructureWithPersonnes(contactId);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 233,
          "content": "const personneWithLiaison = structure?.personnes?.find(p => p.id === personne.id);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 248,
          "content": "}, [contactId, updateLiaison, getStructureWithPersonnes]);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 252,
          "content": "const structure = getStructureWithPersonnes(contactId);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 253,
          "content": "const personneWithLiaison = structure?.personnes?.find(p => p.id === personne.id);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 268,
          "content": "}, [contactId, updateLiaison, getStructureWithPersonnes]);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 272,
          "content": "if (contactType !== 'structure') {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 273,
          "content": "throw new Error('Statut client uniquement pour les structures');",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 276,
          "content": "// Utiliser updateStructure au lieu de structuresService",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 283,
          "content": "}, [contactId, contactType, currentUser, updateStructure]);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 299,
          "content": "if (contactType === 'structure') {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 301,
          "content": "existingComments = structure?.commentaires || [];",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 303,
          "content": "const personne = getPersonneWithStructures(contactId);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 325,
          "content": "if (contactType === 'structure') {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 340,
          "content": "}, [contactId, contactType, currentUser, updateStructure, updatePersonne, getStructureWithPersonnes, getPersonneWithStructures]);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 355,
          "content": "if (contactType === 'structure') {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 357,
          "content": "existingComments = structure?.commentaires || [];",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 359,
          "content": "const personne = getPersonneWithStructures(contactId);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 373,
          "content": "if (contactType === 'structure') {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactActionsRelational.js",
          "line": 388,
          "content": "}, [contactId, contactType, updateStructure, updatePersonne, getStructureWithPersonnes, getPersonneWithStructures]);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactDetails.js",
          "line": 25,
          "content": "// État pour la structure associée",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactDetails.js",
          "line": 27,
          "content": "const [loadingStructure, setLoadingStructure] = useState(false);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactDetails.js",
          "line": 28,
          "content": "const [errorStructure, setErrorStructure] = useState(null);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactDetails.js",
          "line": 374,
          "content": "// Charger la structure associée au contact",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactDetails.js",
          "line": 376,
          "content": "const fetchStructureAssociee = async () => {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactDetails.js",
          "line": 380,
          "content": "setLoadingStructure(true);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactDetails.js",
          "line": 383,
          "content": "console.log(`[DEBUG] useContactDetails - structureId:`, details.entity.structureId);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactDetails.js",
          "line": 385,
          "content": "// Vérifier si le contact a un structureId",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactDetails.js",
          "line": 387,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', details.entity.structureId));",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactDetails.js",
          "line": 389,
          "content": "const structureData = { id: structureDoc.id, ...structureDoc.data() };",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactDetails.js",
          "line": 391,
          "content": "console.log(`[DIAGNOSTIC] useContactDetails - Structure trouvée:`, structureData);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactDetails.js",
          "line": 393,
          "content": "console.log(`[DIAGNOSTIC] useContactDetails - Structure ${details.entity.structureId} n'existe pas`);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactDetails.js",
          "line": 397,
          "content": "console.log(`[DIAGNOSTIC] useContactDetails - Contact sans structureId`);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactDetails.js",
          "line": 402,
          "content": "console.error('[ERROR] useContactDetails - Erreur lors du chargement de la structure:', error);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactDetails.js",
          "line": 404,
          "content": "setStructure(null);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactDetails.js",
          "line": 406,
          "content": "setLoadingStructure(false);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactDetails.js",
          "line": 410,
          "content": "fetchStructureAssociee();",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactDetails.js",
          "line": 416,
          "content": "structure,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactDetails.js",
          "line": 418,
          "content": "errorStructure,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactDetails.js",
          "line": 434,
          "content": "structure: hookReturn.structure?.id,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactDetails.js",
          "line": 438,
          "content": "loadingStructure: hookReturn.loadingStructure,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactDirect.js",
          "line": 35,
          "content": "const isStructure = !data.prenom || data.entityType === 'structure';",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactDirect.js",
          "line": 36,
          "content": "setEntityType(isStructure ? 'structure' : 'contact');",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 59,
          "content": "// Validation de la structure si nécessaire",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 60,
          "content": "if (!data.structureId && !data.structureRaisonSociale) {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 61,
          "content": "errors['structureRaisonSociale'] = 'La raison sociale est requise si aucune structure n\\'est sélectionnée';",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 75,
          "content": "// STRUCTURE DÉFINITIVE - AUCUN OBJET IMBRIQUÉ",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 84,
          "content": "// Structure (avec préfixe, PAS dans un objet)",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 85,
          "content": "structureId: data.structureId || '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 86,
          "content": "structureNom: data.structureNom || data.structure?.nom || data.structureRaisonSociale || '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 87,
          "content": "structureRaisonSociale: data.structureRaisonSociale || data.structure?.raisonSociale || '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 89,
          "content": "structureAdresse: data.structureAdresse || data.structure?.adresse || '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 90,
          "content": "structureCodePostal: data.structureCodePostal || data.structure?.codePostal || '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 91,
          "content": "structureVille: data.structureVille || data.structure?.ville || '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 93,
          "content": "structureTva: data.structureTva || data.structure?.tva || '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 94,
          "content": "structureType: data.structureType || data.structure?.type || '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 95,
          "content": "structureNumeroIntracommunautaire: data.structureNumeroIntracommunautaire || data.structure?.numeroIntracommunautaire || '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 121,
          "content": "console.log('💾 SAUVEGARDE CONTACT - STRUCTURE FINALE:', contactData);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 166,
          "content": "// Gestion de la structure associée",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 168,
          "content": "console.log(`🔗 Création de la relation bidirectionnelle avec la structure`);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 172,
          "content": "targetType: 'structures',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 174,
          "content": "relationName: 'structure',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 204,
          "content": "// Fonction pour transformer les données aplaties en structure imbriquée pour le formulaire",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 210,
          "content": "// IMPORTANT: Ne plus créer de structures imbriquées",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 220,
          "content": "// Données de la structure avec préfixe",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 221,
          "content": "structureRaisonSociale: data.structureRaisonSociale || data.structureInfo?.raisonSociale || '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 222,
          "content": "structureType: data.structureType || data.structureInfo?.type || '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 224,
          "content": "structureCodePostal: data.structureCodePostal || data.structureInfo?.codePostal || '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 225,
          "content": "structureVille: data.structureVille || data.structureInfo?.ville || '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 226,
          "content": "structurePays: data.structurePays || data.structureInfo?.pays || 'France',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 228,
          "content": "structureTva: data.structureTva || data.structureInfo?.tva || '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 231,
          "content": "structureId: data.structureId || '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 232,
          "content": "structureNom: data.structureNom || '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 254,
          "content": "// Valeurs par défaut pour un nouveau contact - structure plate",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 260,
          "content": "structureId: '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 262,
          "content": "structureRaisonSociale: '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 264,
          "content": "structureAdresse: '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 266,
          "content": "structureVille: '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 268,
          "content": "structureSiret: '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 270,
          "content": "structureNumeroIntracommunautaire: '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 286,
          "content": "name: 'structure',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 288,
          "content": "idField: 'structureId',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 299,
          "content": "if (formHook.formData && (formHook.formData.contact || formHook.formData.structure)) {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 305,
          "content": "// Mettre à jour formData avec la structure plate",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 313,
          "content": "// Fonction pour sélectionner/désélectionner la structure",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 315,
          "content": "if (structure) {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 318,
          "content": "structureId: structure.id,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 322,
          "content": "// TODO: Charger les détails de la structure dans les données liées",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 324,
          "content": "// formHook.loadRelatedEntity('structure', structure.id);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 328,
          "content": "structureId: '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 338,
          "content": "structureVisible: true,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 366,
          "content": "// Fonction pour gérer les changements de structure principale (utilisée par useCompanySearch)",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 369,
          "content": "// Utiliser des champs PLATS avec le préfixe \"structure\"",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 372,
          "content": "structureId: company.id || '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 374,
          "content": "structureRaisonSociale: company.nom || company.raisonSociale || '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 376,
          "content": "structureAdresse: company.adresse || '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 378,
          "content": "structureVille: company.ville || '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 380,
          "content": "structurePays: company.pays || 'France'",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 383,
          "content": "// Réinitialiser les champs structure",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 386,
          "content": "structureId: '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 388,
          "content": "structureRaisonSociale: '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 390,
          "content": "structureAdresse: '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 392,
          "content": "structureVille: '',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 394,
          "content": "structurePays: 'France'",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 407,
          "content": "handleSelectStructure,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 414,
          "content": "structure: null,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactForm.js",
          "line": 416,
          "content": "handleStructureChange",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactSearchRelational.js",
          "line": 31,
          "content": "includeStructures = true,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactSearchRelational.js",
          "line": 38,
          "content": "structures,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactSearchRelational.js",
          "line": 57,
          "content": "// Ajouter les structures",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactSearchRelational.js",
          "line": 59,
          "content": "structures.forEach(structure => {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactSearchRelational.js",
          "line": 62,
          "content": "entityType: 'structure',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactSearchRelational.js",
          "line": 64,
          "content": "nom: structure.raisonSociale || 'Structure sans nom',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactSearchRelational.js",
          "line": 71,
          "content": "displayName: structure.raisonSociale || 'Structure sans nom',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactSearchRelational.js",
          "line": 80,
          "content": "structure: {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactSearchRelational.js",
          "line": 138,
          "content": "// Trouver les structures associées",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactSearchRelational.js",
          "line": 142,
          "content": "const structure = structures.find(s => s.id === liaison.structureId);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactSearchRelational.js",
          "line": 171,
          "content": "...personneStructures.map(s => s.raisonSociale),",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactSearchRelational.js",
          "line": 182,
          "content": "structures: personneStructures,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactSearchRelational.js",
          "line": 190,
          "content": "}, [structures, personnes, liaisons, currentOrganization, includeStructures, includePersonnes, includePersonnesLibres]);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactSearchRelational.js",
          "line": 247,
          "content": "const path = contact.entityType === 'structure' ?",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 6,
          "content": "import structuresService from '@/services/contacts/structuresService';",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 13,
          "content": "* Fournit une interface simple pour travailler avec structures, personnes et liaisons",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 20,
          "content": "const [structures, setStructures] = useState([]);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 44,
          "content": "// Abonnement aux structures",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 46,
          "content": "collection(db, 'structures'),",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 50,
          "content": "const unsubStructures = onSnapshot(structuresQuery, (snapshot) => {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 56,
          "content": "// DEBUG: Tracer les mises à jour Firebase pour les structures",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 65,
          "content": "setStructures(structuresData);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 67,
          "content": "unsubscribers.push(unsubStructures);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 122,
          "content": "// ==================== MÉTHODES STRUCTURES ====================",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 124,
          "content": "const createStructure = useCallback(async (data) => {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 128,
          "content": "const result = await structuresService.createStructure(",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 135,
          "content": "console.error('Erreur création structure:', error);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 140,
          "content": "const updateStructure = useCallback(async (structureId, updates) => {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 144,
          "content": "const result = await structuresService.updateStructure(",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 151,
          "content": "console.error('Erreur mise à jour structure:', error);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 156,
          "content": "const deleteStructure = useCallback(async (structureId) => {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 158,
          "content": "const result = await structuresService.deleteStructure(structureId);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 161,
          "content": "console.error('Erreur suppression structure:', error);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 212,
          "content": "const associatePersonToStructure = useCallback(async (structureId, personneId, data = {}) => {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 218,
          "content": "structureId,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 239,
          "content": "const dissociatePersonFromStructure = useCallback(async (liaisonId) => {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 267,
          "content": "const setPrioritaire = useCallback(async (structureId, personneId) => {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 272,
          "content": "structureId,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 286,
          "content": "* Récupérer une structure avec ses personnes associées",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 288,
          "content": "const getStructureWithPersonnes = useCallback((structureId) => {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 289,
          "content": "const structure = structures.find(s => s.id === structureId);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 292,
          "content": "// Trouver les liaisons actives de cette structure",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 294,
          "content": "l.structureId === structureId &&",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 299,
          "content": "const structurePersonnes = structureLiaisons.map(liaison => {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 320,
          "content": "structurePersonnes.sort((a, b) => {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 327,
          "content": "...structure,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 330,
          "content": "}, [structures, personnes, liaisons, filters.showInactive]);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 333,
          "content": "* Récupérer une personne avec ses structures associées",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 335,
          "content": "const getPersonneWithStructures = useCallback((personneId) => {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 336,
          "content": "console.log('🔍 [getPersonneWithStructures] Recherche personne ID:', personneId);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 340,
          "content": "console.warn('⚠️ [getPersonneWithStructures] Personne non trouvée dans le cache');",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 350,
          "content": "// Récupérer les structures correspondantes",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 352,
          "content": "const structure = structures.find(s => s.id === liaison.structureId);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 356,
          "content": "...structure,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 372,
          "content": "structures: personneStructures",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 374,
          "content": "}, [structures, personnes, liaisons, filters.showInactive]);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 377,
          "content": "* Récupérer les personnes libres (sans structure)",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 391,
          "content": "* Recherche unifiée dans structures et personnes",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 396,
          "content": "// Recherche dans les structures",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 415,
          "content": "structures: matchingStructures,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 418,
          "content": "}, [structures, personnes]);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 423,
          "content": "let filteredStructures = [...structures];",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 428,
          "content": "filteredStructures = filteredStructures.filter(s =>",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 435,
          "content": "filteredStructures = filteredStructures.filter(s =>",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 446,
          "content": "filteredStructures = filteredStructures.filter(s =>",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 455,
          "content": "const enrichedStructures = filteredStructures.map(s =>",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 460,
          "content": "structures: enrichedStructures,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 462,
          "content": "total: enrichedStructures.length + filteredPersonnesLibres.length",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 464,
          "content": "}, [structures, filters, getPersonnesLibres, searchContacts, getStructureWithPersonnes]);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 472,
          "content": "totalStructures: structures.length,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 477,
          "content": "clients: structures.filter(s => s.isClient).length,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 481,
          "content": "}, [structures, personnes, liaisons, getPersonnesLibres]);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 485,
          "content": "structures,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 497,
          "content": "// Méthodes structures",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 499,
          "content": "updateStructure,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 508,
          "content": "associatePersonToStructure,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 514,
          "content": "getStructureWithPersonnes,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useContactsRelational.js",
          "line": 515,
          "content": "getPersonneWithStructures,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useDeleteContact.js",
          "line": 48,
          "content": "collection: 'structures',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useDeleteContact.js",
          "line": 51,
          "content": "message: 'Ce contact ne peut pas être supprimé car il est associé à des structures.',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useDeleteContactRelational.js",
          "line": 3,
          "content": "import structuresService from '@/services/contacts/structuresService';",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useDeleteContactRelational.js",
          "line": 8,
          "content": "* Gère à la fois les structures et les personnes",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useDeleteContactRelational.js",
          "line": 19,
          "content": "* Gérer la suppression d'un contact (structure ou personne)",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useDeleteContactRelational.js",
          "line": 22,
          "content": "* @param {string} contactType - Type du contact ('structure' ou 'personne')",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useDeleteContactRelational.js",
          "line": 25,
          "content": "const handleDelete = useCallback(async (contactId, contactType = 'structure') => {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useDeleteContactRelational.js",
          "line": 32,
          "content": "const entityType = contactType === 'structure' ? 'structure' : 'personne';",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useDeleteContactRelational.js",
          "line": 33,
          "content": "const entityTypeLabel = contactType === 'structure' ? 'cette structure' : 'cette personne';",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useDeleteContactRelational.js",
          "line": 48,
          "content": "if (contactType === 'structure') {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useDeleteContactRelational.js",
          "line": 50,
          "content": "result = await structuresService.deleteStructure(contactId);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useDeleteContactRelational.js",
          "line": 57,
          "content": "showSuccessToast(`${entityType === 'structure' ? 'Structure' : 'Personne'} supprimée avec succès`);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useDeleteContactRelational.js",
          "line": 87,
          "content": "const handleDeleteContact = useCallback((contactId, event, contactType = 'structure') => {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useSimpleContactDetails.js",
          "line": 17,
          "content": "const [structure, setStructure] = useState(null);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useSimpleContactDetails.js",
          "line": 27,
          "content": "const [loadingStructure, setLoadingStructure] = useState(false);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useSimpleContactDetails.js",
          "line": 34,
          "content": "const [errorStructure, setErrorStructure] = useState(null);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useSimpleContactDetails.js",
          "line": 270,
          "content": "// Fonction pour charger la structure associée (même logique que l'original)",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useSimpleContactDetails.js",
          "line": 273,
          "content": "setLoadingStructure(true);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useSimpleContactDetails.js",
          "line": 277,
          "content": "console.log(`[DEBUG] useSimpleContactDetails - structureId:`, contactEntity.structureId);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useSimpleContactDetails.js",
          "line": 279,
          "content": "// Vérifier si le contact a un structureId",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useSimpleContactDetails.js",
          "line": 281,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', contactEntity.structureId));",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useSimpleContactDetails.js",
          "line": 283,
          "content": "const structureData = { id: structureDoc.id, ...structureDoc.data() };",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useSimpleContactDetails.js",
          "line": 285,
          "content": "console.log(`[DIAGNOSTIC] useSimpleContactDetails - Structure trouvée:`, structureData);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useSimpleContactDetails.js",
          "line": 287,
          "content": "console.log(`[DIAGNOSTIC] useSimpleContactDetails - Structure ${contactEntity.structureId} n'existe pas`);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useSimpleContactDetails.js",
          "line": 291,
          "content": "console.log(`[DIAGNOSTIC] useSimpleContactDetails - Contact sans structureId`);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useSimpleContactDetails.js",
          "line": 296,
          "content": "console.error('[ERROR] useSimpleContactDetails - Erreur lors du chargement de la structure:', error);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useSimpleContactDetails.js",
          "line": 298,
          "content": "setStructure(null);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useSimpleContactDetails.js",
          "line": 300,
          "content": "setLoadingStructure(false);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useSimpleContactDetails.js",
          "line": 332,
          "content": "structureId: contactData.structureId,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useSimpleContactDetails.js",
          "line": 340,
          "content": "fetchStructureAssociee(contactData)",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useSimpleContactDetails.js",
          "line": 372,
          "content": "structure: structure ? `Structure ${structure.id}` : 'NULL',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useSimpleContactDetails.js",
          "line": 385,
          "content": "structure,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useSimpleContactDetails.js",
          "line": 392,
          "content": "loadingStructure,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useSimpleContactDetails.js",
          "line": 399,
          "content": "errorStructure,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 5,
          "content": "import { structuresService } from '@/services/contacts/structuresService';",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 18,
          "content": "const { getStructureWithPersonnes, getPersonneWithStructures, structures, personnes } = useContactsRelational();",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 75,
          "content": "// Essayer de charger comme structure d'abord",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 77,
          "content": "const structureResult = await structuresService.getStructure(contactId);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 78,
          "content": "console.log('📦 [useUnifiedContact] Résultat structure:', structureResult);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 80,
          "content": "detectedEntityType = 'structure';",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 82,
          "content": "} catch (structureError) {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 83,
          "content": "console.log('❌ [useUnifiedContact] Pas une structure:', structureError.message);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 100,
          "content": "if (detectedEntityType === 'structure') {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 101,
          "content": "console.log('🏢 [useUnifiedContact] Chargement comme structure');",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 107,
          "content": "debug.cache.cacheMiss(contactId, 'structure');",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 112,
          "content": "console.log('🔄 [useUnifiedContact] Structure pas dans le cache, chargement direct depuis le service');",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 114,
          "content": "const structureResult = await structuresService.getStructure(contactId);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 115,
          "content": "if (structureResult.success && structureResult.data) {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 116,
          "content": "console.log('✅ [useUnifiedContact] Structure trouvée via service:', structureResult.data);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 121,
          "content": "where('structureId', '==', contactId),",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 153,
          "content": "...structureResult.data,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 158,
          "content": "console.error('❌ [useUnifiedContact] Erreur chargement direct structure:', error);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 168,
          "content": "entityType: 'structure',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 194,
          "content": "mailPerso: p.email, // À adapter selon la structure",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 210,
          "content": "let rawContactData = getPersonneWithStructures(contactId);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 227,
          "content": "// Charger les liaisons de cette personne pour récupérer les structures",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 236,
          "content": "// Récupérer les structures associées",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 240,
          "content": "const structureResult = await structuresService.getStructure(liaison.structureId);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 241,
          "content": "if (structureResult.success && structureResult.data) {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 243,
          "content": "...structureResult.data,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 255,
          "content": "console.log('📋 [useUnifiedContact] Structures trouvées pour la personne:', structures.length);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 257,
          "content": "// Créer un objet compatible avec les structures",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 260,
          "content": "structures",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 274,
          "content": "entityType: (rawContactData.isPersonneLibre && (!rawContactData.structures || rawContactData.structures.length === 0)) ? 'personne_libre' : 'personne',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 289,
          "content": "structures: rawContactData.structures?.map(s => ({",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 308,
          "content": "structureName: contactData.structure?.raisonSociale,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 310,
          "content": "structuresCount: contactData.structures?.length || 0,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 343,
          "content": "}, [contactId, contactType, currentOrganization, getStructureWithPersonnes, getPersonneWithStructures]);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 358,
          "content": "if (data.entityType === 'structure') {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 360,
          "content": "if (structureData) {",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 361,
          "content": "console.log('🔄 [useUnifiedContact] Mise à jour réactive des données structure');",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 366,
          "content": "id: structureData.id,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 367,
          "content": "entityType: 'structure',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 369,
          "content": "raisonSociale: structureData.raisonSociale,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 371,
          "content": "email: structureData.email,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 373,
          "content": "telephone2: structureData.telephone2,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 375,
          "content": "siteWeb: structureData.siteWeb,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 377,
          "content": "codePostal: structureData.codePostal,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 379,
          "content": "pays: structureData.pays,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 381,
          "content": "notes: structureData.notes",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 383,
          "content": "tags: structureData.tags || [],",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 385,
          "content": "personnes: structureData.personnes?.map(p => ({",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 402,
          "content": "createdAt: structureData.createdAt,",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 410,
          "content": "entityType: 'structure'",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 414,
          "content": "const personneData = getPersonneWithStructures(contactId);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 422,
          "content": "entityType: (personneData.isPersonneLibre && (!personneData.structures || personneData.structures.length === 0)) ? 'personne_libre' : 'personne',",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 437,
          "content": "structures: personneData.structures?.map(s => ({",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contacts/useUnifiedContact.js",
          "line": 458,
          "content": "}, [structures, personnes, contactId, data.entityType, data.loading, getStructureWithPersonnes, getPersonneWithStructures]);",
          "module": "contacts"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 23,
          "content": "'contact_structure': { label: 'Structure du contact', category: 'contact', source: 'contact.structure' },",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 35,
          "content": "'programmateur_structure': { label: 'Structure du contact', category: 'contact', source: 'programmateur.structure' },",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 44,
          "content": "// Variables structure (ajout des variables manquantes)",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 45,
          "content": "'structure_nom': { label: 'Nom de la structure', category: 'structure', source: 'structure.nom' },",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 46,
          "content": "'structure_siret': { label: 'SIRET de la structure', category: 'structure', source: 'structure.siret' },",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 48,
          "content": "'structure_code_postal': { label: 'Code postal de la structure', category: 'structure', source: 'structure.adresse.codePostal' },",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 49,
          "content": "'structure_ville': { label: 'Ville de la structure', category: 'structure', source: 'structure.adresse.ville' },",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 50,
          "content": "'structure_pays': { label: 'Pays de la structure', category: 'structure', source: 'structure.adresse.pays' },",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 51,
          "content": "'structure_numero_intracommunautaire': { label: 'N° TVA de la structure', category: 'structure', source: 'structure.numeroIntracommunautaire' },",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 107,
          "content": "* Mapper les données de la structure depuis le formulaire public vers les variables de contrat",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 108,
          "content": "* @param {Object} structureData - Les données de la structure depuis le formulaire",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 111,
          "content": "export const mapStructureDataToVariables = (structureData) => {",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 115,
          "content": "'structure_nom': structureData.nom || '',",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 116,
          "content": "'structure_siret': structureData.siret || '',",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 118,
          "content": "'structure_code_postal': structureData.codePostal || '',",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 119,
          "content": "'structure_ville': structureData.ville || '',",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 121,
          "content": "'structure_numero_intracommunautaire': structureData.numeroIntracommunautaire || ''",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 126,
          "content": "* Mapper les données du contact pour inclure les infos de structure (nouvelle nomenclature)",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 128,
          "content": "* @param {Object} structureData - Les données de la structure associée",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 131,
          "content": "export const mapContactWithStructure = (contactData, structureData) => {",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 141,
          "content": "// Si la structure est fournie, utiliser ses données pour l'adresse et le SIRET",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 143,
          "content": "contact['contact_structure'] = structureData.nom || '';",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 144,
          "content": "contact['contact_siret'] = structureData.siret || '';",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 146,
          "content": "contact['contact_numero_intracommunautaire'] = structureData.numeroIntracommunautaire || '';",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 153,
          "content": "* Mapper les données du contact pour inclure les infos de structure (compatibilité rétrograde)",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 155,
          "content": "* @param {Object} structureData - Les données de la structure associée",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 158,
          "content": "export const mapProgrammateurWithStructure = (contactData, structureData) => {",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 168,
          "content": "// Si la structure est fournie, utiliser ses données pour l'adresse et le SIRET",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 170,
          "content": "programmateur['programmateur_structure'] = structureData.nom || '';",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 171,
          "content": "programmateur['programmateur_siret'] = structureData.siret || '';",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 173,
          "content": "programmateur['programmateur_numero_intracommunautaire'] = structureData.numeroIntracommunautaire || '';",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 184,
          "content": "\"programmateur_nom\", \"programmateur_structure\", \"programmateur_email\", \"programmateur_siret\",",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 201,
          "content": "\"programmateur_nom\", \"programmateur_structure\", \"programmateur_email\", \"programmateur_siret\",",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 214,
          "content": "\"programmateur_nom\", \"programmateur_structure\", \"artiste_nom\", \"lieu_ville\",",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 246,
          "content": ".replace(/{contact_structure}/g, 'Association Culturelle XYZ')",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 268,
          "content": "// Variables structure",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 270,
          "content": ".replace(/{structure_siret}/g, '987 654 321 00098')",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 272,
          "content": ".replace(/{structure_code_postal}/g, '75003')",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 274,
          "content": ".replace(/{structure_email}/g, 'structure@asso-xyz.fr')",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 276,
          "content": ".replace(/{structure_type}/g, 'Association')",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 279,
          "content": ".replace(/\\[contact_structure\\]/g, 'Association Culturelle XYZ')",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 301,
          "content": "// Variables structure avec crochets",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 303,
          "content": ".replace(/\\[structure_siret\\]/g, '987 654 321 00098')",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 305,
          "content": ".replace(/\\[structure_code_postal\\]/g, '75003')",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 307,
          "content": ".replace(/\\[structure_email\\]/g, 'structure@asso-xyz.fr')",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/contractVariables.js",
          "line": 309,
          "content": ".replace(/\\[structure_type\\]/g, 'Association');",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratDetails.js",
          "line": 64,
          "content": "name: 'structure',",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratDetails.js",
          "line": 66,
          "content": "idField: 'structureId',",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratDetails.js",
          "line": 219,
          "content": "// Requête personnalisée pour charger la structure via le contact",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratDetails.js",
          "line": 221,
          "content": "console.log('[DEBUG] Chargement structure pour contrat:', contratData);",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratDetails.js",
          "line": 233,
          "content": "console.log('[DEBUG] Concert non trouvé pour structure');",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratDetails.js",
          "line": 238,
          "content": "console.log('[DEBUG] Données du concert pour structure:', concertData);",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratDetails.js",
          "line": 249,
          "content": "console.log('[DEBUG] Contact non trouvé pour structure');",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratDetails.js",
          "line": 254,
          "content": "console.log('[DEBUG] Données du contact pour structure:', contactData);",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratDetails.js",
          "line": 256,
          "content": "if (!contactData.structureId) {",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratDetails.js",
          "line": 257,
          "content": "console.log('[DEBUG] Pas de structureId dans le contact');",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratDetails.js",
          "line": 261,
          "content": "// Récupérer enfin la structure",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratDetails.js",
          "line": 262,
          "content": "console.log('[DEBUG] Récupération de la structure:', contactData.structureId);",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratDetails.js",
          "line": 263,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', contactData.structureId));",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratDetails.js",
          "line": 265,
          "content": "if (!structureDoc.exists()) {",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratDetails.js",
          "line": 266,
          "content": "console.log('[DEBUG] Structure non trouvée');",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratDetails.js",
          "line": 270,
          "content": "const structureData = { id: structureDoc.id, ...structureDoc.data() };",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratDetails.js",
          "line": 271,
          "content": "console.log('[DEBUG] Données de la structure:', structureData);",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratDetails.js",
          "line": 273,
          "content": "return structureData;",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratDetails.js",
          "line": 275,
          "content": "console.error('[DEBUG] Erreur lors du chargement de la structure:', err);",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratDetails.js",
          "line": 360,
          "content": "structure: genericDetails.relatedData.structure || null,",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 41,
          "content": "* @param {string} contact.structure - Structure du contact",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 150,
          "content": "* - contact: nom, prénom, adresse, email, téléphone, structure",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 215,
          "content": "const [structureData, setStructureData] = useState(null);",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 305,
          "content": "// Charger les données de structure du contact si disponible",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 307,
          "content": "console.log(\"Chargement de la structure du contact:\", contact.structureId);",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 309,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', contact.structureId));",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 311,
          "content": "const data = structureDoc.data();",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 313,
          "content": "console.log(\"🏢 Structure - Champs disponibles:\", {",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 325,
          "content": "setStructureData(data);",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 327,
          "content": "console.warn(\"Structure non trouvée avec l'ID:\", contact.structureId);",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 329,
          "content": "} catch (structureError) {",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 330,
          "content": "console.error(\"Erreur lors du chargement de la structure:\", structureError);",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 391,
          "content": "}, [concert?.id, contact?.structureId, currentOrganization?.id]);",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 421,
          "content": "console.log(\"🔍 État actuel de structureData:\", structureData);",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 422,
          "content": "console.log(\"🔍 contact.structureId:\", contact?.structureId);",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 425,
          "content": "if (structureData) {",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 426,
          "content": "console.log(\"✅ Structure chargée:\", {",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 428,
          "content": "siret: structureData.siret,",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 430,
          "content": "email: structureData.email,",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 432,
          "content": "numeroIntracommunautaire: structureData.numeroIntracommunautaire",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 435,
          "content": "console.log(\"⚠️ Structure non chargée, utilisation des données du contact:\", {",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 534,
          "content": "contact_structure: structureData?.nom || contact?.structure || 'Non spécifiée',",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 537,
          "content": "contact_siret: structureData?.siret || contact?.siret || 'Non spécifié',",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 542,
          "content": "programmateur_structure: structureData?.nom || contact?.structure || 'Non spécifiée',",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 545,
          "content": "programmateur_siret: structureData?.siret || contact?.siret || 'Non spécifié',",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 547,
          "content": "// Si on a une structure avec des données d'adresse",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 548,
          "content": "if (structureData?.adresseLieu && typeof structureData.adresseLieu === 'object') {",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 552,
          "content": "// Si l'adresse est directement une chaîne dans structureData",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 554,
          "content": "return structureData.adresse;",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 559,
          "content": "contact_numero_intracommunautaire: structureData?.numeroIntracommunautaire || contact?.numeroIntracommunautaire || contact?.numero_intracommunautaire || 'Non spécifié',",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 563,
          "content": "// Si on a une structure avec des données d'adresse",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 564,
          "content": "if (structureData?.adresseLieu && typeof structureData.adresseLieu === 'object') {",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 568,
          "content": "// Si l'adresse est directement une chaîne dans structureData",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 570,
          "content": "return structureData.adresse;",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 575,
          "content": "programmateur_numero_intracommunautaire: structureData?.numeroIntracommunautaire || contact?.numeroIntracommunautaire || contact?.numero_intracommunautaire || 'Non spécifié',",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 631,
          "content": "// Variables structure",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 632,
          "content": "structure_nom: safeStringValue(structureData?.nom || structureData?.raisonSociale || contact?.structure, 'Non spécifiée'),",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 634,
          "content": "structure_adresse: (() => {",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 636,
          "content": "if (structureData?.adresse && typeof structureData.adresse === 'object') {",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 637,
          "content": "return safeStringValue(structureData.adresse.adresse, 'Non spécifiée');",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 639,
          "content": "return safeStringValue(structureData?.adresse, 'Non spécifiée');",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 641,
          "content": "structure_code_postal: (() => {",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 642,
          "content": "if (structureData?.adresse && typeof structureData.adresse === 'object') {",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 645,
          "content": "return safeStringValue(structureData?.codePostal, 'Non spécifié');",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 647,
          "content": "structure_ville: (() => {",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 648,
          "content": "if (structureData?.adresse && typeof structureData.adresse === 'object') {",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 651,
          "content": "return safeStringValue(structureData?.ville, 'Non spécifiée');",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 653,
          "content": "structure_pays: (() => {",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 654,
          "content": "if (structureData?.adresse && typeof structureData.adresse === 'object') {",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 657,
          "content": "return safeStringValue(structureData?.pays, 'France');",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 659,
          "content": "structure_email: safeStringValue(structureData?.email, 'Non spécifié'),",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 660,
          "content": "structure_telephone: safeStringValue(structureData?.telephone, 'Non spécifié'),",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 679,
          "content": "structureProgrammateur: programmateur?.structure || 'Non spécifiée',",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 727,
          "content": "}, [structureData, programmateur, artiste, lieu, concert, entrepriseInfo]);",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGenerator.js",
          "line": 887,
          "content": "structureData, // Ajout de structureData pour qu'il soit accessible",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGeneratorWithRoles.js",
          "line": 141,
          "content": "const structureData = concertData.structure;",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGeneratorWithRoles.js",
          "line": 162,
          "content": "contact_structure: structureData?.nom || contact?.structure || 'Non spécifiée',",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGeneratorWithRoles.js",
          "line": 165,
          "content": "contact_siret: structureData?.siret || contact?.siret || 'Non spécifié',",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGeneratorWithRoles.js",
          "line": 176,
          "content": "programmateur_structure: structureData?.nom || contact?.structure || 'Non spécifiée',",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGeneratorWithRoles.js",
          "line": 179,
          "content": "programmateur_siret: structureData?.siret || contact?.siret || 'Non spécifié',",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGeneratorWithRoles.js",
          "line": 183,
          "content": "if (structureData?.adresse) {",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGeneratorWithRoles.js",
          "line": 184,
          "content": "return typeof structureData.adresse === 'object'",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGeneratorWithRoles.js",
          "line": 185,
          "content": "? `${structureData.adresse.adresse || ''} ${structureData.adresse.codePostal || ''} ${structureData.adresse.ville || ''}`.trim()",
          "module": "contrats"
        },
        {
          "file": "src/hooks/contrats/useContratGeneratorWithRoles.js",
          "line": 231,
          "content": "structureId: '',",
          "module": "contrats"
        },
        {
          "file": "src/hooks/forms/useFormValidationData.js",
          "line": 26,
          "content": "* Configuration des champs de structure",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useFormValidationData.js",
          "line": 29,
          "content": "const structureFields = [",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useFormValidationData.js",
          "line": 31,
          "content": "{ id: 'type', label: 'Type de structure' },",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useFormValidationData.js",
          "line": 82,
          "content": "* @returns {Array} returns.structureFields - Configuration des champs de structure",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useFormValidationData.js",
          "line": 280,
          "content": "if (formDocData.structureData) {",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useFormValidationData.js",
          "line": 281,
          "content": "console.log(\"Données structure trouvées dans la soumission:\", formDocData.structureData);",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useFormValidationData.js",
          "line": 360,
          "content": "structureFields,",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 4,
          "content": "import { ensureStructureEntity } from '@/services/structureService';",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 40,
          "content": "const structureFields = {};",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 49,
          "content": "} else if (category === 'structure') {",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 61,
          "content": "if (Object.keys(structureFields).length === 0 && formData.structureData) {",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 62,
          "content": "// Mapper structureData vers structureFields",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 64,
          "content": "if (structure.nom) structureFields.nom = structure.nom;",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 66,
          "content": "if (structure.adresse) structureFields.adresse = structure.adresse;",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 68,
          "content": "if (structure.ville) structureFields.ville = structure.ville;",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 69,
          "content": "if (structure.numeroIntracommunautaire) structureFields.numeroIntracommunautaire = structure.numeroIntracommunautaire;",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 71,
          "content": "console.log(\"Données structure mappées:\", structureFields);",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 91,
          "content": "let structureId = null;",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 169,
          "content": "structureId: structureId || '',",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 170,
          "content": "structureNom: structureFields.nom || '',",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 213,
          "content": "// 3. GESTION DE LA STRUCTURE (ENTITÉ SÉPARÉE)",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 216,
          "content": "if (Object.keys(structureFields).length > 0) {",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 217,
          "content": "// Préparer les données de structure selon le format attendu",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 219,
          "content": "nom: structureFields.raisonSociale || structureFields.nom || '',",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 221,
          "content": "siret: structureFields.siret || '',",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 223,
          "content": "adresse: structureFields.adresse || '',",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 225,
          "content": "ville: structureFields.ville || '',",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 228,
          "content": "tva: structureFields.tva || '',",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 229,
          "content": "numeroIntracommunautaire: structureFields.numeroIntracommunautaire || '',",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 234,
          "content": "// Vérifier si le contact a déjà une structure associée",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 240,
          "content": "existingStructureId = progData.structureId;",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 244,
          "content": "if (existingStructureId) {",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 245,
          "content": "// Mettre à jour la structure existante",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 247,
          "content": "await ensureStructureEntity(structureId, structureData, currentOrganization?.id);",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 248,
          "content": "console.log(\"Structure existante mise à jour:\", structureId, structureData);",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 250,
          "content": "// Créer une nouvelle structure",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 252,
          "content": "if (structureFields.siret) {",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 253,
          "content": "structureId = structureFields.siret;",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 254,
          "content": "await ensureStructureEntity(structureId, structureData, currentOrganization?.id);",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 257,
          "content": "const newStructureRef = await addDoc(collection(db, 'structures'), {",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 263,
          "content": "structureId = newStructureRef.id;",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 266,
          "content": "console.log(\"Nouvelle structure créée:\", structureId, structureData);",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 269,
          "content": "// Associer la structure au contact",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 272,
          "content": "structureId: structureId,",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 273,
          "content": "structureNom: structureData.nom,",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 277,
          "content": "// Ajouter le contact à la liste des contacts associés de la structure",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 279,
          "content": "if (structureDoc.exists()) {",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 280,
          "content": "const structureDataFromDB = structureDoc.data();",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 297,
          "content": "await updateDoc(doc(db, 'structures', structureId), {",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 426,
          "content": "if (structureId) {",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 427,
          "content": "concertUpdates.structureId = structureId;",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 430,
          "content": "// Ajouter les champs de contact/structure/lieu pour affichage rapide",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 436,
          "content": "} else if (category === 'structure') {",
          "module": "forms"
        },
        {
          "file": "src/hooks/forms/useValidationBatchActions.js",
          "line": 476,
          "content": "console.log(\"- Structure ID:\", structureId);",
          "module": "forms"
        },
        {
          "file": "src/hooks/generics/actions/useGenericAction.js",
          "line": 123,
          "content": "// Si structure imbriquée détectée, BLOQUER",
          "module": "other"
        },
        {
          "file": "src/hooks/generics/actions/useGenericAction.js",
          "line": 124,
          "content": "if (entityData.contact || entityData.structure) {",
          "module": "other"
        },
        {
          "file": "src/hooks/generics/actions/useGenericAction.js",
          "line": 140,
          "content": "// Champs structure - IMPORTANT pour les relations",
          "module": "other"
        },
        {
          "file": "src/hooks/generics/actions/useGenericAction.js",
          "line": 141,
          "content": "structureId: entityData.structureId || '',",
          "module": "other"
        },
        {
          "file": "src/hooks/generics/actions/useGenericAction.js",
          "line": 142,
          "content": "structureNom: entityData.structureNom || entityData.structure?.nom || entityData.structure?.raisonSociale || '',",
          "module": "other"
        },
        {
          "file": "src/hooks/generics/actions/useGenericAction.js",
          "line": 144,
          "content": "// Si une structure complète est fournie, aplatir ses champs",
          "module": "other"
        },
        {
          "file": "src/hooks/generics/actions/useGenericAction.js",
          "line": 146,
          "content": "structureRaisonSociale: entityData.structure.raisonSociale || '',",
          "module": "other"
        },
        {
          "file": "src/hooks/generics/actions/useGenericAction.js",
          "line": 148,
          "content": "structureType: entityData.structure.type || '',",
          "module": "other"
        },
        {
          "file": "src/hooks/generics/actions/useGenericAction.js",
          "line": 150,
          "content": "structureCodePostal: entityData.structure.codePostal || '',",
          "module": "other"
        },
        {
          "file": "src/hooks/generics/actions/useGenericAction.js",
          "line": 152,
          "content": "structurePays: entityData.structure.pays || 'France',",
          "module": "other"
        },
        {
          "file": "src/hooks/generics/actions/useGenericAction.js",
          "line": 154,
          "content": "structureNumeroIntracommunautaire: entityData.structure.numeroIntracommunautaire || ''",
          "module": "other"
        },
        {
          "file": "src/hooks/generics/actions/useGenericAction.js",
          "line": 191,
          "content": "console.log('💾 Structure à sauvegarder:', JSON.stringify(entityData, null, 2));",
          "module": "other"
        },
        {
          "file": "src/hooks/generics/actions/useGenericAction.js",
          "line": 254,
          "content": "// Si structure imbriquée détectée, BLOQUER",
          "module": "other"
        },
        {
          "file": "src/hooks/generics/actions/useGenericAction.js",
          "line": 255,
          "content": "if (updateData.contact || updateData.structure) {",
          "module": "other"
        },
        {
          "file": "src/hooks/generics/actions/useGenericAction.js",
          "line": 271,
          "content": "// Champs structure - IMPORTANT pour les relations",
          "module": "other"
        },
        {
          "file": "src/hooks/generics/actions/useGenericAction.js",
          "line": 272,
          "content": "structureId: updateData.structureId || '',",
          "module": "other"
        },
        {
          "file": "src/hooks/generics/actions/useGenericAction.js",
          "line": 273,
          "content": "structureNom: updateData.structureNom || updateData.structure?.nom || updateData.structure?.raisonSociale || '',",
          "module": "other"
        },
        {
          "file": "src/hooks/generics/actions/useGenericAction.js",
          "line": 275,
          "content": "// Si une structure complète est fournie, aplatir ses champs",
          "module": "other"
        },
        {
          "file": "src/hooks/generics/actions/useGenericAction.js",
          "line": 277,
          "content": "structureRaisonSociale: updateData.structure.raisonSociale || '',",
          "module": "other"
        },
        {
          "file": "src/hooks/generics/actions/useGenericAction.js",
          "line": 279,
          "content": "structureType: updateData.structure.type || '',",
          "module": "other"
        },
        {
          "file": "src/hooks/generics/actions/useGenericAction.js",
          "line": 281,
          "content": "structureCodePostal: updateData.structure.codePostal || '',",
          "module": "other"
        },
        {
          "file": "src/hooks/generics/actions/useGenericAction.js",
          "line": 283,
          "content": "structurePays: updateData.structure.pays || 'France',",
          "module": "other"
        },
        {
          "file": "src/hooks/generics/actions/useGenericAction.js",
          "line": 285,
          "content": "structureNumeroIntracommunautaire: updateData.structure.numeroIntracommunautaire || ''",
          "module": "other"
        },
        {
          "file": "src/hooks/generics/index.js",
          "line": 46,
          "content": "'contrat', 'structure', 'entreprise', 'form'",
          "module": "other"
        },
        {
          "file": "src/hooks/generics/validation/useGenericValidation.js",
          "line": 73,
          "content": "* @replaces useFormValidation, useStructureValidation, validateForm functions",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 225,
          "content": "structure: async (lieuData) => {",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 226,
          "content": "console.log('[DEBUG useLieuDetails] customQuery structure appelée avec:', lieuData);",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 233,
          "content": "// Méthode 1: structureId direct dans le lieu",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 235,
          "content": "console.log('[useLieuDetails] Tentative chargement structure via structureId:', lieuData.structureId);",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 236,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', lieuData.structureId));",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 238,
          "content": "const structure = { id: structureDoc.id, ...structureDoc.data() };",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 239,
          "content": "console.log('[useLieuDetails] ✅ Structure trouvée via structureId:', structure);",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 246,
          "content": "console.log('[useLieuDetails] Tentative chargement structure via contact direct:', lieuData.contactId);",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 250,
          "content": "if (contactData.structureId) {",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 251,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', contactData.structureId));",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 253,
          "content": "const structure = { id: structureDoc.id, ...structureDoc.data() };",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 254,
          "content": "console.log('[useLieuDetails] ✅ Structure trouvée via contact direct:', structure);",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 262,
          "content": "console.log('[useLieuDetails] 🔍 Méthode 3: Recherche structure via contact des concerts');",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 288,
          "content": "// Prendre le premier concert et récupérer sa structure via le contact",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 290,
          "content": "console.log('[useLieuDetails] 🎵 Premier concert pour structure:', premierConcert);",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 299,
          "content": "if (contactData.structureId) {",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 300,
          "content": "console.log('[useLieuDetails] 🚀 Chargement structure via contact du concert:', contactData.structureId);",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 301,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', contactData.structureId));",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 303,
          "content": "const structure = { id: structureDoc.id, ...structureDoc.data() };",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 304,
          "content": "console.log('[useLieuDetails] ✅ Structure trouvée via contact du concert:', structure);",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 312,
          "content": "console.log('[useLieuDetails] ❌ Aucune structure trouvée pour ce lieu');",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 315,
          "content": "console.error('[useLieuDetails] Erreur lors du chargement de la structure:', error);",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 431,
          "content": "// 🏗️ NIVEAU 3 (Lieu) - Charge contact + concerts + artistes, ÉVITE structure direct (via contact)",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 444,
          "content": "name: 'structure',",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 446,
          "content": "idField: 'structureId',",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 449,
          "content": "loadRelated: false // 🚫 SÉCURITÉ: Empêche la structure de charger ses relations (évite boucles)",
          "module": "other"
        },
        {
          "file": "src/hooks/lieux/useLieuDetails.js",
          "line": 650,
          "content": "structure: detailsHook?.relatedData?.structure || null,",
          "module": "other"
        },
        {
          "file": "src/hooks/search/useStructureSearch.js",
          "line": 5,
          "content": "* Hook pour la recherche de structures",
          "module": "other"
        },
        {
          "file": "src/hooks/search/useStructureSearch.js",
          "line": 9,
          "content": "* @returns {Object} API de recherche de structures",
          "module": "other"
        },
        {
          "file": "src/hooks/search/useStructureSearch.js",
          "line": 11,
          "content": "const useStructureSearch = (initialTerm = '') => {",
          "module": "other"
        },
        {
          "file": "src/hooks/search/useStructureSearch.js",
          "line": 12,
          "content": "// Utilisation du hook générique avec configuration pour les structures",
          "module": "other"
        },
        {
          "file": "src/hooks/search/useStructureSearch.js",
          "line": 14,
          "content": "collectionName: 'structures',",
          "module": "other"
        },
        {
          "file": "src/hooks/search/useStructureSearch.js",
          "line": 17,
          "content": "transformResult: (structure) => ({",
          "module": "other"
        },
        {
          "file": "src/hooks/search/useStructureSearch.js",
          "line": 20,
          "content": "displayName: formatStructureName(structure)",
          "module": "other"
        },
        {
          "file": "src/hooks/search/useStructureSearch.js",
          "line": 24,
          "content": "// État local pour gérer la structure sélectionnée (pour compatibilité API)",
          "module": "other"
        },
        {
          "file": "src/hooks/search/useStructureSearch.js",
          "line": 25,
          "content": "const [selectedStructure, setSelectedStructure] = useState(null);",
          "module": "other"
        },
        {
          "file": "src/hooks/search/useStructureSearch.js",
          "line": 27,
          "content": "// Fonction utilitaire pour formater le nom d'affichage d'une structure",
          "module": "other"
        },
        {
          "file": "src/hooks/search/useStructureSearch.js",
          "line": 29,
          "content": "if (!structure) return 'Structure inconnue';",
          "module": "other"
        },
        {
          "file": "src/hooks/search/useStructureSearch.js",
          "line": 35,
          "content": "return `${raisonSociale} ${type} ${ville}`.trim() || 'Structure sans nom';",
          "module": "other"
        },
        {
          "file": "src/hooks/search/useStructureSearch.js",
          "line": 38,
          "content": "// Synchroniser la structure sélectionnée avec l'entité sélectionnée du hook générique",
          "module": "other"
        },
        {
          "file": "src/hooks/search/useStructureSearch.js",
          "line": 39,
          "content": "const handleStructureSelect = useCallback((structure) => {",
          "module": "other"
        },
        {
          "file": "src/hooks/search/useStructureSearch.js",
          "line": 41,
          "content": "searchHook.setSelectedEntity(structure);",
          "module": "other"
        },
        {
          "file": "src/hooks/search/useStructureSearch.js",
          "line": 44,
          "content": "// Effacer la sélection de structure",
          "module": "other"
        },
        {
          "file": "src/hooks/search/useStructureSearch.js",
          "line": 46,
          "content": "setSelectedStructure(null);",
          "module": "other"
        },
        {
          "file": "src/hooks/search/useStructureSearch.js",
          "line": 55,
          "content": "// Propriétés et méthodes spécifiques à useStructureSearch (pour compatibilité)",
          "module": "other"
        },
        {
          "file": "src/hooks/search/useStructureSearch.js",
          "line": 57,
          "content": "setStructure: handleStructureSelect,",
          "module": "other"
        },
        {
          "file": "src/hooks/search/useStructureSearch.js",
          "line": 58,
          "content": "clearStructure: clearStructureSelection,",
          "module": "other"
        },
        {
          "file": "src/hooks/search/useStructureSearch.js",
          "line": 61,
          "content": "searchStructures: searchHook.refreshSearch,",
          "module": "other"
        },
        {
          "file": "src/hooks/search/useStructureSearch.js",
          "line": 66,
          "content": "export default useStructureSearch;",
          "module": "other"
        },
        {
          "file": "src/hooks/structures/index.js",
          "line": 1,
          "content": "// src/hooks/structures/index.js",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/index.js",
          "line": 2,
          "content": "// Exporte tous les hooks liés aux structures",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/index.js",
          "line": 5,
          "content": "import useStructureDetails from './useStructureDetails';",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/index.js",
          "line": 6,
          "content": "import useStructureForm from './useStructureForm';",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/index.js",
          "line": 8,
          "content": "import useDeleteStructure from './useDeleteStructure';",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/index.js",
          "line": 16,
          "content": "* Hook de recherche de structures",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/index.js",
          "line": 18,
          "content": "* @returns {Object} Fonctions et états pour la recherche de structures",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/index.js",
          "line": 20,
          "content": "const useStructureSearch = () => {",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/index.js",
          "line": 27,
          "content": "* Rechercher des structures par nom, ville, SIRET, etc.",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/index.js",
          "line": 40,
          "content": "// Recherche dans la collection structures",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/index.js",
          "line": 46,
          "content": "structuresRef,",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/index.js",
          "line": 54,
          "content": "structuresRef,",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/index.js",
          "line": 63,
          "content": "structuresRef,",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/index.js",
          "line": 108,
          "content": "console.error('Erreur lors de la recherche des structures:', err);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/index.js",
          "line": 109,
          "content": "setError('Une erreur est survenue lors de la recherche des structures');",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/index.js",
          "line": 128,
          "content": "useStructureDetails,",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/index.js",
          "line": 130,
          "content": "useStructureValidation,",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/index.js",
          "line": 132,
          "content": "useStructureSearch",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/index.js",
          "line": 143,
          "content": "* @recommended APPROCHE RECOMMANDÉE - Versions optimisées des hooks pour les structures",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 1,
          "content": "// src/hooks/structures/useDeleteStructure.js",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 7,
          "content": "* Hook optimisé pour la suppression des structures",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 13,
          "content": "const useDeleteStructure = (onDeleteSuccess) => {",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 16,
          "content": "const [structureToDelete, setStructureToDelete] = useState(null);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 18,
          "content": "// Utiliser le hook générique avec configuration spécifique aux structures",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 26,
          "content": "entityType: 'structure',",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 30,
          "content": "confirmationTitle: 'Supprimer cette structure',",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 31,
          "content": "confirmationMessage: 'Êtes-vous sûr de vouloir supprimer cette structure ? Cette action est irréversible.',",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 37,
          "content": "field: 'structureId',",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 39,
          "content": "message: 'Cette structure ne peut pas être supprimée car des contacts y sont associés.',",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 45,
          "content": "field: 'structureId',",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 47,
          "content": "message: 'Cette structure ne peut pas être supprimée car des lieux y sont associés.',",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 56,
          "content": "setStructureToDelete(null);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 60,
          "content": "console.error('[useDeleteStructure] Erreur de suppression:', error);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 71,
          "content": "const handleDeleteClick = useCallback((structure) => {",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 74,
          "content": "setStructureToDelete(structure);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 81,
          "content": "setStructureToDelete(null);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 86,
          "content": "if (!structureToDelete) return;",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 88,
          "content": "const structureId = typeof structureToDelete === 'object' ? structureToDelete.id : structureToDelete;",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 90,
          "content": "if (!structureId) {",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 91,
          "content": "showErrorToast('ID de structure manquant, impossible de supprimer');",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 96,
          "content": "await handleDelete(structureId);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 99,
          "content": "// Fonction adaptée pour la suppression d'une structure spécifique (rétrocompatibilité)",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 101,
          "content": "if (!structure) return Promise.reject(new Error('Structure non définie'));",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 103,
          "content": "// On peut passer l'objet structure complet ou juste l'ID",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 104,
          "content": "const structureId = typeof structure === 'object' ? structure.id : structure;",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 106,
          "content": "if (!structureId) {",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 107,
          "content": "showErrorToast('ID de structure manquant, impossible de supprimer');",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 111,
          "content": "return handleDelete(structureId);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 114,
          "content": "// Fonction pour vérifier si une structure peut être supprimée",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 115,
          "content": "const canDeleteStructure = useCallback(async (structureId) => {",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 119,
          "content": "const result = await checkRelatedEntities(structureId);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 126,
          "content": "console.error('[useDeleteStructure] Erreur de vérification:', error);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 140,
          "content": "structureToDelete,",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 146,
          "content": "handleDelete: handleDeleteStructure,",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 150,
          "content": "handleDeleteStructure,",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useDeleteStructure.js",
          "line": 155,
          "content": "export default useDeleteStructure;",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 1,
          "content": "// src/hooks/structures/useStructureDetails.js",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 9,
          "content": "* Hook optimisé pour la gestion des détails d'une structure",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 12,
          "content": "* @param {string} id - ID de la structure",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 13,
          "content": "* @returns {Object} États et méthodes pour gérer une structure",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 15,
          "content": "const useStructureDetails = (id) => {",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 22,
          "content": "entityType: 'structure',",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 51,
          "content": "// 🏗️ NIVEAU 1 (Structure) - Charge toutes ses relations sans restriction",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 59,
          "content": "essential: true, // Les contacts sont essentiels pour l'affichage de la structure",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 89,
          "content": "contacts: async (structureData) => {",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 90,
          "content": "console.log('[DEBUG useStructureDetails] customQuery contacts appelée avec:', structureData);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 99,
          "content": "// Méthode 1: Vérifier les IDs directs dans la structure (format actuel et ancien)",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 135,
          "content": "// chercher par référence inverse (contacts avec structureId)",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 137,
          "content": "console.log('[DEBUG] Recherche par référence inverse (structureId)');",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 139,
          "content": "const constraints = [where('structureId', '==', structureData.id)];",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 164,
          "content": "console.error('[ERROR] useStructureDetails customQuery contacts:', error);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 169,
          "content": "concerts: async (structureData) => {",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 170,
          "content": "console.log('[DEBUG useStructureDetails] customQuery concerts appelée avec:', structureData);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 179,
          "content": "// Méthode 1: Vérifier les IDs directs dans la structure (si ils existent)",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 214,
          "content": "// Méthode 2: Chercher par structureId (référence dans le concert)",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 215,
          "content": "const concertConstraints = [where('structureId', '==', structureData.id)];",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 236,
          "content": "console.log('[DEBUG] Concerts trouvés par structureId:', concerts.length);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 238,
          "content": "// Méthode 3: Chercher par contact associé (si structure a des contacts)",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 241,
          "content": "const contactIds = structureData.contactIds || structureData.contactsAssocies || [];",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 277,
          "content": "console.error('[ERROR] useStructureDetails customQuery concerts:', error);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 282,
          "content": "lieux: async (structureData) => {",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 283,
          "content": "console.log('[DEBUG useStructureDetails] customQuery lieux appelée avec:', structureData);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 292,
          "content": "// Méthode 1: IDs directs dans la structure",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 325,
          "content": "// Méthode 2: Recherche par référence inverse (lieux qui référencent cette structure)",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 347,
          "content": "// Méthode 3: NOUVELLE - Via les concerts de cette structure",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 348,
          "content": "console.log('[useStructureDetails] 🔍 Méthode 3: Recherche lieux via concerts de la structure');",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 364,
          "content": "console.log('[useStructureDetails] 🎵 Concert trouvé avec lieu:', concertData.lieuId);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 368,
          "content": "// Charger tous les lieux des concerts de cette structure",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 391,
          "content": "console.log('[useStructureDetails] ✅ Lieu trouvé via concerts:', lieuData.nom);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 403,
          "content": "console.error('[ERROR] useStructureDetails customQuery lieux:', error);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 408,
          "content": "artistes: async (structureData) => {",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 409,
          "content": "console.log('[DEBUG useStructureDetails] customQuery artistes appelée avec:', structureData);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 418,
          "content": "// Méthode 1: IDs directs dans la structure (si ils existent)",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 419,
          "content": "const artisteIds = structureData.artisteIds || structureData.artistesAssocies || [];",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 451,
          "content": "// Méthode 2: Charger les artistes via les concerts de cette structure",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 453,
          "content": "const concertConstraints3 = [where('structureId', '==', structureData.id)];",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 510,
          "content": "console.error('[ERROR] useStructureDetails customQuery artistes:', error);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 518,
          "content": "showSuccessToast(`La structure a été enregistrée avec succès`);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 521,
          "content": "console.error(`[useStructureDetails] Erreur de sauvegarde:`, error);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 522,
          "content": "showErrorToast(`Erreur lors de l'enregistrement de la structure: ${error.message}`);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 525,
          "content": "showSuccessToast(`La structure a été supprimée avec succès`);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 529,
          "content": "console.error(`[useStructureDetails] Erreur de suppression:`, error);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 530,
          "content": "showErrorToast(`Erreur lors de la suppression de la structure: ${error.message}`);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 535,
          "content": "returnPath: '/structures',",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 544,
          "content": "// Fonction pour ajouter un contact à la structure",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 561,
          "content": "// Fonction pour retirer un contact de la structure",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 573,
          "content": "// Fonction pour ajouter un lieu à la structure",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 590,
          "content": "// Fonction pour retirer un lieu de la structure",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 606,
          "content": "// Fonctionnalités spécifiques aux structures",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 613,
          "content": "structure: detailsHook.entity,",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureDetails.js",
          "line": 643,
          "content": "export default useStructureDetails;",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 2,
          "content": "* Hook optimisé pour le formulaire de structure basé sur useGenericEntityForm",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 20,
          "content": "* Hook optimisé pour gérer les formulaires de structures",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 23,
          "content": "* @param {string} structureId - ID de la structure ou 'nouveau' pour une nouvelle structure",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 26,
          "content": "export const useStructureForm = (structureId) => {",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 28,
          "content": "const isNewStructure = !structureId || structureId === 'nouveau';",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 34,
          "content": "debugLog(`Initialisation du formulaire de structure optimisé: ${isNewStructure ? 'nouvelle structure' : `structure ${structureId}`}`, 'info', 'useStructureForm');",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 36,
          "content": "// Fonction de validation spécifique aux structures",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 41,
          "content": "errors.nom = 'Le nom de la structure est obligatoire';",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 73,
          "content": "const transformStructureData = (data) => {",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 74,
          "content": "// Transformations spécifiques aux structures avant sauvegarde",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 94,
          "content": "debugLog('Données transformées avant sauvegarde', 'debug', 'useStructureForm', transformedData);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 100,
          "content": "debugLog(`[useStructureForm] onSuccess appelé:`, 'info', 'useStructureForm', {",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 117,
          "content": "debugLog('[useStructureForm] Pas d\\'ID dans les données sauvegardées', 'error', 'useStructureForm');",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 121,
          "content": "const message = isNewStructure",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 123,
          "content": ": `La structure ${savedData.nom || ''} a été mise à jour avec succès`;",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 130,
          "content": "debugLog('[useStructureForm] Gestion des relations bidirectionnelles structure-contacts', 'info', 'useStructureForm');",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 143,
          "content": "debugLog(`[useStructureForm] Suppression de la relation avec le contact: ${contactId}`, 'info', 'useStructureForm');",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 145,
          "content": "sourceType: 'structure',",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 156,
          "content": "debugLog(`[useStructureForm] Ajout de la relation avec le contact: ${contactId}`, 'info', 'useStructureForm');",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 158,
          "content": "sourceType: 'structure',",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 171,
          "content": "debugLog('[useStructureForm] Erreur lors de la mise à jour des relations bidirectionnelles:', 'error', 'useStructureForm', error);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 176,
          "content": "navigate(`/structures/${savedId}`);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 180,
          "content": "const message = isNewStructure",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 181,
          "content": "? `Erreur lors de la création de la structure: ${error.message}`",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 185,
          "content": "debugLog(error, 'error', 'useStructureForm');",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 188,
          "content": "// Utilisation directe du hook générique avec configuration spécifique aux structures",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 190,
          "content": "entityType: 'structures',",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 191,
          "content": "entityId: isNewStructure ? null : structureId,",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 194,
          "content": "// Valeurs par défaut pour une nouvelle structure",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 216,
          "content": "validateForm: validateStructureForm,",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 221,
          "content": "addCreatedAt: isNewStructure, // Ajouter createdAt seulement pour les nouvelles structures",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 227,
          "content": "// Extension du hook avec des fonctionnalités spécifiques aux structures",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 240,
          "content": "navigate(structureId && structureId !== 'nouveau' ? `/structures/${structureId}` : '/structures');",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 251,
          "content": "return validateStructureForm(formHook.formData).isValid;",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 271,
          "content": "debugLog('[useStructureForm] Capture des contactsIds existants:', 'info', 'useStructureForm', formHook.formData.contactsIds);",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 280,
          "content": "// Propriétés et méthodes spécifiques aux structures",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 287,
          "content": "structure: formHook.formData,",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 290,
          "content": "isEditMode: !isNewStructure,",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureForm.js",
          "line": 295,
          "content": "export default useStructureForm;",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureValidation.js",
          "line": 4,
          "content": "* Hook for validating structure form data",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureValidation.js",
          "line": 6,
          "content": "* @param {Object} formData - The structure form data to validate",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureValidation.js",
          "line": 9,
          "content": "export const useStructureValidation = (formData) => {",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureValidation.js",
          "line": 42,
          "content": "if (!formData.type) newErrors.type = 'Le type de structure est requis';",
          "module": "structures"
        },
        {
          "file": "src/hooks/structures/useStructureValidation.js",
          "line": 75,
          "content": "export default useStructureValidation;",
          "module": "structures"
        },
        {
          "file": "src/hooks/useSecureRelations.js",
          "line": 233,
          "content": "const relationTypes = ['contacts', 'lieux', 'artistes', 'structures', 'concerts'];",
          "module": "other"
        },
        {
          "file": "src/pages/ConfirmationPage.js",
          "line": 22,
          "content": "// Structure",
          "module": "other"
        },
        {
          "file": "src/pages/ConfirmationPage.js",
          "line": 140,
          "content": "// Structure",
          "module": "other"
        },
        {
          "file": "src/pages/ConfirmationPage.js",
          "line": 264,
          "content": "{/* Section 1: Structure */}",
          "module": "other"
        },
        {
          "file": "src/pages/ConfirmationPage.js",
          "line": 269,
          "content": "1. Structure",
          "module": "other"
        },
        {
          "file": "src/pages/ContactsPage.js",
          "line": 36,
          "content": "const type = subPath.split('/')[2]; // Extraire 'structure' ou 'personne'",
          "module": "other"
        },
        {
          "file": "src/pages/ContratDetailsPage.js",
          "line": 37,
          "content": "structure,",
          "module": "other"
        },
        {
          "file": "src/pages/ContratDetailsPage.js",
          "line": 59,
          "content": "structure,",
          "module": "other"
        },
        {
          "file": "src/pages/ContratDetailsPage.js",
          "line": 70,
          "content": "structure,",
          "module": "other"
        },
        {
          "file": "src/pages/ContratDetailsPage.js",
          "line": 126,
          "content": "structure",
          "module": "other"
        },
        {
          "file": "src/pages/ContratDetailsPage.js",
          "line": 134,
          "content": "}, [searchParams, loading, contrat, showPdfViewer, contratId, navigate, togglePdfViewer, setPreviewType, generatePDFPreview, concert, template, contact, programmateur, lieu, artiste, entreprise, structure]);",
          "module": "other"
        },
        {
          "file": "src/pages/ContratDetailsPage.js",
          "line": 146,
          "content": "structure",
          "module": "other"
        },
        {
          "file": "src/pages/ContratDetailsPage.js",
          "line": 147,
          "content": "}), [contrat, concert, template, contact, programmateur, lieu, artiste, entreprise, structure]);",
          "module": "other"
        },
        {
          "file": "src/pages/ContratDetailsPage.js",
          "line": 169,
          "content": "console.log('[DEBUG handleDownload] structure disponible:', structure);",
          "module": "other"
        },
        {
          "file": "src/pages/ContratDetailsPage.js",
          "line": 172,
          "content": "}, [concert, template, pdfData, structure, handleDownloadPdf]);",
          "module": "other"
        },
        {
          "file": "src/pages/ContratGenerationNewPage.js",
          "line": 32,
          "content": "const [structure, setStructure] = useState(null);",
          "module": "other"
        },
        {
          "file": "src/pages/ContratGenerationNewPage.js",
          "line": 61,
          "content": "// Récupérer les données de la structure si disponible",
          "module": "other"
        },
        {
          "file": "src/pages/ContratGenerationNewPage.js",
          "line": 63,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', concertData.structureId));",
          "module": "other"
        },
        {
          "file": "src/pages/ContratGenerationNewPage.js",
          "line": 65,
          "content": "setStructure({ id: structureDoc.id, ...structureDoc.data() });",
          "module": "other"
        },
        {
          "file": "src/pages/ContratGenerationNewPage.js",
          "line": 142,
          "content": "structure={structure}",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 21,
          "content": "const [structuresData, setStructuresData] = useState([]);",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 24,
          "content": "const [organisateurSearch, setOrganisateurSearch] = useState(prefilledData.structureName || '');",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 40,
          "content": "organisateurId: prefilledData.structureId || '',",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 156,
          "content": "const loadStructures = useCallback(async () => {",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 159,
          "content": "collection(db, 'structures'),",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 163,
          "content": "const structures = [];",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 166,
          "content": "const structureData = { id: doc.id, ...doc.data() };",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 169,
          "content": "nom: structureData.structureRaisonSociale || structureData.nom,",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 170,
          "content": "searchText: (structureData.structureRaisonSociale || structureData.nom || '').toLowerCase()",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 174,
          "content": "setStructuresData(structures);",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 176,
          "content": "console.error('Erreur lors du chargement des structures:', error);",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 194,
          "content": "ville: lieuData.structureVille || lieuData.ville || '',",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 195,
          "content": "searchText: `${lieuData.nom || ''} ${lieuData.structureVille || lieuData.ville || ''}`.toLowerCase()",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 209,
          "content": "loadStructures();",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 212,
          "content": "}, [currentOrganization, loadArtistes, loadLieux, loadStructures]);",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 219,
          "content": "const filteredStructures = structuresData.filter(structure =>",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 238,
          "content": "const handleOrganisateurSelect = (structure) => {",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 265,
          "content": "organisateurId: prefilledData.structureId || '',",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 273,
          "content": "setOrganisateurSearch(prefilledData.structureName || '');",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 524,
          "content": "placeholder=\"Rechercher une structure organisatrice...\"",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 533,
          "content": "{showOrganisateurDropdown && filteredStructures.length > 0 && (",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 535,
          "content": "{filteredStructures.slice(0, 10).map((structure) => (",
          "module": "other"
        },
        {
          "file": "src/pages/DateCreationPage.js",
          "line": 539,
          "content": "onClick={() => handleOrganisateurSelect(structure)}",
          "module": "other"
        },
        {
          "file": "src/pages/DebugToolsPage.js",
          "line": 3,
          "content": "import DataStructureFixer from '@/components/debug/DataStructureFixer';",
          "module": "other"
        },
        {
          "file": "src/pages/DebugToolsPage.js",
          "line": 32,
          "content": "import StructuresClickDebug from '@/components/debug/StructuresClickDebug';",
          "module": "other"
        },
        {
          "file": "src/pages/DebugToolsPage.js",
          "line": 39,
          "content": "import CheckStructureMigration from '@/components/debug/CheckStructureMigration';",
          "module": "other"
        },
        {
          "file": "src/pages/DebugToolsPage.js",
          "line": 41,
          "content": "import StructureAddressMigration from '@/components/debug/StructureAddressMigration';",
          "module": "other"
        },
        {
          "file": "src/pages/DebugToolsPage.js",
          "line": 45,
          "content": "const [activeTab, setActiveTab] = useState('structure-address-migration');",
          "module": "other"
        },
        {
          "file": "src/pages/DebugToolsPage.js",
          "line": 104,
          "content": "<Tab eventKey=\"structure\" title=\"Structure des données\">",
          "module": "other"
        },
        {
          "file": "src/pages/DebugToolsPage.js",
          "line": 200,
          "content": "<Tab eventKey=\"structures-click-debug\" title=\"🏢 Debug Clics Structures\">",
          "module": "other"
        },
        {
          "file": "src/pages/DebugToolsPage.js",
          "line": 228,
          "content": "<Tab eventKey=\"check-structure-migration\" title=\"🔍 Vérifier Migration Structure\">",
          "module": "other"
        },
        {
          "file": "src/pages/DebugToolsPage.js",
          "line": 232,
          "content": "<Tab eventKey=\"structure-address-migration\" title=\"🏠 Migration Adresses Structures\">",
          "module": "other"
        },
        {
          "file": "src/pages/DevisPage.js",
          "line": 23,
          "content": "const { devisId, concertId, structureId } = activeTab.params;",
          "module": "other"
        },
        {
          "file": "src/pages/DevisPage.js",
          "line": 32,
          "content": "return <DevisEditor concertId={concertId} structureId={structureId} />;",
          "module": "other"
        },
        {
          "file": "src/pages/DevisPage.js",
          "line": 43,
          "content": "const structureId = urlParams.get('structureId');",
          "module": "other"
        },
        {
          "file": "src/pages/DevisPage.js",
          "line": 45,
          "content": "return <DevisEditor concertId={concertId} structureId={structureId} />;",
          "module": "other"
        },
        {
          "file": "src/pages/FactureDetailsPage.js",
          "line": 142,
          "content": "let structure = null;",
          "module": "other"
        },
        {
          "file": "src/pages/FactureDetailsPage.js",
          "line": 151,
          "content": "if (facture.structureId) {",
          "module": "other"
        },
        {
          "file": "src/pages/FactureDetailsPage.js",
          "line": 152,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', facture.structureId));",
          "module": "other"
        },
        {
          "file": "src/pages/FactureDetailsPage.js",
          "line": 154,
          "content": "structure = { id: structureDoc.id, ...structureDoc.data() };",
          "module": "other"
        },
        {
          "file": "src/pages/FactureDetailsPage.js",
          "line": 164,
          "content": "structure,",
          "module": "other"
        },
        {
          "file": "src/pages/FactureGenerationPage.js",
          "line": 26,
          "content": "const [structure, setStructure] = useState(null);",
          "module": "other"
        },
        {
          "file": "src/pages/FactureGenerationPage.js",
          "line": 83,
          "content": "// 2. Charger la structure si elle existe",
          "module": "other"
        },
        {
          "file": "src/pages/FactureGenerationPage.js",
          "line": 85,
          "content": "const structureRef = doc(db, 'structures', concertData.structureId);",
          "module": "other"
        },
        {
          "file": "src/pages/FactureGenerationPage.js",
          "line": 86,
          "content": "const structureSnap = await getDoc(structureRef);",
          "module": "other"
        },
        {
          "file": "src/pages/FactureGenerationPage.js",
          "line": 88,
          "content": "if (structureSnap.exists()) {",
          "module": "other"
        },
        {
          "file": "src/pages/FactureGenerationPage.js",
          "line": 89,
          "content": "const structureData = { id: structureSnap.id, ...structureSnap.data() };",
          "module": "other"
        },
        {
          "file": "src/pages/FactureGenerationPage.js",
          "line": 196,
          "content": "structure,",
          "module": "other"
        },
        {
          "file": "src/pages/FactureGenerationPage.js",
          "line": 221,
          "content": "}, [selectedTemplate, concert, structure, montantHT, tauxTVA, parametres, currentOrganization, typeFacture, pourcentageAcompte, montantAcompte, factureAcompteId, lignesSupplementaires, calculerMontantTotal]);",
          "module": "other"
        },
        {
          "file": "src/pages/FactureGenerationPage.js",
          "line": 248,
          "content": "structure,",
          "module": "other"
        },
        {
          "file": "src/pages/FactureGenerationPage.js",
          "line": 264,
          "content": "structureId: structure?.id,",
          "module": "other"
        },
        {
          "file": "src/pages/FactureGenerationPage.js",
          "line": 512,
          "content": "{!structure && (",
          "module": "other"
        },
        {
          "file": "src/pages/FactureGenerationPage.js",
          "line": 515,
          "content": "Aucune structure associée au concert. Les informations du client seront incomplètes.",
          "module": "other"
        },
        {
          "file": "src/pages/InventairePagesPage.js",
          "line": 39,
          "content": "{ name: 'StructuresPage', path: 'src/pages/StructuresPage.js', route: '/preview/structures', category: 'Gestion', usedInNewVersion: true },",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 32,
          "content": "const [structure, setStructure] = useState(null);",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 62,
          "content": "// Récupérer les données de la structure si disponible",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 63,
          "content": "console.log('[WORKFLOW_TEST] 4. Chargement des données de structure dans le pré-contrat');",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 65,
          "content": "console.log('[PreContratGenerationPage] structureId:', concertData.structureId);",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 67,
          "content": "let structureFound = false;",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 69,
          "content": "if (concertData.structureId) {",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 70,
          "content": "console.log('[WORKFLOW_TEST] 4. Chargement des données de structure - structureId trouvé:', concertData.structureId);",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 71,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', concertData.structureId));",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 73,
          "content": "const structureData = { id: structureDoc.id, ...structureDoc.data() };",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 74,
          "content": "console.log('[WORKFLOW_TEST] 4. Chargement des données de structure - structure chargée:', structureData);",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 76,
          "content": "setStructure(structureData);",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 79,
          "content": "console.log('[WORKFLOW_TEST] 4. Chargement des données de structure - structure non trouvée avec ID:', concertData.structureId);",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 80,
          "content": "console.log('[PreContratGenerationPage] Structure non trouvée avec ID:', concertData.structureId);",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 83,
          "content": "console.log('[WORKFLOW_TEST] 4. Chargement des données de structure - pas de structureId dans le concert');",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 87,
          "content": "// Si pas de structure trouvée mais qu'on a des infos dans le concert",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 88,
          "content": "if (!structureFound && concertData.structureRaisonSociale) {",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 89,
          "content": "console.log('[PreContratGenerationPage] Utilisation des données structure du concert');",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 97,
          "content": "where('entityType', '==', 'structure'),",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 98,
          "content": "where('structureRaisonSociale', '==', concertData.structureRaisonSociale)",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 105,
          "content": "console.log('[PreContratGenerationPage] Structure trouvée dans contacts_unified:', contactData);",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 107,
          "content": "// Extraire les données de la structure",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 110,
          "content": "raisonSociale: contactData.structureRaisonSociale || concertData.structureRaisonSociale,",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 111,
          "content": "nom: contactData.structureRaisonSociale || concertData.structureNom,",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 113,
          "content": "suiteAdresse: contactData.structureSuiteAdresse1 || '',",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 115,
          "content": "ville: contactData.structureVille || '',",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 117,
          "content": "region: contactData.structureRegion || '',",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 119,
          "content": "telephone: contactData.structureTelephone1 || '',",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 121,
          "content": "telephone2: contactData.structureTelephone2 || '',",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 123,
          "content": "fax: contactData.structureFax || '',",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 125,
          "content": "siteWeb: contactData.structureSiteWeb || '',",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 127,
          "content": "type: contactData.structureType || ''",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 129,
          "content": "structureFound = true;",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 136,
          "content": "if (!structureFound) {",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 138,
          "content": "raisonSociale: concertData.structureRaisonSociale,",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 139,
          "content": "nom: concertData.structureNom || concertData.structureRaisonSociale,",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 141,
          "content": "adresse: concertData.structureAdresse || '',",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 143,
          "content": "codePostal: concertData.structureCodePostal || '',",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 145,
          "content": "email: concertData.structureEmail || ''",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 217,
          "content": "structure: structure?.id || 'aucune',",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 218,
          "content": "structureData: structure",
          "module": "other"
        },
        {
          "file": "src/pages/PreContratGenerationPage.js",
          "line": 228,
          "content": "structure={structure}",
          "module": "other"
        },
        {
          "file": "src/pages/StructuresPage.js",
          "line": 3,
          "content": "import StructuresList from '../components/structures/StructuresList';",
          "module": "other"
        },
        {
          "file": "src/pages/StructuresPage.js",
          "line": 4,
          "content": "import StructureForm from '../components/structures/desktop/StructureForm';",
          "module": "other"
        },
        {
          "file": "src/pages/StructuresPage.js",
          "line": 5,
          "content": "import StructureDetails from '../components/structures/desktop/StructureDetails';",
          "module": "other"
        },
        {
          "file": "src/pages/StructuresPage.js",
          "line": 7,
          "content": "const StructuresPage = () => {",
          "module": "other"
        },
        {
          "file": "src/pages/StructuresPage.js",
          "line": 11,
          "content": "<Route path=\"/\" element={<StructuresList />} />",
          "module": "other"
        },
        {
          "file": "src/pages/StructuresPage.js",
          "line": 13,
          "content": "<Route path=\"/new\" element={<Navigate to=\"/structures/nouveau\" replace />} />",
          "module": "other"
        },
        {
          "file": "src/pages/StructuresPage.js",
          "line": 15,
          "content": "<Route path=\"/:id/edit\" element={<StructureForm />} />",
          "module": "other"
        },
        {
          "file": "src/pages/StructuresPage.js",
          "line": 21,
          "content": "export default StructuresPage;",
          "module": "other"
        },
        {
          "file": "src/pages/TableauDeBordPage.js",
          "line": 302,
          "content": "path: `/devis/nouveau?concertId=${item.id}&structureId=${item.structureId}`,",
          "module": "other"
        },
        {
          "file": "src/pages/TableauDeBordPage.js",
          "line": 304,
          "content": "params: { concertId: item.id, structureId: item.structureId },",
          "module": "other"
        },
        {
          "file": "src/schemas/ContactRefactoredSchemas.js",
          "line": 11,
          "content": "* Schéma pour la collection \"structures\"",
          "module": "other"
        },
        {
          "file": "src/schemas/ContactRefactoredSchemas.js",
          "line": 14,
          "content": "export const structureSchema = Yup.object().shape({",
          "module": "other"
        },
        {
          "file": "src/schemas/ContactRefactoredSchemas.js",
          "line": 323,
          "content": "// Indicateur personne libre (sans structure)",
          "module": "other"
        },
        {
          "file": "src/schemas/ContactRefactoredSchemas.js",
          "line": 336,
          "content": "* Une liaison = relation entre une structure et une personne",
          "module": "other"
        },
        {
          "file": "src/schemas/ContactRefactoredSchemas.js",
          "line": 341,
          "content": "structureId: Yup.string().required('Structure requise'),",
          "module": "other"
        },
        {
          "file": "src/schemas/ContactRefactoredSchemas.js",
          "line": 433,
          "content": "* Une ligne = une structure + jusqu'à 3 personnes",
          "module": "other"
        },
        {
          "file": "src/schemas/ContactRefactoredSchemas.js",
          "line": 436,
          "content": "// Structure",
          "module": "other"
        },
        {
          "file": "src/schemas/ContactRefactoredSchemas.js",
          "line": 473,
          "content": "* Valide une structure avant insertion/mise à jour",
          "module": "other"
        },
        {
          "file": "src/schemas/ContactRefactoredSchemas.js",
          "line": 475,
          "content": "export const validateStructure = async (data) => {",
          "module": "other"
        },
        {
          "file": "src/schemas/ContactRefactoredSchemas.js",
          "line": 477,
          "content": "const validated = await structureSchema.validate(data, { abortEarly: false });",
          "module": "other"
        },
        {
          "file": "src/schemas/ContactSchemas.js",
          "line": 5,
          "content": "* Utilise maintenant structureId au lieu de structureCache (approche moderne)",
          "module": "other"
        },
        {
          "file": "src/schemas/ContactSchemas.js",
          "line": 23,
          "content": "structureId: Yup.string().nullable(), // Référence vers une structure séparée",
          "module": "other"
        },
        {
          "file": "src/scripts/migrateToMultiOrg.js",
          "line": 32,
          "content": "'structures',",
          "module": "other"
        },
        {
          "file": "src/services/cacheService.js",
          "line": 16,
          "content": "structures: 600000, // 10 minutes",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 6,
          "content": "* Récupère les concerts d'une structure par son ID",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 8,
          "content": "* @param {string} structureId - ID de la structure",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 11,
          "content": "async getConcertsByStructureId(entrepriseId, structureId) {",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 13,
          "content": "console.log('[ConcertService] Recherche des concerts par structureId:', { entrepriseId, structureId });",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 18,
          "content": "where('structureId', '==', structureId)",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 27,
          "content": "console.log(`[ConcertService] Trouvé ${concerts.length} concerts pour structureId: ${structureId}`);",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 30,
          "content": "console.error('Erreur lors du chargement des concerts par structureId:', error);",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 35,
          "content": "* R�cup�re les concerts d'une structure",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 37,
          "content": "* @param {string} structureName - Nom de la structure",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 40,
          "content": "async getConcertsByStructure(entrepriseId, structureName) {",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 42,
          "content": "console.log('[ConcertService] Recherche des concerts pour:', { entrepriseId, structureName });",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 44,
          "content": "// Recherche par structureNom d'abord",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 48,
          "content": "where('structureNom', '==', structureName)",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 57,
          "content": "console.log(`[ConcertService] Trouvé ${concerts.length} concerts avec structureNom`);",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 59,
          "content": "// Si aucun résultat, essayer avec structureRaisonSociale",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 61,
          "content": "console.log('[ConcertService] Aucun concert trouvé avec structureNom, essai avec structureRaisonSociale');",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 65,
          "content": "where('structureRaisonSociale', '==', structureName)",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 74,
          "content": "console.log(`[ConcertService] Trouvé ${concerts.length} concerts avec structureRaisonSociale`);",
          "module": "other"
        },
        {
          "file": "src/services/concertService.js",
          "line": 83,
          "content": "where('structure.raisonSociale', '==', structureName)",
          "module": "other"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 14,
          "content": "import structuresService from './structuresService';",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 99,
          "content": "* Détecter les doublons de structures",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 101,
          "content": "static async detectStructureDuplicates(entrepriseId, threshold = 0.8) {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 103,
          "content": "console.log('🔍 Détection des doublons de structures...');",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 105,
          "content": "// Récupérer toutes les structures",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 106,
          "content": "const structuresResult = await structuresService.listStructures(entrepriseId);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 108,
          "content": "throw new Error('Impossible de récupérer les structures');",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 111,
          "content": "const structures = structuresResult.data;",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 115,
          "content": "// Comparer chaque structure avec les autres",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 117,
          "content": "if (processed.has(structures[i].id)) continue;",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 119,
          "content": "const group = [structures[i]];",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 122,
          "content": "for (let j = i + 1; j < structures.length; j++) {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 125,
          "content": "const similarity = this.calculateStructureSimilarity(structures[i], structures[j]);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 128,
          "content": "group.push(structures[j]);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 133,
          "content": "// Si plus d'une structure dans le groupe, c'est un doublon",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 136,
          "content": "type: 'structure',",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 138,
          "content": "idx === 0 ? 0 : this.calculateStructureSimilarity(group[0], group[idx]).score",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 142,
          "content": "this.calculateStructureSimilarity(group[0], group[1]).reasons : []",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 147,
          "content": "console.log(`✅ ${duplicateGroups.length} groupes de doublons structures détectés`);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 154,
          "content": "console.error('Erreur détection doublons structures:', error);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 229,
          "content": "* Calculer la similarité entre deux structures",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 231,
          "content": "static calculateStructureSimilarity(struct1, struct2) {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 404,
          "content": "displayName: duplicateGroup.type === 'structure'",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 470,
          "content": "* Fusionner des structures",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 472,
          "content": "static async mergeStructures(principalId, toMergeIds, userId) {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 474,
          "content": "console.log(`🔀 Fusion structures: ${principalId} <- ${toMergeIds.join(', ')}`);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 476,
          "content": "// Récupérer la structure principale",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 477,
          "content": "const principalResult = await structuresService.getStructure(principalId);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 479,
          "content": "throw new Error('Structure principale non trouvée');",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 485,
          "content": "// Traiter chaque structure à fusionner",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 487,
          "content": "const structureResult = await structuresService.getStructure(mergeId);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 490,
          "content": "const structure = structureResult.data;",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 492,
          "content": "// Transférer toutes les liaisons vers la structure principale",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 495,
          "content": "where('structureId', '==', mergeId)",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 501,
          "content": "structureId: principalId,",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 508,
          "content": "// Archiver la structure fusionnée",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 509,
          "content": "const archiveRef = doc(collection(db, 'structures_archives'));",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 511,
          "content": "...structure,",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 518,
          "content": "// Supprimer l'ancienne structure",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 530,
          "content": "console.log(`✅ Fusion terminée: ${mergedData.length} structures fusionnées`);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 538,
          "content": "console.error('Erreur fusion structures:', error);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 609,
          "content": "structures: await this.detectStructureDuplicates(entrepriseId),",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 615,
          "content": "...results.structures.duplicates,",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/duplicatesService.js",
          "line": 627,
          "content": "structureDuplicates: results.structures.duplicates.length,",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 3,
          "content": "import structuresService from './structuresService';",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 10,
          "content": "* Supporte le format standard avec 3 personnes par ligne de structure",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 18,
          "content": "// Structure",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 113,
          "content": "['1. Remplissez une ligne par structure'],",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 115,
          "content": "['3. Pour plus de 3 personnes, dupliquez la ligne structure'],",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 226,
          "content": "// Vérifier qu'il y a au moins une structure ou une personne",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 280,
          "content": "// Structure",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 338,
          "content": "structures: 0,",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 343,
          "content": "structures: 0,",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 382,
          "content": "if (lineResult.structure) {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 384,
          "content": "results.created.structures++;",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 386,
          "content": "results.updated.structures++;",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 423,
          "content": "structure: null,",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 428,
          "content": "// Créer la structure si fournie",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 431,
          "content": "const structureData = {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 449,
          "content": "const structureResult = await structuresService.upsertStructure(",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 455,
          "content": "if (structureResult.success) {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 456,
          "content": "structureId = structureResult.id;",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 458,
          "content": "id: structureId,",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 487,
          "content": "// Créer la liaison si on a une structure",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 491,
          "content": "structureId,",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 516,
          "content": "const { mode = 'structures', includeInactive = false } = options;",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 519,
          "content": "if (mode === 'structures') {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 530,
          "content": "* Export par structures (une ligne par structure avec contact prioritaire)",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 532,
          "content": "static async exportByStructures(entrepriseId, includeInactive) {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 533,
          "content": "// TODO: Implémenter l'export par structures",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 535,
          "content": "throw new Error('Export par structures non encore implémenté');",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/importExportService.js",
          "line": 543,
          "content": "// Récupérer toutes les personnes avec leurs structures",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/liaisonsService.js",
          "line": 21,
          "content": "* Gère les relations N-à-N entre structures et personnes",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/liaisonsService.js",
          "line": 25,
          "content": "* Créer une nouvelle liaison structure-personne",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/liaisonsService.js",
          "line": 39,
          "content": "where('structureId', '==', validation.data.structureId),",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/liaisonsService.js",
          "line": 57,
          "content": "throw new Error('Cette personne est déjà associée à cette structure');",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/liaisonsService.js",
          "line": 121,
          "content": "// Vérifier qu'une seule personne est prioritaire par structure",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/liaisonsService.js",
          "line": 126,
          "content": "where('structureId', '==', currentData.structureId),",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/liaisonsService.js",
          "line": 167,
          "content": "* Récupérer toutes les liaisons d'une structure",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/liaisonsService.js",
          "line": 169,
          "content": "async getLiaisonsByStructure(structureId, includeInactive = false) {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/liaisonsService.js",
          "line": 173,
          "content": "where('structureId', '==', structureId)",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/liaisonsService.js",
          "line": 193,
          "content": "console.error('[LiaisonsService] Erreur récupération liaisons structure:', error);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/liaisonsService.js",
          "line": 239,
          "content": "* Dissocier une personne d'une structure (soft delete)",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/liaisonsService.js",
          "line": 347,
          "content": "* Définir le contact prioritaire d'une structure",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/liaisonsService.js",
          "line": 349,
          "content": "async setPrioritaire(structureId, personneId, userId) {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/liaisonsService.js",
          "line": 354,
          "content": "where('structureId', '==', structureId),",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/personnesService.js",
          "line": 312,
          "content": "throw new Error(`Cette personne est associée à ${liaisonsSnapshot.size} structures actives`);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/qualificationsService.js",
          "line": 356,
          "content": "// TODO: Vérifier l'utilisation dans les structures/personnes",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/qualificationsService.js",
          "line": 444,
          "content": "migratedStructures: 0,",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/qualificationsService.js",
          "line": 450,
          "content": "// - Récupérer toutes les structures avec tags",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 15,
          "content": "import { validateStructure } from '@/schemas/ContactRefactoredSchemas';",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 18,
          "content": "const COLLECTION_NAME = 'structures';",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 21,
          "content": "* Service pour gérer la collection \"structures\"",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 24,
          "content": "class StructuresService {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 26,
          "content": "* Créer une nouvelle structure",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 29,
          "content": "async createStructure(data, entrepriseId, userId) {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 35,
          "content": "const validation = await validateStructure(dataForValidation);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 49,
          "content": "throw new Error(`Une structure avec cette raison sociale existe déjà`);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 52,
          "content": "// Créer la structure - Utiliser l'utilitaire pour nettoyer les données",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 55,
          "content": "const structureData = {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 64,
          "content": "const docRef = await addDoc(collection(db, COLLECTION_NAME), structureData);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 70,
          "content": "data: { id: docRef.id, ...structureData }",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 73,
          "content": "console.error('[StructuresService] Erreur création structure:', error);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 82,
          "content": "* Mettre à jour une structure existante",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 84,
          "content": "async updateStructure(structureId, updates, userId) {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 86,
          "content": "// Récupérer la structure actuelle",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 87,
          "content": "const docRef = doc(db, COLLECTION_NAME, structureId);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 91,
          "content": "throw new Error('Structure non trouvée');",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 102,
          "content": "console.log('[StructuresService] Debug commentaires avant validation:', {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 111,
          "content": "const validation = await validateStructure(dataForValidation);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 113,
          "content": "console.error('[StructuresService] Erreur de validation détaillée:', {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 132,
          "content": "throw new Error(`Une structure avec cette raison sociale existe déjà`);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 146,
          "content": "console.log('[StructuresService] Structure mise à jour:', structureId);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 149,
          "content": "id: structureId",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 152,
          "content": "console.error('[StructuresService] Erreur mise à jour structure:', error);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 161,
          "content": "* Récupérer une structure par ID",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 163,
          "content": "async getStructure(structureId) {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 166,
          "content": "if (!structureId || structureId.trim() === '') {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 167,
          "content": "console.warn('[StructuresService] ID de structure vide ou invalide:', structureId);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 170,
          "content": "error: 'ID de structure invalide'",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 174,
          "content": "const docRef = doc(db, COLLECTION_NAME, structureId);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 178,
          "content": "throw new Error('Structure non trouvée');",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 186,
          "content": "console.error('[StructuresService] Erreur récupération structure:', error);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 195,
          "content": "* Lister les structures d'une organisation",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 197,
          "content": "async listStructures(entrepriseId, filters = {}) {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 221,
          "content": "const structures = snapshot.docs.map(doc => ({",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 226,
          "content": "console.log(`[StructuresService] ${structures.length} structures trouvées`);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 229,
          "content": "data: structures",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 232,
          "content": "console.error('[StructuresService] Erreur liste structures:', error);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 242,
          "content": "* Rechercher des structures",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 244,
          "content": "async searchStructures(entrepriseId, searchTerm) {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 247,
          "content": "// On récupère toutes les structures et on filtre côté client",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 248,
          "content": "const allStructures = await this.listStructures(entrepriseId);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 250,
          "content": "if (!allStructures.success) {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 255,
          "content": "const filtered = allStructures.data.filter(structure => {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 269,
          "content": "console.error('[StructuresService] Erreur recherche structures:', error);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 279,
          "content": "* Supprimer une structure (soft delete recommandé)",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 281,
          "content": "async deleteStructure(structureId) {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 286,
          "content": "where('structureId', '==', structureId),",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 292,
          "content": "throw new Error(`Cette structure a ${liaisonsSnapshot.size} personnes actives associées`);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 295,
          "content": "// Supprimer la structure",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 296,
          "content": "await deleteDoc(doc(db, COLLECTION_NAME, structureId));",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 298,
          "content": "console.log('[StructuresService] Structure supprimée:', structureId);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 301,
          "content": "id: structureId",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 304,
          "content": "console.error('[StructuresService] Erreur suppression structure:', error);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 313,
          "content": "* Créer ou mettre à jour une structure (upsert)",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 316,
          "content": "async upsertStructure(data, entrepriseId, userId) {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 318,
          "content": "// Chercher une structure existante",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 329,
          "content": "const result = await this.updateStructure(existingDoc.id, data, userId);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 333,
          "content": "const result = await this.createStructure(data, entrepriseId, userId);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 337,
          "content": "console.error('[StructuresService] Erreur upsert structure:', error);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 346,
          "content": "* Marquer une structure comme client",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 348,
          "content": "async setClientStatus(structureId, isClient, userId) {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 353,
          "content": "* Mettre à jour les tags d'une structure",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 355,
          "content": "async updateTags(structureId, tags, userId) {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 356,
          "content": "return this.updateStructure(structureId, { tags }, userId);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 360,
          "content": "* Import en masse de structures",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 362,
          "content": "async bulkImportStructures(structures, entrepriseId, userId) {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 372,
          "content": "for (let i = 0; i < structures.length; i += batchSize) {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 375,
          "content": "await Promise.all(batch.map(async (structure, index) => {",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 377,
          "content": "const result = await this.upsertStructure(structure, entrepriseId, userId);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 389,
          "content": "data: structure",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 396,
          "content": "data: structure",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 402,
          "content": "console.log('[StructuresService] Import terminé:', results);",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 407,
          "content": "const structuresServiceInstance = new StructuresService();",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 408,
          "content": "export default structuresServiceInstance;",
          "module": "contacts"
        },
        {
          "file": "src/services/contacts/structuresService.js",
          "line": 409,
          "content": "export const structuresService = structuresServiceInstance;",
          "module": "contacts"
        },
        {
          "file": "src/services/dataValidationService.js",
          "line": 3,
          "content": "* et empêcher les structures de données imbriquées",
          "module": "other"
        },
        {
          "file": "src/services/dataValidationService.js",
          "line": 9,
          "content": "* Valide qu'une entité n'a pas de structure imbriquée",
          "module": "other"
        },
        {
          "file": "src/services/dataValidationService.js",
          "line": 14,
          "content": "export const validateEntityStructure = (data, entityType) => {",
          "module": "other"
        },
        {
          "file": "src/services/dataValidationService.js",
          "line": 18,
          "content": "// Liste des champs interdits (structures imbriquées)",
          "module": "other"
        },
        {
          "file": "src/services/dataValidationService.js",
          "line": 23,
          "content": "structures: ['structure'],",
          "module": "other"
        },
        {
          "file": "src/services/dataValidationService.js",
          "line": 27,
          "content": "// Vérifier la présence de structures imbriquées",
          "module": "other"
        },
        {
          "file": "src/services/dataValidationService.js",
          "line": 31,
          "content": "errors.push(`Structure imbriquée détectée: le champ \"${field}\" ne doit pas être un objet`);",
          "module": "other"
        },
        {
          "file": "src/services/dataValidationService.js",
          "line": 33,
          "content": "// Tenter d'aplatir la structure",
          "module": "other"
        },
        {
          "file": "src/services/dataValidationService.js",
          "line": 56,
          "content": "'structures', 'structuresIds',",
          "module": "other"
        },
        {
          "file": "src/services/dataValidationService.js",
          "line": 92,
          "content": "// Validation de structure",
          "module": "other"
        },
        {
          "file": "src/services/dataValidationService.js",
          "line": 93,
          "content": "const validation = validateEntityStructure(data, entityType);",
          "module": "other"
        },
        {
          "file": "src/services/dataValidationService.js",
          "line": 164,
          "content": "validateEntityStructure,",
          "module": "other"
        },
        {
          "file": "src/services/dataValidationService.js",
          "line": 209,
          "content": "// Ne pas valider toute la structure pour un update partiel",
          "module": "other"
        },
        {
          "file": "src/services/dataValidationService.js",
          "line": 210,
          "content": "// Mais vérifier qu'on n'ajoute pas de structure imbriquée",
          "module": "other"
        },
        {
          "file": "src/services/dataValidationService.js",
          "line": 237,
          "content": "validateEntityStructure,",
          "module": "other"
        },
        {
          "file": "src/services/factureService.js",
          "line": 56,
          "content": "<strong>{{nom_structure}}</strong><br>",
          "module": "other"
        },
        {
          "file": "src/services/factureService.js",
          "line": 58,
          "content": "{{ville_structure}}<br>",
          "module": "other"
        },
        {
          "file": "src/services/factureService.js",
          "line": 59,
          "content": "{{#if siret_structure}}SIRET : {{siret_structure}}<br>{{/if}}",
          "module": "other"
        },
        {
          "file": "src/services/factureService.js",
          "line": 321,
          "content": "structure,",
          "module": "other"
        },
        {
          "file": "src/services/factureService.js",
          "line": 388,
          "content": "// Client (structure)",
          "module": "other"
        },
        {
          "file": "src/services/factureService.js",
          "line": 391,
          "content": "adresse_structure: (() => {",
          "module": "other"
        },
        {
          "file": "src/services/factureService.js",
          "line": 393,
          "content": "if (structure?.adresseFacturation) return structure.adresseFacturation;",
          "module": "other"
        },
        {
          "file": "src/services/factureService.js",
          "line": 395,
          "content": "if (structure?.adresseLieu?.adresse) return structure.adresseLieu.adresse;",
          "module": "other"
        },
        {
          "file": "src/services/factureService.js",
          "line": 397,
          "content": "if (structure?.adresse && typeof structure.adresse === 'object' && structure.adresse.adresse) {",
          "module": "other"
        },
        {
          "file": "src/services/factureService.js",
          "line": 401,
          "content": "if (structure?.adresse && typeof structure.adresse === 'string') return structure.adresse;",
          "module": "other"
        },
        {
          "file": "src/services/factureService.js",
          "line": 404,
          "content": "ville_structure: (() => {",
          "module": "other"
        },
        {
          "file": "src/services/factureService.js",
          "line": 406,
          "content": "if (structure?.adresseFacturation) {",
          "module": "other"
        },
        {
          "file": "src/services/factureService.js",
          "line": 410,
          "content": "if (structure?.adresseLieu) {",
          "module": "other"
        },
        {
          "file": "src/services/factureService.js",
          "line": 414,
          "content": "if (structure?.adresse && typeof structure.adresse === 'object') {",
          "module": "other"
        },
        {
          "file": "src/services/factureService.js",
          "line": 418,
          "content": "return `${structure?.codePostal || ''} ${structure?.ville || ''}`.trim();",
          "module": "other"
        },
        {
          "file": "src/services/factureService.js",
          "line": 420,
          "content": "siret_structure: structure?.siret || '',",
          "module": "other"
        },
        {
          "file": "src/services/factureService.js",
          "line": 421,
          "content": "tva_structure: structure?.tva || structure?.numeroTVA || structure?.numeroIntracommunautaire || '',",
          "module": "other"
        },
        {
          "file": "src/services/factureService.js",
          "line": 423,
          "content": "telephone_structure: structure?.telephone || '',",
          "module": "other"
        },
        {
          "file": "src/services/firebase-emulator-service.js",
          "line": 310,
          "content": "const collections = ['concerts', 'lieux', 'contacts', 'artistes', 'structures', 'forms'];",
          "module": "other"
        },
        {
          "file": "src/services/firebase-emulator-service.js",
          "line": 343,
          "content": "// Valider la structure des données",
          "module": "other"
        },
        {
          "file": "src/services/preContratService.js",
          "line": 73,
          "content": "structureData: {",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 16,
          "content": "* Service pour la gestion des structures",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 17,
          "content": "* Gère la synchronisation bidirectionnelle entre structures et contacts",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 21,
          "content": "* Assure qu'une structure existe et est synchronisée",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 22,
          "content": "* @param {string} structureId - ID de la structure",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 25,
          "content": "* @returns {Promise<string>} - ID de la structure",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 27,
          "content": "export async function ensureStructureEntity(structureId, structureData = {}, entrepriseId = null) {",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 29,
          "content": "throw new Error('ID de structure requis');",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 33,
          "content": "// Vérifier si la structure existe",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 34,
          "content": "const structureRef = doc(db, 'structures', structureId);",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 37,
          "content": "if (structureDoc.exists()) {",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 39,
          "content": "if (Object.keys(structureData).length > 0) {",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 41,
          "content": "...structureData,",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 45,
          "content": "await updateDoc(structureRef, updateData);",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 48,
          "content": "return structureId;",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 50,
          "content": "// Structure n'existe pas, la créer",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 52,
          "content": "nom: structureData.nom || `Structure ${structureId}`,",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 54,
          "content": "adresse: structureData.adresse || {},",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 56,
          "content": "contactsAssocies: structureData.contactsAssocies || [],",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 59,
          "content": "...structureData,",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 63,
          "content": "await setDoc(structureRef, newStructureData);",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 65,
          "content": "return structureId;",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 68,
          "content": "console.error('Erreur lors de la synchronisation de la structure via structureService:', error);",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 74,
          "content": "* Recherche des structures par nom",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 77,
          "content": "* @returns {Promise<Array>} - Liste des structures trouvées",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 79,
          "content": "export async function searchStructures(searchTerm, maxResults = 10) {",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 87,
          "content": "collection(db, 'structures'),",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 97,
          "content": "const structure = {",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 101,
          "content": "results.push(structure);",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 106,
          "content": "console.error('Erreur lors de la recherche de structures:', error);",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 112,
          "content": "* Récupère une structure par son ID",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 113,
          "content": "* @param {string} structureId - ID de la structure",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 114,
          "content": "* @returns {Promise<Object|null>} - Données de la structure ou null si non trouvée",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 116,
          "content": "export async function getStructureById(structureId) {",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 122,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', structureId));",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 124,
          "content": "if (structureDoc.exists()) {",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 126,
          "content": "id: structureDoc.id,",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 133,
          "content": "console.error('Erreur lors de la récupération de la structure:', error);",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 139,
          "content": "* Synchronise les données d'une structure avec ses contacts associés",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 140,
          "content": "* @param {string} structureId - ID de la structure",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 142,
          "content": "export async function syncStructureToAssociatedContacts(structureId) {",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 146,
          "content": "if (!structureId) {",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 147,
          "content": "console.warn(`Structure ${structureId} introuvable`);",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 155,
          "content": "// Récupérer la structure",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 156,
          "content": "const structureDoc = await getDoc(doc(db, 'structures', structureId));",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 161,
          "content": "const structureData = structureDoc.data();",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 162,
          "content": "const contactsAssocies = structureData.contactsAssocies || [];",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 169,
          "content": "// Données de structure plates avec préfixe",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 171,
          "content": "structureNom: structureData.nom,",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 172,
          "content": "structureType: structureData.type,",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 176,
          "content": "console.error(`Erreur lors de la synchronisation des contacts avec la structure ${structureId}:`, error);",
          "module": "other"
        },
        {
          "file": "src/services/structureService.js",
          "line": 180,
          "content": "console.error(`Erreur lors de la synchronisation des contacts avec la structure ${structureId}:`, error);",
          "module": "other"
        },
        {
          "file": "src/services/syncService.js",
          "line": 15,
          "content": "export async function exportLocalDataToFirebase(collections = ['concerts', 'lieux', 'contacts', 'artistes', 'structures']) {",
          "module": "other"
        },
        {
          "file": "src/services/syncService.js",
          "line": 60,
          "content": "export async function importFirebaseDataToLocal(collections = ['concerts', 'lieux', 'contacts', 'artistes', 'structures']) {",
          "module": "other"
        },
        {
          "file": "src/shared/tableConfigs/datesTableColumns.js",
          "line": 224,
          "content": "path: `/devis/nouveau?concertId=${item.id}&structureId=${item.structureId}`,",
          "module": "other"
        },
        {
          "file": "src/shared/tableConfigs/datesTableColumns.js",
          "line": 226,
          "content": "params: { concertId: item.id, structureId: item.structureId },",
          "module": "other"
        },
        {
          "file": "src/utils/FirebaseInterceptor.js",
          "line": 95,
          "content": "const sensitiveCollections = ['contacts', 'lieux', 'concerts', 'structures'];",
          "module": "other"
        },
        {
          "file": "src/utils/FirebaseInterceptor.js",
          "line": 149,
          "content": "const sensitiveCollections = ['contacts', 'lieux', 'concerts', 'structures'];",
          "module": "other"
        },
        {
          "file": "src/utils/concertsDiagnostic.js",
          "line": 76,
          "content": "const collections = ['concerts', 'artistes', 'lieux', 'contacts', 'structures'];",
          "module": "other"
        },
        {
          "file": "src/utils/contactMigrationDetection.js",
          "line": 19,
          "content": "structure: !!(contactData.structureRaisonSociale || contactData.structureAdresse || contactData.structureEmail),",
          "module": "other"
        },
        {
          "file": "src/utils/contactMigrationDetection.js",
          "line": 73,
          "content": "structure: {",
          "module": "other"
        },
        {
          "file": "src/utils/contactMigrationDetection.js",
          "line": 74,
          "content": "present: !!(contactData.structureRaisonSociale || contactData.structureAdresse || contactData.structureEmail),",
          "module": "other"
        },
        {
          "file": "src/utils/contactMigrationDetection.js",
          "line": 76,
          "content": "structureRaisonSociale: !!contactData.structureRaisonSociale,",
          "module": "other"
        },
        {
          "file": "src/utils/contactMigrationDetection.js",
          "line": 77,
          "content": "structureAdresse: !!contactData.structureAdresse,",
          "module": "other"
        },
        {
          "file": "src/utils/contactMigrationDetection.js",
          "line": 79,
          "content": "structureType: !!contactData.structureType,",
          "module": "other"
        },
        {
          "file": "src/utils/contactMigrationDetection.js",
          "line": 80,
          "content": "structureSiret: !!contactData.structureSiret",
          "module": "other"
        },
        {
          "file": "src/utils/contactMigrationDetection.js",
          "line": 188,
          "content": "if (sections.structure.present && !sections.structure.fields.structureType) {",
          "module": "other"
        },
        {
          "file": "src/utils/contactMigrationDetection.js",
          "line": 207,
          "content": "structureRaisonSociale: 'Ma Société',",
          "module": "other"
        },
        {
          "file": "src/utils/contactMigrationDetection.js",
          "line": 213,
          "content": "structureRaisonSociale: 'Structure Inc',",
          "module": "other"
        },
        {
          "file": "src/utils/contactMigrationDetection.js",
          "line": 224,
          "content": "structureRaisonSociale: 'Structure Complète',",
          "module": "other"
        },
        {
          "file": "src/utils/contactUtils.js",
          "line": 39,
          "content": "* Obtient le type d'affichage pour une structure basé sur ses tags",
          "module": "other"
        },
        {
          "file": "src/utils/contactUtils.js",
          "line": 43,
          "content": "export const getStructureDisplayType = (data) => {",
          "module": "other"
        },
        {
          "file": "src/utils/contactUtils.js",
          "line": 45,
          "content": "return formatActivityTags(tags, 'Structure');",
          "module": "other"
        },
        {
          "file": "src/utils/createDefaultContractTemplate.js",
          "line": 54,
          "content": "Structure : [contact_structure]<br/>",
          "module": "other"
        },
        {
          "file": "src/utils/createDefaultContractTemplate.js",
          "line": 122,
          "content": "<p>[contact_structure]</p>",
          "module": "other"
        },
        {
          "file": "src/utils/dataCompatibilityHelper.js",
          "line": 197,
          "content": "const entityTypes = ['concerts', 'contacts', 'artistes', 'lieux', 'structures'];",
          "module": "other"
        },
        {
          "file": "src/utils/debugRelancesAutomatiques.js",
          "line": 161,
          "content": "// À implémenter selon la structure des données de contrat",
          "module": "other"
        },
        {
          "file": "src/utils/debugTagsComments.js",
          "line": 190,
          "content": "* Analyser la structure des données",
          "module": "other"
        },
        {
          "file": "src/utils/debugTagsComments.js",
          "line": 192,
          "content": "export const analyzeDataStructure = (contact) => {",
          "module": "other"
        },
        {
          "file": "src/utils/debugTagsComments.js",
          "line": 193,
          "content": "console.group('%c📊 Analyse de la structure des données', 'color: #9C27B0; font-weight: bold;');",
          "module": "other"
        },
        {
          "file": "src/utils/debugTagsComments.js",
          "line": 201,
          "content": "console.log('contact.structure.tags:', contact?.structure?.tags);",
          "module": "other"
        },
        {
          "file": "src/utils/debugTagsComments.js",
          "line": 206,
          "content": "console.log('contact.structure.commentaires:', contact?.structure?.commentaires);",
          "module": "other"
        },
        {
          "file": "src/utils/debugTagsComments.js",
          "line": 236,
          "content": "analyze: analyzeDataStructure,",
          "module": "other"
        },
        {
          "file": "src/utils/fixNumeroIntracommunautaire.js",
          "line": 9,
          "content": "* Met à jour le champ numeroIntracommunautaire dans structureData",
          "module": "other"
        },
        {
          "file": "src/utils/fixNumeroIntracommunautaire.js",
          "line": 30,
          "content": "// Vérifier si rawData contient structureNumeroIntracommunautaire",
          "module": "other"
        },
        {
          "file": "src/utils/fixNumeroIntracommunautaire.js",
          "line": 32,
          "content": "console.log('Numéro intracommunautaire trouvé dans rawData:', data.rawData.structureNumeroIntracommunautaire);",
          "module": "other"
        },
        {
          "file": "src/utils/fixNumeroIntracommunautaire.js",
          "line": 34,
          "content": "// Mettre à jour structureData",
          "module": "other"
        },
        {
          "file": "src/utils/fixNumeroIntracommunautaire.js",
          "line": 36,
          "content": "'structureData.numeroIntracommunautaire': data.rawData.structureNumeroIntracommunautaire",
          "module": "other"
        },
        {
          "file": "src/utils/fixEntrepriseIds.js",
          "line": 99,
          "content": "structures: { success: 0, errors: [] },",
          "module": "other"
        },
        {
          "file": "src/utils/fixEntrepriseIds.js",
          "line": 103,
          "content": "const collections = ['contacts', 'lieux', 'structures', 'concerts'];",
          "module": "other"
        },
        {
          "file": "src/utils/idGenerators.js",
          "line": 54,
          "content": "* Génère un identifiant unique pour une structure",
          "module": "other"
        },
        {
          "file": "src/utils/idGenerators.js",
          "line": 59,
          "content": "export const generateStructureId = () => {",
          "module": "other"
        },
        {
          "file": "src/utils/migrationHelper.js",
          "line": 28,
          "content": "'structures',",
          "module": "other"
        },
        {
          "file": "src/utils/testTagsUpdate.js",
          "line": 5,
          "content": "import { structuresService } from '../services/contacts/structuresService';",
          "module": "other"
        },
        {
          "file": "src/utils/testTagsUpdate.js",
          "line": 8,
          "content": "export async function testTagsUpdate(structureId, newTags, userId) {",
          "module": "other"
        },
        {
          "file": "src/utils/testTagsUpdate.js",
          "line": 10,
          "content": "console.log('Structure ID:', structureId);",
          "module": "other"
        },
        {
          "file": "src/utils/testTagsUpdate.js",
          "line": 14,
          "content": "// 1. Récupérer la structure actuelle",
          "module": "other"
        },
        {
          "file": "src/utils/testTagsUpdate.js",
          "line": 16,
          "content": "const structureResult = await structuresService.getStructure(structureId);",
          "module": "other"
        },
        {
          "file": "src/utils/testTagsUpdate.js",
          "line": 18,
          "content": "if (!structureResult.success) {",
          "module": "other"
        },
        {
          "file": "src/utils/testTagsUpdate.js",
          "line": 19,
          "content": "console.error('❌ Erreur récupération structure:', structureResult.error);",
          "module": "other"
        },
        {
          "file": "src/utils/testTagsUpdate.js",
          "line": 23,
          "content": "const currentData = structureResult.data;",
          "module": "other"
        },
        {
          "file": "src/utils/testTagsUpdate.js",
          "line": 51,
          "content": "const updateResult = await structuresService.updateStructure(",
          "module": "other"
        },
        {
          "file": "src/utils/testTagsUpdate.js",
          "line": 60,
          "content": "// 4. Vérifier la structure après mise à jour",
          "module": "other"
        },
        {
          "file": "src/utils/testTagsUpdate.js",
          "line": 62,
          "content": "const updatedResult = await structuresService.getStructure(structureId);",
          "module": "other"
        },
        {
          "file": "src/utils/testTagsUpdate.js",
          "line": 65,
          "content": "console.log('✅ Structure après mise à jour:', {",
          "module": "other"
        },
        {
          "file": "src/utils/verifyContactStructure.js",
          "line": 2,
          "content": "* Utilitaire pour vérifier que les contacts ont la bonne structure",
          "module": "other"
        },
        {
          "file": "src/utils/verifyContactStructure.js",
          "line": 6,
          "content": "export const verifyContactStructure = (data, entityType) => {",
          "module": "other"
        },
        {
          "file": "src/utils/verifyContactStructure.js",
          "line": 14,
          "content": "// DÉTECTION DE STRUCTURE IMBRIQUÉE",
          "module": "other"
        },
        {
          "file": "src/utils/verifyContactStructure.js",
          "line": 15,
          "content": "if (data.contact || data.structure) {",
          "module": "other"
        },
        {
          "file": "src/utils/verifyContactStructure.js",
          "line": 18,
          "content": "console.error('Structure imbriquée:', data.structure);",
          "module": "other"
        },
        {
          "file": "src/utils/verifyContactStructure.js",
          "line": 29,
          "content": "// Structure (avec préfixe, PAS dans un objet)",
          "module": "other"
        },
        {
          "file": "src/utils/verifyContactStructure.js",
          "line": 30,
          "content": "structureId: data.structureId || '',",
          "module": "other"
        },
        {
          "file": "src/utils/verifyContactStructure.js",
          "line": 31,
          "content": "structureNom: data.structureNom || data.structure?.nom || '',",
          "module": "other"
        },
        {
          "file": "src/utils/verifyContactStructure.js",
          "line": 32,
          "content": "structureRaisonSociale: data.structureRaisonSociale || data.structure?.raisonSociale || '',",
          "module": "other"
        },
        {
          "file": "src/utils/verifyContactStructure.js",
          "line": 34,
          "content": "structureAdresse: data.structureAdresse || data.structure?.adresse || '',",
          "module": "other"
        },
        {
          "file": "src/utils/verifyContactStructure.js",
          "line": 35,
          "content": "structureCodePostal: data.structureCodePostal || data.structure?.codePostal || '',",
          "module": "other"
        },
        {
          "file": "src/utils/verifyContactStructure.js",
          "line": 36,
          "content": "structureVille: data.structureVille || data.structure?.ville || '',",
          "module": "other"
        },
        {
          "file": "src/utils/verifyContactStructure.js",
          "line": 57,
          "content": "console.log('✅ STRUCTURE CORRIGÉE:', correctedData);",
          "module": "other"
        },
        {
          "file": "src/utils/verifyContactStructure.js",
          "line": 61,
          "content": "// Structure déjà plate",
          "module": "other"
        },
        {
          "file": "src/utils/verifyContactStructure.js",
          "line": 62,
          "content": "console.log('✅ Structure déjà plate - OK');",
          "module": "other"
        },
        {
          "file": "src/utils/verifyContactStructure.js",
          "line": 67,
          "content": "* Vérifier si un contact a la structure correcte",
          "module": "other"
        },
        {
          "file": "src/utils/verifyContactStructure.js",
          "line": 69,
          "content": "export const isContactStructureValid = (contact) => {",
          "module": "other"
        },
        {
          "file": "src/utils/verifyContactStructure.js",
          "line": 71,
          "content": "if (contact.contact || contact.structure) {",
          "module": "other"
        }
      ]
    },
    "totalOccurrences": 6477
  },
  "mixedUsage": {},
  "byModule": {
    "other": {
      "organisateur": {
        "count": 168,
        "files": {}
      },
      "structure": {
        "count": 2292,
        "files": {}
      }
    },
    "concerts": {
      "organisateur": {
        "count": 22,
        "files": {}
      },
      "structure": {
        "count": 469,
        "files": {}
      }
    },
    "contacts": {
      "organisateur": {
        "count": 1,
        "files": {}
      },
      "structure": {
        "count": 2225,
        "files": {}
      }
    },
    "contrats": {
      "organisateur": {
        "count": 33,
        "files": {}
      },
      "structure": {
        "count": 344,
        "files": {}
      }
    },
    "devis": {
      "organisateur": {
        "count": 0,
        "files": {}
      },
      "structure": {
        "count": 72,
        "files": {}
      }
    },
    "factures": {
      "organisateur": {
        "count": 0,
        "files": {}
      },
      "structure": {
        "count": 15,
        "files": {}
      }
    },
    "forms": {
      "organisateur": {
        "count": 7,
        "files": {}
      },
      "structure": {
        "count": 289,
        "files": {}
      }
    },
    "precontrats": {
      "organisateur": {
        "count": 3,
        "files": {}
      },
      "structure": {
        "count": 43,
        "files": {}
      }
    },
    "structures": {
      "organisateur": {
        "count": 0,
        "files": {}
      },
      "structure": {
        "count": 728,
        "files": {}
      }
    }
  },
  "inconsistencies": [
    {
      "type": "mixed_naming",
      "file": "src/components/common/modals/DateCreationModal.js",
      "line": 18,
      "content": "const [organisateurSearch, setOrganisateurSearch] = useState(prefilledData.structureName || '');",
      "module": "other",
      "description": "Utilisation mixte organisateur/structure sur la même ligne"
    },
    {
      "type": "mixed_naming",
      "file": "src/components/common/modals/DateCreationModal.js",
      "line": 34,
      "content": "organisateurId: prefilledData.structureId || '',",
      "module": "other",
      "description": "Utilisation mixte organisateur/structure sur la même ligne"
    },
    {
      "type": "mixed_naming",
      "file": "src/components/common/modals/DateCreationModal.js",
      "line": 35,
      "content": "organisateurNom: prefilledData.structureName || '',",
      "module": "other",
      "description": "Utilisation mixte organisateur/structure sur la même ligne"
    },
    {
      "type": "mixed_naming",
      "file": "src/components/common/modals/DateCreationModal.js",
      "line": 181,
      "content": "structure.searchText.includes(organisateurSearch.toLowerCase())",
      "module": "other",
      "description": "Utilisation mixte organisateur/structure sur la même ligne"
    },
    {
      "type": "mixed_naming",
      "file": "src/components/common/modals/DateCreationModal.js",
      "line": 203,
      "content": "organisateurId: structure.id,",
      "module": "other",
      "description": "Utilisation mixte organisateur/structure sur la même ligne"
    },
    {
      "type": "mixed_naming",
      "file": "src/components/common/modals/DateCreationModal.js",
      "line": 204,
      "content": "organisateurNom: structure.nom",
      "module": "other",
      "description": "Utilisation mixte organisateur/structure sur la même ligne"
    },
    {
      "type": "mixed_naming",
      "file": "src/components/common/modals/DateCreationModal.js",
      "line": 227,
      "content": "organisateurId: prefilledData.structureId || '',",
      "module": "other",
      "description": "Utilisation mixte organisateur/structure sur la même ligne"
    },
    {
      "type": "mixed_naming",
      "file": "src/components/common/modals/DateCreationModal.js",
      "line": 228,
      "content": "organisateurNom: prefilledData.structureName || '',",
      "module": "other",
      "description": "Utilisation mixte organisateur/structure sur la même ligne"
    },
    {
      "type": "field_mapping",
      "file": "src/components/common/modals/DateCreationModal.js",
      "line": 34,
      "content": "organisateurId: prefilledData.structureId || '',",
      "module": "other",
      "description": "Mapping entre champs organisateur et structure"
    },
    {
      "type": "field_mapping",
      "file": "src/components/common/modals/DateCreationModal.js",
      "line": 35,
      "content": "organisateurNom: prefilledData.structureName || '',",
      "module": "other",
      "description": "Mapping entre champs organisateur et structure"
    },
    {
      "type": "field_mapping",
      "file": "src/components/common/modals/DateCreationModal.js",
      "line": 203,
      "content": "organisateurId: structure.id,",
      "module": "other",
      "description": "Mapping entre champs organisateur et structure"
    },
    {
      "type": "field_mapping",
      "file": "src/components/common/modals/DateCreationModal.js",
      "line": 204,
      "content": "organisateurNom: structure.nom",
      "module": "other",
      "description": "Mapping entre champs organisateur et structure"
    },
    {
      "type": "field_mapping",
      "file": "src/components/common/modals/DateCreationModal.js",
      "line": 227,
      "content": "organisateurId: prefilledData.structureId || '',",
      "module": "other",
      "description": "Mapping entre champs organisateur et structure"
    },
    {
      "type": "field_mapping",
      "file": "src/components/common/modals/DateCreationModal.js",
      "line": 228,
      "content": "organisateurNom: prefilledData.structureName || '',",
      "module": "other",
      "description": "Mapping entre champs organisateur et structure"
    },
    {
      "type": "mixed_naming",
      "file": "src/components/concerts/mobile/sections/ConcertOrganizerSectionMobile.js",
      "line": 53,
      "content": "placeholder=\"Nom de l'organisateur ou structure\"",
      "module": "concerts",
      "description": "Utilisation mixte organisateur/structure sur la même ligne"
    },
    {
      "type": "mixed_naming",
      "file": "src/pages/DateCreationPage.js",
      "line": 24,
      "content": "const [organisateurSearch, setOrganisateurSearch] = useState(prefilledData.structureName || '');",
      "module": "other",
      "description": "Utilisation mixte organisateur/structure sur la même ligne"
    },
    {
      "type": "mixed_naming",
      "file": "src/pages/DateCreationPage.js",
      "line": 40,
      "content": "organisateurId: prefilledData.structureId || '',",
      "module": "other",
      "description": "Utilisation mixte organisateur/structure sur la même ligne"
    },
    {
      "type": "mixed_naming",
      "file": "src/pages/DateCreationPage.js",
      "line": 41,
      "content": "organisateurNom: prefilledData.structureName || '',",
      "module": "other",
      "description": "Utilisation mixte organisateur/structure sur la même ligne"
    },
    {
      "type": "mixed_naming",
      "file": "src/pages/DateCreationPage.js",
      "line": 220,
      "content": "structure.searchText.includes(organisateurSearch.toLowerCase())",
      "module": "other",
      "description": "Utilisation mixte organisateur/structure sur la même ligne"
    },
    {
      "type": "mixed_naming",
      "file": "src/pages/DateCreationPage.js",
      "line": 241,
      "content": "organisateurId: structure.id,",
      "module": "other",
      "description": "Utilisation mixte organisateur/structure sur la même ligne"
    },
    {
      "type": "mixed_naming",
      "file": "src/pages/DateCreationPage.js",
      "line": 242,
      "content": "organisateurNom: structure.nom",
      "module": "other",
      "description": "Utilisation mixte organisateur/structure sur la même ligne"
    },
    {
      "type": "mixed_naming",
      "file": "src/pages/DateCreationPage.js",
      "line": 265,
      "content": "organisateurId: prefilledData.structureId || '',",
      "module": "other",
      "description": "Utilisation mixte organisateur/structure sur la même ligne"
    },
    {
      "type": "mixed_naming",
      "file": "src/pages/DateCreationPage.js",
      "line": 266,
      "content": "organisateurNom: prefilledData.structureName || '',",
      "module": "other",
      "description": "Utilisation mixte organisateur/structure sur la même ligne"
    },
    {
      "type": "field_mapping",
      "file": "src/pages/DateCreationPage.js",
      "line": 40,
      "content": "organisateurId: prefilledData.structureId || '',",
      "module": "other",
      "description": "Mapping entre champs organisateur et structure"
    },
    {
      "type": "field_mapping",
      "file": "src/pages/DateCreationPage.js",
      "line": 41,
      "content": "organisateurNom: prefilledData.structureName || '',",
      "module": "other",
      "description": "Mapping entre champs organisateur et structure"
    },
    {
      "type": "field_mapping",
      "file": "src/pages/DateCreationPage.js",
      "line": 241,
      "content": "organisateurId: structure.id,",
      "module": "other",
      "description": "Mapping entre champs organisateur et structure"
    },
    {
      "type": "field_mapping",
      "file": "src/pages/DateCreationPage.js",
      "line": 242,
      "content": "organisateurNom: structure.nom",
      "module": "other",
      "description": "Mapping entre champs organisateur et structure"
    },
    {
      "type": "field_mapping",
      "file": "src/pages/DateCreationPage.js",
      "line": 265,
      "content": "organisateurId: prefilledData.structureId || '',",
      "module": "other",
      "description": "Mapping entre champs organisateur et structure"
    },
    {
      "type": "field_mapping",
      "file": "src/pages/DateCreationPage.js",
      "line": 266,
      "content": "organisateurNom: prefilledData.structureName || '',",
      "module": "other",
      "description": "Mapping entre champs organisateur et structure"
    }
  ]
}
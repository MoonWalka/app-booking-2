#!/usr/bin/env python3
"""
Audit des d√©pendances entre hooks TourCraft
Analyse les hooks sp√©cifiques qui pourraient √™tre g√©n√©ralis√©s
et documente les d√©pendances entre hooks.
"""

import os
import re
import json
from pathlib import Path
from collections import defaultdict, Counter
from typing import Dict, List, Set, Tuple

class HookDependencyAnalyzer:
    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        self.hooks_dir = self.project_root / "src" / "hooks"
        self.components_dir = self.project_root / "src" / "components"
        
        # Patterns pour identifier les hooks
        self.hook_import_pattern = re.compile(r'import\s+.*?from\s+[\'"]@?/?hooks/([^\'\"]+)[\'"]')
        self.hook_usage_pattern = re.compile(r'use[A-Z][a-zA-Z]*')
        self.generic_hooks = {
            'useGenericEntityDetails', 'useGenericEntityForm', 
            'useGenericEntitySearch', 'useGenericEntityList',
            'useGenericEntityDelete'
        }
        
        # R√©sultats de l'analyse
        self.hooks_inventory = {}
        self.dependencies = defaultdict(set)
        self.usage_stats = defaultdict(int)
        self.generic_adoption = defaultdict(list)
        self.domain_patterns = defaultdict(list)

    def scan_hooks_directory(self) -> Dict:
        """Scanne le r√©pertoire hooks et inventorie tous les hooks"""
        print("üîç Analyse du r√©pertoire hooks...")
        
        for hook_file in self.hooks_dir.rglob("*.js"):
            if "__tests__" in str(hook_file) or "index.js" in hook_file.name:
                continue
                
            relative_path = hook_file.relative_to(self.hooks_dir)
            domain = relative_path.parts[0] if len(relative_path.parts) > 1 else "root"
            hook_name = hook_file.stem
            
            # Analyse du contenu du fichier
            content = self._read_file_safe(hook_file)
            if not content:
                continue
                
            hook_info = {
                'path': str(relative_path),
                'domain': domain,
                'name': hook_name,
                'file_size': len(content),
                'line_count': len(content.splitlines()),
                'imports': self._extract_imports(content),
                'exports': self._extract_exports(content),
                'uses_generic': self._uses_generic_hooks(content),
                'complexity_score': self._calculate_complexity(content),
                'is_wrapper': self._is_wrapper_hook(content),
                'deprecated': '@deprecated' in content or 'DEPRECATED' in content
            }
            
            self.hooks_inventory[f"{domain}/{hook_name}"] = hook_info
            
        return self.hooks_inventory

    def analyze_dependencies(self):
        """Analyse les d√©pendances entre hooks"""
        print("üîó Analyse des d√©pendances...")
        
        for hook_key, hook_info in self.hooks_inventory.items():
            for import_path in hook_info['imports']:
                # Nettoie le chemin d'import
                clean_path = import_path.replace('@/hooks/', '').replace('../', '')
                if clean_path != hook_key:
                    self.dependencies[hook_key].add(clean_path)

    def analyze_usage_in_components(self):
        """Analyse l'utilisation des hooks dans les composants"""
        print("üìä Analyse de l'utilisation dans les composants...")
        
        for component_file in self.components_dir.rglob("*.js"):
            content = self._read_file_safe(component_file)
            if not content:
                continue
                
            # Trouve les imports de hooks
            imports = self.hook_import_pattern.findall(content)
            for import_path in imports:
                self.usage_stats[import_path] += 1
                
            # Analyse l'adoption des hooks g√©n√©riques
            for generic_hook in self.generic_hooks:
                if generic_hook in content:
                    self.generic_adoption[generic_hook].append(str(component_file.relative_to(self.project_root)))

    def identify_generalization_candidates(self) -> Dict:
        """Identifie les hooks candidats √† la g√©n√©ralisation"""
        print("üéØ Identification des candidats √† la g√©n√©ralisation...")
        
        candidates = {
            'high_priority': [],
            'medium_priority': [],
            'low_priority': [],
            'already_generic': []
        }
        
        # Groupe les hooks par patterns
        pattern_groups = defaultdict(list)
        
        for hook_key, hook_info in self.hooks_inventory.items():
            domain = hook_info['domain']
            name = hook_info['name']
            
            # Identifie les patterns communs
            if any(pattern in name.lower() for pattern in ['search', 'filter']):
                pattern_groups['search'].append((hook_key, hook_info))
            elif any(pattern in name.lower() for pattern in ['list', 'filters']):
                pattern_groups['list'].append((hook_key, hook_info))
            elif any(pattern in name.lower() for pattern in ['form', 'validation']):
                pattern_groups['form'].append((hook_key, hook_info))
            elif any(pattern in name.lower() for pattern in ['details', 'view']):
                pattern_groups['details'].append((hook_key, hook_info))
            elif any(pattern in name.lower() for pattern in ['delete', 'remove']):
                pattern_groups['delete'].append((hook_key, hook_info))
            elif any(pattern in name.lower() for pattern in ['status', 'state']):
                pattern_groups['status'].append((hook_key, hook_info))
            
            # V√©rifie si d√©j√† g√©n√©rique
            if hook_info['uses_generic']:
                candidates['already_generic'].append((hook_key, hook_info))
        
        # √âvalue les candidats par priorit√©
        for pattern, hooks in pattern_groups.items():
            if len(hooks) >= 3:  # Au moins 3 hooks similaires
                for hook_key, hook_info in hooks:
                    if not hook_info['uses_generic'] and not hook_info['deprecated']:
                        usage_count = self.usage_stats.get(hook_info['path'], 0)
                        complexity = hook_info['complexity_score']
                        
                        if usage_count >= 5 and complexity >= 15:
                            candidates['high_priority'].append((hook_key, hook_info, pattern))
                        elif usage_count >= 2 and complexity >= 10:
                            candidates['medium_priority'].append((hook_key, hook_info, pattern))
                        else:
                            candidates['low_priority'].append((hook_key, hook_info, pattern))
        
        return candidates

    def analyze_domain_specific_hooks(self) -> Dict:
        """Analyse les hooks sp√©cifiques par domaine"""
        print("üèóÔ∏è Analyse des hooks sp√©cifiques par domaine...")
        
        domain_analysis = {}
        
        for domain in ['artistes', 'concerts', 'contrats', 'lieux', 'programmateurs', 'structures']:
            domain_hooks = [
                (key, info) for key, info in self.hooks_inventory.items() 
                if info['domain'] == domain
            ]
            
            if not domain_hooks:
                continue
                
            # Statistiques du domaine
            total_hooks = len(domain_hooks)
            generic_hooks = len([h for _, h in domain_hooks if h['uses_generic']])
            deprecated_hooks = len([h for _, h in domain_hooks if h['deprecated']])
            wrapper_hooks = len([h for _, h in domain_hooks if h['is_wrapper']])
            
            # Complexit√© moyenne
            avg_complexity = sum(h['complexity_score'] for _, h in domain_hooks) / total_hooks if total_hooks > 0 else 0
            
            # Patterns communs
            patterns = Counter()
            for _, hook_info in domain_hooks:
                name = hook_info['name'].lower()
                if 'search' in name: patterns['search'] += 1
                if 'list' in name or 'filter' in name: patterns['list'] += 1
                if 'form' in name: patterns['form'] += 1
                if 'details' in name: patterns['details'] += 1
                if 'delete' in name: patterns['delete'] += 1
                if 'status' in name or 'state' in name: patterns['status'] += 1
            
            domain_analysis[domain] = {
                'total_hooks': total_hooks,
                'generic_adoption': f"{generic_hooks}/{total_hooks} ({generic_hooks/total_hooks*100:.1f}%)" if total_hooks > 0 else "0%",
                'deprecated_hooks': deprecated_hooks,
                'wrapper_hooks': wrapper_hooks,
                'avg_complexity': round(avg_complexity, 1),
                'patterns': dict(patterns),
                'hooks': [(key, info['name'], info['complexity_score'], info['uses_generic']) for key, info in domain_hooks]
            }
        
        return domain_analysis

    def generate_dependency_graph(self) -> Dict:
        """G√©n√®re un graphe des d√©pendances"""
        print("üìà G√©n√©ration du graphe des d√©pendances...")
        
        graph = {
            'nodes': [],
            'edges': [],
            'clusters': defaultdict(list)
        }
        
        # Noeuds
        for hook_key, hook_info in self.hooks_inventory.items():
            node = {
                'id': hook_key,
                'label': hook_info['name'],
                'domain': hook_info['domain'],
                'complexity': hook_info['complexity_score'],
                'uses_generic': hook_info['uses_generic'],
                'deprecated': hook_info['deprecated'],
                'usage_count': self.usage_stats.get(hook_info['path'], 0)
            }
            graph['nodes'].append(node)
            graph['clusters'][hook_info['domain']].append(hook_key)
        
        # Ar√™tes
        for source, targets in self.dependencies.items():
            for target in targets:
                graph['edges'].append({
                    'source': source,
                    'target': target,
                    'type': 'dependency'
                })
        
        return graph

    def _read_file_safe(self, file_path: Path) -> str:
        """Lit un fichier de mani√®re s√©curis√©e"""
        try:
            return file_path.read_text(encoding='utf-8')
        except Exception:
            return ""

    def _extract_imports(self, content: str) -> List[str]:
        """Extrait les imports de hooks"""
        imports = []
        for match in self.hook_import_pattern.finditer(content):
            imports.append(match.group(1))
        return imports

    def _extract_exports(self, content: str) -> List[str]:
        """Extrait les exports"""
        exports = []
        export_patterns = [
            r'export\s+(?:default\s+)?(?:const|function)\s+(\w+)',
            r'export\s+\{\s*([^}]+)\s*\}',
            r'export\s+default\s+(\w+)'
        ]
        
        for pattern in export_patterns:
            matches = re.findall(pattern, content)
            exports.extend(matches)
        
        return exports

    def _uses_generic_hooks(self, content: str) -> bool:
        """V√©rifie si le hook utilise des hooks g√©n√©riques"""
        return any(generic in content for generic in self.generic_hooks)

    def _calculate_complexity(self, content: str) -> int:
        """Calcule un score de complexit√© approximatif"""
        lines = content.splitlines()
        score = 0
        
        # Facteurs de complexit√©
        score += len(lines) // 10  # Longueur
        score += content.count('useState') * 2
        score += content.count('useEffect') * 3
        score += content.count('useCallback') * 2
        score += content.count('useMemo') * 2
        score += content.count('if (') + content.count('if(')
        score += content.count('for (') + content.count('for(')
        score += content.count('while (') + content.count('while(')
        score += content.count('try {') * 2
        score += content.count('catch') * 2
        
        return score

    def _is_wrapper_hook(self, content: str) -> bool:
        """D√©termine si c'est un hook wrapper"""
        return (
            any(generic in content for generic in self.generic_hooks) and
            content.count('return') <= 2 and
            len(content.splitlines()) < 50
        )

    def generate_report(self) -> str:
        """G√©n√®re le rapport d'audit complet"""
        print("üìã G√©n√©ration du rapport...")
        
        # Ex√©cute toutes les analyses
        self.scan_hooks_directory()
        self.analyze_dependencies()
        self.analyze_usage_in_components()
        candidates = self.identify_generalization_candidates()
        domain_analysis = self.analyze_domain_specific_hooks()
        dependency_graph = self.generate_dependency_graph()
        
        # G√©n√®re le rapport
        report = []
        report.append("# üîç AUDIT DES D√âPENDANCES ENTRE HOOKS TOURCRAFT")
        report.append(f"*G√©n√©r√© le: {self._get_current_date()}*\n")
        
        # R√©sum√© ex√©cutif
        report.append("## üìä R√âSUM√â EX√âCUTIF")
        report.append(f"- **Total hooks analys√©s**: {len(self.hooks_inventory)}")
        report.append(f"- **Hooks utilisant des g√©n√©riques**: {len(candidates['already_generic'])}")
        report.append(f"- **Candidats haute priorit√©**: {len(candidates['high_priority'])}")
        report.append(f"- **Candidats moyenne priorit√©**: {len(candidates['medium_priority'])}")
        report.append(f"- **D√©pendances identifi√©es**: {sum(len(deps) for deps in self.dependencies.values())}")
        report.append("")
        
        # Analyse par domaine
        report.append("## üèóÔ∏è ANALYSE PAR DOMAINE")
        for domain, analysis in domain_analysis.items():
            report.append(f"### {domain.upper()}")
            report.append(f"- **Total hooks**: {analysis['total_hooks']}")
            report.append(f"- **Adoption g√©n√©riques**: {analysis['generic_adoption']}")
            report.append(f"- **Hooks d√©pr√©ci√©s**: {analysis['deprecated_hooks']}")
            report.append(f"- **Hooks wrappers**: {analysis['wrapper_hooks']}")
            report.append(f"- **Complexit√© moyenne**: {analysis['avg_complexity']}")
            
            if analysis['patterns']:
                report.append("- **Patterns identifi√©s**:")
                for pattern, count in analysis['patterns'].items():
                    report.append(f"  - {pattern}: {count} hooks")
            report.append("")
        
        # Candidats √† la g√©n√©ralisation
        report.append("## üéØ CANDIDATS √Ä LA G√âN√âRALISATION")
        
        report.append("### ‚ö° HAUTE PRIORIT√â")
        if candidates['high_priority']:
            for hook_key, hook_info, pattern in candidates['high_priority']:
                usage = self.usage_stats.get(hook_info['path'], 0)
                report.append(f"- **{hook_info['name']}** ({hook_info['domain']})")
                report.append(f"  - Pattern: {pattern}")
                report.append(f"  - Complexit√©: {hook_info['complexity_score']}")
                report.append(f"  - Utilisation: {usage} composants")
                report.append(f"  - Lignes: {hook_info['line_count']}")
        else:
            report.append("*Aucun candidat haute priorit√© identifi√©*")
        report.append("")
        
        report.append("### üìä MOYENNE PRIORIT√â")
        if candidates['medium_priority']:
            for hook_key, hook_info, pattern in candidates['medium_priority'][:10]:  # Limite √† 10
                usage = self.usage_stats.get(hook_info['path'], 0)
                report.append(f"- **{hook_info['name']}** ({hook_info['domain']}) - {pattern} - Complexit√©: {hook_info['complexity_score']} - Usage: {usage}")
        else:
            report.append("*Aucun candidat moyenne priorit√© identifi√©*")
        report.append("")
        
        # Hooks d√©j√† migr√©s
        report.append("## ‚úÖ HOOKS D√âJ√Ä MIGR√âS VERS LES G√âN√âRIQUES")
        if candidates['already_generic']:
            for hook_key, hook_info in candidates['already_generic']:
                report.append(f"- **{hook_info['name']}** ({hook_info['domain']}) - {hook_info['line_count']} lignes")
        else:
            report.append("*Aucun hook migr√© identifi√©*")
        report.append("")
        
        # D√©pendances critiques
        report.append("## üîó D√âPENDANCES CRITIQUES")
        critical_deps = [(hook, deps) for hook, deps in self.dependencies.items() if len(deps) >= 3]
        if critical_deps:
            for hook, deps in critical_deps[:10]:
                report.append(f"- **{hook}**: {len(deps)} d√©pendances")
                for dep in list(deps)[:5]:
                    report.append(f"  - {dep}")
                if len(deps) > 5:
                    report.append(f"  - ... et {len(deps) - 5} autres")
        else:
            report.append("*Aucune d√©pendance critique identifi√©e*")
        report.append("")
        
        # Recommandations
        report.append("## üí° RECOMMANDATIONS")
        
        # Calcul des m√©triques pour les recommandations
        total_hooks = len(self.hooks_inventory)
        generic_adoption_rate = len(candidates['already_generic']) / total_hooks * 100 if total_hooks > 0 else 0
        high_priority_count = len(candidates['high_priority'])
        
        if generic_adoption_rate < 50:
            report.append("### üö® PRIORIT√â CRITIQUE")
            report.append(f"- **Taux d'adoption des g√©n√©riques**: {generic_adoption_rate:.1f}% (objectif: >80%)")
            report.append("- **Action**: Acc√©l√©rer la migration vers les hooks g√©n√©riques")
        
        if high_priority_count > 0:
            report.append("### ‚ö° ACTIONS IMM√âDIATES")
            report.append(f"- **{high_priority_count} hooks haute priorit√©** √† migrer")
            report.append("- **Focus**: Hooks avec forte utilisation et complexit√© √©lev√©e")
        
        report.append("### üìã PLAN D'ACTION SUGG√âR√â")
        report.append("1. **Documentation des d√©pendances**: Cr√©er une cartographie d√©taill√©e")
        report.append("2. **Migration progressive**: Commencer par les hooks haute priorit√©")
        report.append("3. **Standardisation**: √âtablir des patterns clairs pour chaque type")
        report.append("4. **Tests**: Assurer la couverture des hooks migr√©s")
        report.append("5. **Formation**: Sensibiliser l'√©quipe aux hooks g√©n√©riques")
        
        # Faisabilit√©
        report.append("## ‚úÖ √âVALUATION DE FAISABILIT√â")
        
        feasible_count = len(candidates['high_priority']) + len(candidates['medium_priority'])
        already_migrated = len(candidates['already_generic'])
        
        if feasible_count <= 10:
            report.append("### üü¢ FAISABILIT√â √âLEV√âE")
            report.append(f"- **{feasible_count} hooks** √† migrer (charge raisonnable)")
            report.append(f"- **{already_migrated} hooks** d√©j√† migr√©s (base solide)")
            report.append("- **Estimation**: 2-3 semaines de travail")
        elif feasible_count <= 20:
            report.append("### üü° FAISABILIT√â MOD√âR√âE")
            report.append(f"- **{feasible_count} hooks** √† migrer (charge importante)")
            report.append("- **Recommandation**: Migration par phases")
            report.append("- **Estimation**: 4-6 semaines de travail")
        else:
            report.append("### üü† FAISABILIT√â COMPLEXE")
            report.append(f"- **{feasible_count} hooks** √† migrer (charge tr√®s importante)")
            report.append("- **Recommandation**: Priorisation stricte et migration √©tal√©e")
            report.append("- **Estimation**: 2-3 mois de travail")
        
        return "\n".join(report)

    def _get_current_date(self) -> str:
        """Retourne la date actuelle format√©e"""
        from datetime import datetime
        return datetime.now().strftime("%d/%m/%Y √† %H:%M")

def main():
    """Fonction principale"""
    project_root = os.getcwd()
    analyzer = HookDependencyAnalyzer(project_root)
    
    print("üöÄ D√©marrage de l'audit des d√©pendances entre hooks...")
    
    try:
        report = analyzer.generate_report()
        
        # Sauvegarde le rapport
        output_file = Path(project_root) / "tools" / "audit" / "rapport_dependances_hooks.md"
        output_file.parent.mkdir(parents=True, exist_ok=True)
        output_file.write_text(report, encoding='utf-8')
        
        print(f"‚úÖ Rapport g√©n√©r√©: {output_file}")
        print("\n" + "="*60)
        print(report)
        
        # Sauvegarde aussi les donn√©es JSON pour analyse ult√©rieure
        json_file = output_file.with_suffix('.json')
        json_data = {
            'hooks_inventory': analyzer.hooks_inventory,
            'dependencies': {k: list(v) for k, v in analyzer.dependencies.items()},
            'usage_stats': dict(analyzer.usage_stats),
            'generic_adoption': {k: list(v) for k, v in analyzer.generic_adoption.items()}
        }
        
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump(json_data, f, indent=2, ensure_ascii=False)
        
        print(f"üìä Donn√©es JSON sauvegard√©es: {json_file}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'audit: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 
import { useMemo } from 'react';

/**
 * Hook to manage concert status information and display utilities
 */
export const useConcertStatus = () => {
  // Status details mapping with icons, labels, variants and tooltips
  const statusDetailsMap = useMemo(() => ({
    contact: {
      icon: 'üìû',
      label: 'Contact √©tabli',
      variant: 'info',
      tooltip: 'Premier contact √©tabli avec le programmateur',
      step: 1
    },
    preaccord: {
      icon: '‚úÖ',
      label: 'Pr√©-accord',
      variant: 'primary',
      tooltip: 'Accord verbal obtenu, en attente de confirmation',
      step: 2
    },
    contrat: {
      icon: 'üìÑ',
      label: 'Contrat sign√©',
      variant: 'success',
      tooltip: 'Contrat sign√© par toutes les parties',
      step: 3
    },
    acompte: {
      icon: 'üí∏',
      label: 'Acompte factur√©',
      variant: 'warning',
      tooltip: 'Acompte factur√©, en attente de paiement',
      step: 4
    },
    solde: {
      icon: 'üîÅ',
      label: 'Solde factur√©',
      variant: 'secondary',
      tooltip: 'Solde factur√©, concert termin√©',
      step: 5
    },
    annule: {
      icon: '‚ùå',
      label: 'Annul√©',
      variant: 'danger',
      tooltip: 'Concert annul√©',
      step: 0
    }
  }), []);
  
  // Function to get status details
  const getStatusDetails = (statut) => {
    return statusDetailsMap[statut] || {
      icon: '‚ùì',
      label: statut || 'Non d√©fini',
      variant: 'light',
      tooltip: 'Statut non d√©fini',
      step: 0
    };
  };

  // Function to get contract button variant
  const getContractButtonVariant = (status) => {
    if (!status) return 'outline-primary';
    
    switch (status) {
      case 'signed':
        return 'success';
      case 'sent':
        return 'success';
      case 'generated':
        return 'warning';
      default:
        return 'outline-primary';
    }
  };
  
  // Function to get contract tooltip text
  const getContractTooltip = (status) => {
    if (!status) return 'Aucun contrat g√©n√©r√©';
    
    switch (status) {
      case 'signed':
        return 'Contrat sign√©';
      case 'sent':
        return 'Contrat envoy√©';
      case 'generated':
        return 'Contrat g√©n√©r√© mais non envoy√©';
      default:
        return 'Statut inconnu';
    }
  };

  // Function to get status message and action recommendation
  const getStatusMessage = (concert, hasForm, hasUnvalidatedForm, isDatePassed) => {
    if (!concert) return { message: '', action: '', variant: 'light' };
    
    switch (concert.statut) {
      case 'contact':
        if (!hasForm && concert.programmateurId) 
          return { message: 'Formulaire √† envoyer', action: 'form', variant: 'warning' };
        if (!concert.programmateurId) 
          return { message: 'Programmateur √† d√©marcher', action: 'prog', variant: 'warning' };
        return { message: 'Contact √©tabli', action: 'contact', variant: 'info' };
      
      case 'preaccord':
        return { message: 'Pr√©-accord obtenu', action: 'preaccord', variant: 'primary' };
        
      case 'contrat':
        return { message: 'Contrat sign√©', action: 'contrat', variant: 'success' };
      
      case 'acompte':
        return { message: 'Acompte factur√©', action: 'acompte', variant: 'warning' };
      
      case 'solde':
        if (isDatePassed)
          return { message: 'Concert termin√©', action: 'completed', variant: 'secondary' };
        return { message: 'Solde factur√©', action: 'solde', variant: 'info' };
        
      case 'annule':
        return { message: 'Concert annul√©', action: 'annule', variant: 'danger' };
        
      default:
        return { message: concert.statut || 'Non d√©fini', action: 'unknown', variant: 'light' };
    }
  };
  
  return {
    statusDetailsMap,
    getStatusDetails,
    getContractButtonVariant,
    getContractTooltip,
    getStatusMessage
  };
};

export default useConcertStatus;
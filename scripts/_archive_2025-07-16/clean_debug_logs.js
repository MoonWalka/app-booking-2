#!/usr/bin/env node

/**
 * Script de nettoyage intelligent des logs de d√©bogage
 * 
 * Ce script supprime les logs de d√©bogage temporaires tout en pr√©servant :
 * - Les logs d'erreur l√©gitimes (console.error)
 * - Les logs de warning importants (console.warn)
 * - Les logs de production n√©cessaires
 * 
 * @author TourCraft Team
 * @since 2025
 */

const fs = require('fs');
const path = require('path');
const glob = require('glob');

// Configuration du nettoyage
const CONFIG = {
  // Patterns de logs √† supprimer
  DEBUG_PATTERNS: [
    // Logs de trace temporaires
    /console\.log\(`?\[TRACE-UNIQUE\].*?\);?/g,
    /console\.log\(`?\[DEBUG\].*?\);?/g,
    /console\.log\(`?\[DIAGNOSTIC\].*?\);?/g,
    /console\.log\(`?\[LOG\].*?\);?/g,
    /console\.log\(`?\[CACHE.*?\].*?\);?/g,
    /console\.log\(`?\[SYNC\].*?\);?/g,
    /console\.log\(`?\[ASSOCIATION.*?\].*?\);?/g,
    /console\.log\(`?\[INFO\].*?\);?/g,
    /console\.log\(`?\[TRACE\].*?\);?/g,
    /console\.log\(`?\[TEST-TRACE.*?\].*?\);?/g,
    
    // Logs de hooks g√©n√©riques avec patterns sp√©cifiques
    /console\.log\(`?\[use.*?\].*?\);?/g,
    /console\.log\(`?\[.*?FieldActions\].*?\);?/g,
    /console\.log\(`?\[.*?Status\].*?\);?/g,
    /console\.log\(`?\[useGeneric.*?\].*?\);?/g,
    
    // Logs de performance et cache
    /console\.log\(`?üîÑ.*?\);?/g,
    /console\.log\(`?üìä.*?\);?/g,
    /console\.log\(`?‚úÖ.*?\);?/g,
    /console\.log\(`?üóëÔ∏è.*?\);?/g,
    /console\.log\(`?üì§.*?\);?/g,
    /console\.log\(`?üìè.*?\);?/g,
    /console\.log\(`?üÜï.*?\);?/g,
    /console\.log\(`?üîç.*?\);?/g,
    /console\.log\(`?üìñ.*?\);?/g,
    /console\.log\(`?üì¶.*?\);?/g,
    /console\.log\(`?üî•.*?\);?/g,
    /console\.log\(`?üíæ.*?\);?/g,
    /console\.log\(`?‚ö°.*?\);?/g,
    /console\.log\(`?üßπ.*?\);?/g,
    /console\.log\(`?üì•.*?\);?/g,
    
    // Logs sp√©cifiques aux hooks et composants
    /console\.log\(`?\[.*?Form\].*?\);?/g,
    /console\.log\(`?\[.*?Details\].*?\);?/g,
    /console\.log\(`?\[.*?Delete\].*?\);?/g,
    /console\.log\(`?\[.*?Search\].*?\);?/g,
    /console\.log\(`?\[.*?Component\].*?\);?/g,
    /console\.log\(`?\[.*?Page\].*?\);?/g,
    /console\.log\(`?\[.*?View\].*?\);?/g,
    /console\.log\(`?\[.*?Section\].*?\);?/g,
    /console\.log\(`?\[.*?Button\].*?\);?/g,
    /console\.log\(`?\[.*?Wrapper\].*?\);?/g,
    
    // Logs avec patterns de route et navigation
    /console\.log\(`?\[üîç ROUTE\].*?\);?/g,
    /console\.log\(.*?Route:.*?\);?/g,
    /console\.log\(.*?location\.pathname.*?\);?/g,
    
    // Logs de d√©bogage g√©n√©raux
    /console\.log\(.*?after useGenericEntityForm.*?\);?/g,
    /console\.log\(.*?formData changed.*?\);?/g,
    /console\.log\(.*?handleChange appel√©.*?\);?/g,
    /console\.log\(.*?Apr√®s handleChange.*?\);?/g,
    /console\.log\(.*?appel√© avec.*?\);?/g,
    /console\.log\(.*?State:.*?\);?/g,
    /console\.log\(.*?Loading:.*?\);?/g,
    /console\.log\(.*?FormData:.*?\);?/g,
    /console\.log\(.*?onClick d√©clench√©.*?\);?/g,
    /console\.log\(.*?Montage du wrapper.*?\);?/g,
    /console\.log\(.*?useEffect d√©clench√©.*?\);?/g,
    /console\.log\(.*?Affichage du.*?\);?/g,
    /console\.log\(.*?Rendu des.*?\);?/g,
    /console\.log\(.*?D√©marrage.*?\);?/g,
    /console\.log\(.*?termin√©e.*?\);?/g,
    /console\.log\(.*?Entit√©s charg√©es.*?\);?/g,
    /console\.log\(.*?Annulation.*?\);?/g,
    /console\.log\(.*?Entit√© charg√©e.*?\);?/g,
    /console\.log\(.*?existe, appel.*?\);?/g,
    /console\.log\(.*?Suppression r√©ussie.*?\);?/g,
    /console\.log\(.*?re√ßus du hook.*?\);?/g,
    /console\.log\(.*?Prop.*?re√ßue.*?\);?/g,
    /console\.log\(.*?Source de.*?utilis√©e.*?\);?/g,
    /console\.log\(.*?Chargement local.*?\);?/g,
    /console\.log\(.*?charg√©s depuis.*?\);?/g,
    /console\.log\(.*?par requ√™te inverse.*?\);?/g,
    /console\.log\(.*?Ce composant est ex√©cut√©.*?\);?/g,
    /console\.log\(.*?Ce fichier est bien ex√©cut√©.*?\);?/g,
    /console\.log\(.*?Nouvelle valeur.*?\);?/g,
    /console\.log\(.*?Avant safeSetState.*?\);?/g,
    /console\.log\(.*?setShowDeleteModal.*?\);?/g,
    /console\.log\(.*?handleDelete appel√©.*?\);?/g,
    /console\.log\(.*?handleCreate appel√©.*?\);?/g,
    /console\.log\(.*?handleDeleteSuccess.*?\);?/g,
    /console\.log\(.*?handleDeleteClick.*?\);?/g,
    /console\.log\(.*?handleProgrammateurChange.*?\);?/g,
    /console\.log\(.*?setFormData.*?\);?/g,
    /console\.log\(.*?Traitement de l'association.*?\);?/g,
    /console\.log\(.*?Association.*?trait√©e.*?\);?/g,
    /console\.log\(.*?Suppression de l'association.*?\);?/g,
    /console\.log\(.*?Association.*?supprim√©e.*?\);?/g,
    /console\.log\(.*?Association.*?ignor√©e.*?\);?/g,
    /console\.log\(.*?transformConcertData.*?\);?/g,
    /console\.log\(.*?retourne:.*?\);?/g,
    /console\.log\(.*?isNewConcert:.*?\);?/g,
    /console\.log\(.*?Retourne\. formData.*?\);?/g,
    /console\.log\(.*?√âl√©ment s√©lectionn√©.*?\);?/g,
    /console\.log\(.*?√âtat mis √† jour.*?\);?/g,
    /console\.log\(.*?trouv√©s par r√©f√©rence.*?\);?/g,
    /console\.log\(.*?Pas de mod√®le par d√©faut.*?\);?/g,
    /console\.log\(.*?Donn√©es √©mulateur r√©cup√©r√©es.*?\);?/g,
    /console\.log\(.*?Mode debug.*?\);?/g,
    /console\.log\(.*?Diagnostic de performance.*?\);?/g,
    
    // Logs comment√©s (√† supprimer compl√®tement)
    /\/\/ console\.log\(.*?\);?/g,
  ],
  
  // Patterns √† pr√©server (ne pas supprimer)
  PRESERVE_PATTERNS: [
    // Logs d'erreur l√©gitimes
    /console\.error\(/,
    // Warnings importants
    /console\.warn\(.*?(Erreur|Error|‚ö†Ô∏è)/,
    // Logs de production dans loggerService
    /loggerService\.js.*console\./,
    // Logs dans setupTests (configuration)
    /setupTests\.js.*console\./,
    // Logs dans diagnostic.js (outil de diagnostic)
    /diagnostic\.js.*console\.log.*Diagnostic/,
  ],
  
  // Fichiers √† traiter
  INCLUDE_PATTERNS: [
    'src/**/*.js',
    'src/**/*.jsx'
  ],
  
  // Fichiers √† exclure
  EXCLUDE_PATTERNS: [
    'src/services/loggerService.js', // Service de logs l√©gitime
    'src/setupTests.js', // Configuration de tests
    'src/diagnostic.js', // Outil de diagnostic
    'node_modules/**',
    'build/**',
    'dist/**'
  ]
};

class DebugLogCleaner {
  constructor() {
    this.stats = {
      filesProcessed: 0,
      logsRemoved: 0,
      filesModified: 0,
      errors: 0
    };
    this.dryRun = process.argv.includes('--dry-run');
    this.verbose = process.argv.includes('--verbose');
  }
  
  log(message, level = 'info') {
    const prefix = {
      info: 'üßπ',
      success: '‚úÖ',
      warning: '‚ö†Ô∏è',
      error: '‚ùå',
      debug: 'üîç'
    }[level] || '‚ÑπÔ∏è';
    
    console.log(`${prefix} ${message}`);
  }
  
  shouldPreserveLog(line, filePath) {
    // V√©rifier si le log doit √™tre pr√©serv√©
    return CONFIG.PRESERVE_PATTERNS.some(pattern => {
      if (pattern instanceof RegExp) {
        return pattern.test(line);
      }
      return line.includes(pattern);
    });
  }
  
  cleanDebugLogs(content, filePath) {
    let modifiedContent = content;
    let removedCount = 0;
    
    const lines = content.split('\n');
    const cleanedLines = [];
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      let shouldRemove = false;
      
      // V√©rifier si la ligne doit √™tre pr√©serv√©e
      if (this.shouldPreserveLog(line, filePath)) {
        cleanedLines.push(line);
        continue;
      }
      
      // V√©rifier si la ligne correspond aux patterns de d√©bogage
      for (const pattern of CONFIG.DEBUG_PATTERNS) {
        if (pattern.test(line)) {
          shouldRemove = true;
          removedCount++;
          
          if (this.verbose) {
            this.log(`Suppression: ${line.trim()}`, 'debug');
          }
          break;
        }
      }
      
      if (!shouldRemove) {
        cleanedLines.push(line);
      }
    }
    
    return {
      content: cleanedLines.join('\n'),
      removedCount
    };
  }
  
  shouldExcludeFile(filePath) {
    return CONFIG.EXCLUDE_PATTERNS.some(pattern => {
      if (pattern.includes('*')) {
        return filePath.match(pattern.replace(/\*/g, '.*'));
      }
      return filePath.includes(pattern);
    });
  }
  
  async processFile(filePath) {
    try {
      this.stats.filesProcessed++;
      
      if (this.shouldExcludeFile(filePath)) {
        if (this.verbose) {
          this.log(`Fichier exclu: ${filePath}`, 'debug');
        }
        return;
      }
      
      const content = fs.readFileSync(filePath, 'utf8');
      const { content: cleanedContent, removedCount } = this.cleanDebugLogs(content, filePath);
      
      if (removedCount > 0) {
        this.stats.logsRemoved += removedCount;
        this.stats.filesModified++;
        
        this.log(`${filePath}: ${removedCount} logs supprim√©s`, 'success');
        
        if (!this.dryRun) {
          fs.writeFileSync(filePath, cleanedContent, 'utf8');
        }
      } else if (this.verbose) {
        this.log(`${filePath}: aucun log √† supprimer`, 'debug');
      }
      
    } catch (error) {
      this.stats.errors++;
      this.log(`Erreur lors du traitement de ${filePath}: ${error.message}`, 'error');
    }
  }
  
  async run() {
    this.log('üöÄ D√©marrage du nettoyage des logs de d√©bogage...', 'info');
    
    if (this.dryRun) {
      this.log('Mode DRY RUN activ√© - aucun fichier ne sera modifi√©', 'warning');
    }
    
    // Collecter tous les fichiers √† traiter
    const allFiles = [];
    
    for (const pattern of CONFIG.INCLUDE_PATTERNS) {
      const files = glob.sync(pattern, { 
        ignore: CONFIG.EXCLUDE_PATTERNS,
        absolute: true 
      });
      allFiles.push(...files);
    }
    
    // Supprimer les doublons
    const uniqueFiles = [...new Set(allFiles)];
    
    this.log(`üìÅ ${uniqueFiles.length} fichiers √† traiter`, 'info');
    
    // Traiter chaque fichier
    for (const filePath of uniqueFiles) {
      await this.processFile(filePath);
    }
    
    // Afficher les statistiques
    this.displayStats();
  }
  
  displayStats() {
    this.log('\nüìä STATISTIQUES DE NETTOYAGE', 'info');
    this.log(`Fichiers trait√©s: ${this.stats.filesProcessed}`, 'info');
    this.log(`Fichiers modifi√©s: ${this.stats.filesModified}`, 'success');
    this.log(`Logs supprim√©s: ${this.stats.logsRemoved}`, 'success');
    
    if (this.stats.errors > 0) {
      this.log(`Erreurs: ${this.stats.errors}`, 'error');
    }
    
    if (this.dryRun) {
      this.log('\n‚ö†Ô∏è Mode DRY RUN - Aucun fichier n\'a √©t√© modifi√©', 'warning');
      this.log('Ex√©cutez sans --dry-run pour appliquer les changements', 'info');
    } else {
      this.log('\n‚úÖ Nettoyage termin√© avec succ√®s !', 'success');
    }
  }
}

// Ex√©cution du script
if (require.main === module) {
  const cleaner = new DebugLogCleaner();
  
  // Afficher l'aide si demand√©e
  if (process.argv.includes('--help') || process.argv.includes('-h')) {
    console.log(`
üßπ Script de nettoyage des logs de d√©bogage

Usage:
  node scripts/clean_debug_logs.js [options]

Options:
  --dry-run    Mode simulation (aucun fichier modifi√©)
  --verbose    Affichage d√©taill√©
  --help, -h   Afficher cette aide

Exemples:
  node scripts/clean_debug_logs.js --dry-run    # Simulation
  node scripts/clean_debug_logs.js --verbose    # Nettoyage avec d√©tails
  node scripts/clean_debug_logs.js             # Nettoyage standard
`);
    process.exit(0);
  }
  
  cleaner.run().catch(error => {
    console.error('‚ùå Erreur fatale:', error);
    process.exit(1);
  });
}

module.exports = DebugLogCleaner; 
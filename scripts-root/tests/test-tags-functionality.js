#!/usr/bin/env node

/**
 * Script de test pour v√©rifier que la fonctionnalit√© des tags est bien impl√©ment√©e
 */

const fs = require('fs');
const path = require('path');

console.log('üîç Test de la fonctionnalit√© Tags...\n');

// V√©rifier que tous les fichiers n√©cessaires existent
const filesToCheck = [
  'src/pages/ContactTagsPage.js',
  'src/components/contact/parametrage/TagsManager.js',
  'src/components/contacts/ContactsListFiltered.js',
  'src/components/tabs/TabManagerProduction.js',
  'src/config/tagsHierarchy.js'
];

let allFilesExist = true;
filesToCheck.forEach(file => {
  const fullPath = path.join(__dirname, file);
  if (fs.existsSync(fullPath)) {
    console.log(`‚úÖ ${file} - Existe`);
  } else {
    console.log(`‚ùå ${file} - Manquant`);
    allFilesExist = false;
  }
});

if (!allFilesExist) {
  console.log('\n‚ùå Certains fichiers sont manquants!');
  process.exit(1);
}

// V√©rifier que les routes sont configur√©es
const appJsPath = path.join(__dirname, 'src/App.js');
const appJsContent = fs.readFileSync(appJsPath, 'utf8');

if (appJsContent.includes('/contacts/tags')) {
  console.log('‚úÖ Route /contacts/tags configur√©e dans App.js');
} else {
  console.log('‚ùå Route /contacts/tags manquante dans App.js');
}

// V√©rifier que le menu est configur√©
const layoutPath = path.join(__dirname, 'src/components/common/layout/DesktopLayout.js');
const layoutContent = fs.readFileSync(layoutPath, 'utf8');

if (layoutContent.includes('"Tags"') && layoutContent.includes('/contacts/tags')) {
  console.log('‚úÖ Menu Tags configur√© dans DesktopLayout.js');
} else {
  console.log('‚ùå Menu Tags manquant dans DesktopLayout.js');
}

// V√©rifier les hi√©rarchies de tags
const tagsHierarchyPath = path.join(__dirname, 'src/config/tagsHierarchy.js');
const tagsHierarchyContent = fs.readFileSync(tagsHierarchyPath, 'utf8');

const hierarchies = ['TAGS_HIERARCHY', 'GENRES_HIERARCHY', 'RESEAUX_HIERARCHY', 'MOTS_CLES_HIERARCHY'];
hierarchies.forEach(hierarchy => {
  if (tagsHierarchyContent.includes(`export const ${hierarchy}`)) {
    console.log(`‚úÖ ${hierarchy} d√©finie`);
  } else {
    console.log(`‚ùå ${hierarchy} manquante`);
  }
});

// V√©rifier que TabManager inclut ContactsListFiltered
const tabManagerPath = path.join(__dirname, 'src/components/tabs/TabManagerProduction.js');
const tabManagerContent = fs.readFileSync(tabManagerPath, 'utf8');

if (tabManagerContent.includes('ContactsListFiltered') && tabManagerContent.includes("case 'ContactsListFiltered'")) {
  console.log('‚úÖ ContactsListFiltered int√©gr√© dans TabManager');
} else {
  console.log('‚ùå ContactsListFiltered manquant dans TabManager');
}

console.log('\nüéØ Instructions pour tester manuellement:');
console.log('1. Red√©marrez le serveur de d√©veloppement : npm start');
console.log('2. Ouvrez votre navigateur sur http://localhost:3000');
console.log('3. Naviguez vers Contact > Tags dans le menu');
console.log('4. V√©rifiez que vous voyez les 4 sections: Activit√©s, Genres, R√©seaux, Mots-cl√©s');
console.log('5. Cliquez sur "Activit√©s" et v√©rifiez le tableau hi√©rarchique');
console.log('6. Cherchez des tags avec un nombre > 0 et cliquez dessus');
console.log('7. V√©rifiez qu\'un nouvel onglet s\'ouvre avec les contacts filtr√©s');

console.log('\n‚úÖ V√©rification termin√©e!');
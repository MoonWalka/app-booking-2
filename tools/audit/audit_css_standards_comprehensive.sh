#!/bin/bash

# Audit CSS Complet - √âtat de la Recommandation #7
# Analyse l'√©tat actuel de la standardisation CSS vs les recommandations

set -e

echo "üé® AUDIT CSS COMPLET - Recommandation #7"
echo "========================================"
echo "Analyse pointue de l'√©tat actuel CSS vs documentation existante"
echo ""

# Compteurs globaux
TOTAL_ISSUES=0
SCORE=100

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_score() {
    local points_lost=$1
    local reason="$2"
    SCORE=$((SCORE - points_lost))
    echo -e "${RED}   -$points_lost points: $reason${NC}"
    ((TOTAL_ISSUES++))
}

print_success() {
    local message="$1"
    echo -e "${GREEN}   ‚úÖ $message${NC}"
}

print_warning() {
    local message="$1"
    echo -e "${YELLOW}   ‚ö†Ô∏è  $message${NC}"
}

print_info() {
    local message="$1"
    echo -e "${BLUE}   ‚ÑπÔ∏è  $message${NC}"
}

echo "üìä 1. AUDIT DE LA DOCUMENTATION EXISTANTE"
echo "=========================================="

# V√©rifier la documentation CSS
docs_found=0
echo "üîç Documentation CSS trouv√©e:"

if [ -f "docs/css/GUIDE_STANDARDISATION_CSS.md" ]; then
    lines=$(wc -l < docs/css/GUIDE_STANDARDISATION_CSS.md)
    print_success "Guide standardisation CSS ($lines lignes) - EXCELLENT"
    ((docs_found++))
fi

if [ -f "docs/standards/CSS_STYLE_GUIDE.md" ]; then
    lines=$(wc -l < docs/standards/CSS_STYLE_GUIDE.md)
    print_success "Guide de style CSS ($lines lignes) - EXCELLENT"
    ((docs_found++))
fi

if [ -f "docs/css/ARCHITECTURE_CSS.md" ]; then
    lines=$(wc -l < docs/css/ARCHITECTURE_CSS.md)
    print_success "Architecture CSS ($lines lignes) - EXCELLENT"
    ((docs_found++))
fi

if [ -f "src/styles/README.md" ]; then
    lines=$(wc -l < src/styles/README.md)
    print_success "README styles ($lines lignes) - BON"
    ((docs_found++))
fi

if [ -f "css_fallback_removal_guide.md" ]; then
    print_success "Guide suppression fallbacks CSS - BON"
    ((docs_found++))
fi

echo ""
echo "üìà Analyse de la documentation:"
if [ "$docs_found" -ge 4 ]; then
    print_success "$docs_found guides CSS trouv√©s - Documentation EXCELLENTE"
else
    print_score 10 "Documentation CSS incompl√®te ($docs_found/4 guides)"
fi

echo ""
echo "üìä 2. AUDIT DE L'ARCHITECTURE STYLESSHEET"
echo "=========================================="

# V√©rifier l'organisation des fichiers styles
echo "üèóÔ∏è Structure src/styles/:"
if [ -d "src/styles/base" ] && [ -d "src/styles/components" ]; then
    print_success "Structure organis√©e (base/ et components/)"
else
    print_score 5 "Structure styles mal organis√©e"
fi

# V√©rifier les fichiers fondamentaux
echo ""
echo "üîç Fichiers fondamentaux:"
fundamental_files=("src/styles/base/variables.css" "src/styles/base/colors.css" "src/styles/base/typography.css")
found_fundamental=0

for file in "${fundamental_files[@]}"; do
    if [ -f "$file" ]; then
        lines=$(wc -l < "$file")
        print_success "$(basename "$file") ($lines lignes)"
        ((found_fundamental++))
    else
        print_score 5 "Fichier fondamental manquant: $file"
    fi
done

# Score pour les fichiers fondamentaux
if [ "$found_fundamental" -eq 3 ]; then
    print_success "Tous les fichiers fondamentaux pr√©sents"
fi

echo ""
echo "üìä 3. AUDIT DES VARIABLES CSS STANDARDIS√âES"
echo "============================================"

# Compter les variables --tc-
tc_vars=$(grep -r "^\s*--tc-" src/styles/ 2>/dev/null | wc -l || echo "0")
echo "üîç Variables --tc- d√©finies: $tc_vars"

if [ "$tc_vars" -gt 100 ]; then
    print_success "$tc_vars variables --tc- d√©finies - EXCELLENT syst√®me"
elif [ "$tc_vars" -gt 50 ]; then
    print_success "$tc_vars variables --tc- d√©finies - BON syst√®me"
else
    print_score 15 "Trop peu de variables --tc- d√©finies ($tc_vars)"
fi

# V√©rifier l'utilisation des variables
echo ""
echo "üîç Utilisation des variables --tc-:"
tc_usage=$(grep -r "var(--tc-" src/ 2>/dev/null | wc -l || echo "0")
print_info "$tc_usage usages de variables --tc- dans le code"

if [ "$tc_usage" -gt 500 ]; then
    print_success "Utilisation massive des variables --tc- - EXCELLENT"
elif [ "$tc_usage" -gt 200 ]; then
    print_success "Bonne utilisation des variables --tc-"
else
    print_score 10 "Utilisation limit√©e des variables --tc- ($tc_usage usages)"
fi

echo ""
echo "üìä 4. AUDIT DE LA COH√âRENCE DES APPROCHES"
echo "=========================================="

# V√©rifier les CSS Modules
css_modules=$(find src -name "*.module.css" | wc -l)
print_info "$css_modules fichiers CSS Modules trouv√©s"

if [ "$css_modules" -gt 200 ]; then
    print_success "Utilisation syst√©matique des CSS Modules - EXCELLENT"
elif [ "$css_modules" -gt 100 ]; then
    print_success "Bonne utilisation des CSS Modules"
else
    print_score 10 "Utilisation limit√©e des CSS Modules ($css_modules fichiers)"
fi

# V√©rifier l'utilisation directe de classes Bootstrap
echo ""
echo "üîç Utilisation directe de classes Bootstrap:"
bootstrap_usage=$(grep -r "className.*btn btn-" src/ 2>/dev/null | wc -l || echo "0")
print_info "$bootstrap_usage usages directs de classes Bootstrap btn"

if [ "$bootstrap_usage" -eq 0 ]; then
    print_success "Aucune utilisation directe de Bootstrap - PARFAIT"
elif [ "$bootstrap_usage" -lt 20 ]; then
    print_warning "Quelques usages directs de Bootstrap ($bootstrap_usage) - √Ä migrer"
    print_score 5 "Utilisation directe Bootstrap encore pr√©sente"
else
    print_score 15 "Trop d'utilisation directe de Bootstrap ($bootstrap_usage usages)"
fi

# V√©rifier l'existence du composant Button standardis√©
echo ""
echo "üîç Composant Button standardis√©:"
if [ -f "src/components/ui/Button.js" ]; then
    button_imports=$(grep -r "import.*Button.*from.*ui" src/ 2>/dev/null | wc -l || echo "0")
    print_success "Composant Button.js trouv√© avec $button_imports usages"
    
    if [ "$button_imports" -gt 20 ]; then
        print_success "Composant Button largement utilis√© - EXCELLENT"
    else
        print_score 5 "Composant Button sous-utilis√© ($button_imports imports)"
    fi
else
    print_score 20 "Composant Button standardis√© manquant"
fi

echo ""
echo "üìä 5. AUDIT DES STANDARDS DE RESPONSIVE"
echo "======================================="

# V√©rifier les media queries mobile-first
mobile_first=$(grep -r "@media (min-width:" src/ 2>/dev/null | wc -l || echo "0")
max_width=$(grep -r "@media (max-width:" src/ 2>/dev/null | wc -l || echo "0")

print_info "$mobile_first media queries mobile-first (min-width)"
print_info "$max_width media queries desktop-first (max-width)"

if [ "$mobile_first" -gt "$max_width" ]; then
    print_success "Approche mobile-first dominante - BON"
else
    print_score 5 "Approche mobile-first pas dominante"
fi

# V√©rifier les breakpoints standardis√©s
echo ""
echo "üîç Breakpoints standardis√©s:"
breakpoint_vars=$(grep -r "--tc-breakpoint" src/styles/ 2>/dev/null | wc -l || echo "0")
if [ "$breakpoint_vars" -gt 0 ]; then
    print_success "$breakpoint_vars variables de breakpoints standardis√©es"
else
    print_score 5 "Breakpoints non standardis√©s en variables"
fi

echo ""
echo "üìä 6. AUDIT DES FALLBACKS CSS"
echo "============================="

# V√©rifier s'il reste des fallbacks CSS
fallbacks=$(grep -r "var(--tc-[^,)]*," src/ 2>/dev/null | wc -l || echo "0")
print_info "$fallbacks fallbacks CSS trouv√©s"

if [ "$fallbacks" -eq 0 ]; then
    print_success "Aucun fallback CSS - PARFAIT (nettoyage termin√©)"
elif [ "$fallbacks" -lt 50 ]; then
    print_warning "Quelques fallbacks restants ($fallbacks) - Nettoyage presque termin√©"
    print_score 3 "Fallbacks CSS encore pr√©sents"
else
    print_score 10 "Trop de fallbacks CSS encore pr√©sents ($fallbacks)"
fi

echo ""
echo "üìä 7. AUDIT DES OUTILS ET SCRIPTS CSS"
echo "===================================="

# V√©rifier les outils CSS dans tools/css/
css_tools=$(find tools/css -name "*.sh" 2>/dev/null | wc -l || echo "0")
print_info "$css_tools scripts CSS dans tools/css/"

if [ "$css_tools" -gt 8 ]; then
    print_success "Bo√Æte √† outils CSS compl√®te ($css_tools scripts)"
elif [ "$css_tools" -gt 5 ]; then
    print_success "Bons outils CSS disponibles ($css_tools scripts)"
else
    print_score 5 "Outils CSS limit√©s ($css_tools scripts)"
fi

# V√©rifier si les guides mentionnent l'automatisation
echo ""
echo "üîç Automatisation document√©e:"
if grep -q "script" docs/css/GUIDE_STANDARDISATION_CSS.md 2>/dev/null; then
    print_success "Automatisation document√©e dans le guide"
else
    print_score 3 "Automatisation pas document√©e"
fi

echo ""
echo "üìä 8. AUDIT DES INCONSISTANCES"
echo "=============================="

# Chercher les m√©langes d'approches
echo "üîç Incoh√©rences d√©tect√©es:"

# Styles inline
inline_styles=$(grep -r "style={{" src/ 2>/dev/null | wc -l || echo "0")
print_info "$inline_styles styles inline trouv√©s"

if [ "$inline_styles" -eq 0 ]; then
    print_success "Aucun style inline - PARFAIT"
elif [ "$inline_styles" -lt 20 ]; then
    print_warning "Quelques styles inline ($inline_styles) - Acceptable"
else
    print_score 10 "Trop de styles inline ($inline_styles)"
fi

# Valeurs cod√©es en dur dans CSS
echo ""
echo "üîç Valeurs cod√©es en dur:"
hardcoded_colors=$(grep -r "#[0-9a-fA-F]\{3,6\}" src/ --include="*.css" 2>/dev/null | grep -v "var(" | wc -l || echo "0")
hardcoded_pixels=$(grep -r "[0-9]\+px" src/ --include="*.css" 2>/dev/null | grep -v "var(" | wc -l || echo "0")

print_info "$hardcoded_colors couleurs cod√©es en dur dans CSS"
print_info "$hardcoded_pixels valeurs px cod√©es en dur dans CSS"

total_hardcoded=$((hardcoded_colors + hardcoded_pixels))
if [ "$total_hardcoded" -eq 0 ]; then
    print_success "Aucune valeur cod√©e en dur - PARFAIT"
elif [ "$total_hardcoded" -lt 100 ]; then
    print_warning "Quelques valeurs cod√©es en dur ($total_hardcoded) - Acceptable"
else
    print_score 15 "Trop de valeurs cod√©es en dur ($total_hardcoded)"
fi

echo ""
echo "üéØ R√âSUM√â FINAL DE L'AUDIT CSS"
echo "==============================="

echo "üìä Statistiques globales:"
echo "   üìÅ Fichiers CSS total: $(find src -name "*.css" | wc -l)"
echo "   üìÑ CSS Modules: $css_modules"
echo "   üé® Variables --tc-: $tc_vars d√©finies, $tc_usage usages"
echo "   üìö Documentation: $docs_found guides"
echo "   üõ†Ô∏è  Outils: $css_tools scripts"
echo "   üö® Probl√®mes d√©tect√©s: $TOTAL_ISSUES"

echo ""
echo "üèÜ √âVALUATION FINALE:"

# Calcul du score final
if [ "$SCORE" -ge 90 ]; then
    echo -e "${GREEN}üéâ EXCELLENT! Score: $SCORE/100${NC}"
    echo -e "${GREEN}   La recommandation #7 est en fait tr√®s avanc√©e !${NC}"
    recommendation="Recommandation #7 quasiment termin√©e - Score excellent"
elif [ "$SCORE" -ge 70 ]; then
    echo -e "${YELLOW}üëç BON! Score: $SCORE/100${NC}"
    echo -e "${YELLOW}   La recommandation #7 est bien avanc√©e${NC}"
    recommendation="Recommandation #7 en bonne voie - Quelques ajustements"
elif [ "$SCORE" -ge 50 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  MOYEN! Score: $SCORE/100${NC}"
    echo -e "${YELLOW}   La recommandation #7 a du travail fait mais reste √† compl√©ter${NC}"
    recommendation="Recommandation #7 partiellement avanc√©e"
else
    echo -e "${RED}‚ùå INSUFFISANT! Score: $SCORE/100${NC}"
    echo -e "${RED}   La recommandation #7 n√©cessite beaucoup de travail${NC}"
    recommendation="Recommandation #7 peu avanc√©e"
fi

echo ""
echo "üéØ CONCLUSION SUR LA RECOMMANDATION #7:"
echo "========================================"

if [ "$SCORE" -ge 80 ]; then
    echo -e "${GREEN}üöÄ D√âCOUVERTE MAJEURE:${NC}"
    echo -e "${GREEN}   La recommandation #7 √©tait mal √©valu√©e √† 0% !${NC}"
    echo -e "${GREEN}   L'√©tat r√©el est beaucoup plus avanc√©.${NC}"
    echo ""
    echo -e "${GREEN}‚úÖ CE QUI A D√âJ√Ä √âT√â FAIT:${NC}"
    echo -e "${GREEN}   ‚Ä¢ Documentation CSS tr√®s compl√®te ($docs_found guides)${NC}"
    echo -e "${GREEN}   ‚Ä¢ Architecture de styles organis√©e${NC}"
    echo -e "${GREEN}   ‚Ä¢ Syst√®me de variables --tc- d√©ploy√© ($tc_vars variables)${NC}"
    echo -e "${GREEN}   ‚Ä¢ CSS Modules largement utilis√©s ($css_modules fichiers)${NC}"
    echo -e "${GREEN}   ‚Ä¢ Composant Button standardis√© op√©rationnel${NC}"
    echo -e "${GREEN}   ‚Ä¢ Outils d'automatisation CSS disponibles${NC}"
    echo ""
    new_percentage=$(( (SCORE * 85) / 100 ))
    echo -e "${GREEN}üìä R√â√âVALUATION: Recommandation #7 √† ${new_percentage}% (pas 0%)${NC}"
fi

echo ""
echo "üéØ ACTIONS PRIORITAIRES pour finaliser:"
if [ "$bootstrap_usage" -gt 0 ]; then
    echo "   1. üîß Migrer $bootstrap_usage usages Bootstrap ‚Üí composants standardis√©s"
fi
if [ "$fallbacks" -gt 0 ]; then
    echo "   2. üßπ Nettoyer $fallbacks fallbacks CSS restants"
fi
if [ "$inline_styles" -gt 10 ]; then
    echo "   3. üìù Convertir $inline_styles styles inline ‚Üí CSS Modules"
fi
if [ "$total_hardcoded" -gt 50 ]; then
    echo "   4. üé® Remplacer $total_hardcoded valeurs cod√©es ‚Üí variables --tc-"
fi

echo ""
echo -e "${BLUE}üí° RECOMMANDATION FINALE:${NC}"
echo -e "${BLUE}   R√©√©valuer la recommandation #7 de 0% √† $(( (SCORE * 85) / 100 ))%${NC}"
echo -e "${BLUE}   Le travail de fond est d√©j√† largement accompli !${NC}"

echo ""
echo "üìÖ Audit termin√© le $(date)" 
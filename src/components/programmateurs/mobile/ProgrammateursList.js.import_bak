// src/components/programmateurs/mobile/ProgrammateursList.js
import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { collection, getDocs, query, orderBy, deleteDoc, doc } from 'firebase/firestore';
import { db } from '../../../firebase.js.m1fix.bak';
import { Button, Form, InputGroup, Spinner } from 'react-bootstrap';
import '../../../style/programmateursListMobile.css';

const ProgrammateursListMobile = () => {
  const navigate = useNavigate();
  const [programmateurs, setProgrammateurs] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredProgrammateurs, setFilteredProgrammateurs] = useState([]);

  // Charger les programmateurs
  useEffect(() => {
    const fetchProgrammateurs = async () => {
      try {
        setLoading(true);
        const programmateursRef = collection(db, 'programmateurs');
        const q = query(programmateursRef, orderBy('nom', 'asc'));
        const querySnapshot = await getDocs(q);

        const programmateursData = querySnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        }));

        setProgrammateurs(programmateursData);
        setFilteredProgrammateurs(programmateursData);
        setLoading(false);
      } catch (error) {
        console.error('Erreur lors du chargement des programmateurs:', error);
        setLoading(false);
      }
    };

    fetchProgrammateurs();
  }, []);

  // Filtrer les programmateurs en fonction du terme de recherche
  useEffect(() => {
    if (searchTerm) {
      const filtered = programmateurs.filter(prog => 
        prog.nom.toLowerCase().includes(searchTerm.toLowerCase()) ||
        prog.structure?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        prog.email?.toLowerCase().includes(searchTerm.toLowerCase())
      );
      setFilteredProgrammateurs(filtered);
    } else {
      setFilteredProgrammateurs(programmateurs);
    }
  }, [searchTerm, programmateurs]);

  // Supprimer un programmateur
  const handleDelete = async (id, e) => {
    e.stopPropagation();
    
    if (window.confirm('Êtes-vous sûr de vouloir supprimer ce programmateur ?')) {
      try {
        await deleteDoc(doc(db, 'programmateurs', id));
        setProgrammateurs(programmateurs.filter(prog => prog.id !== id));
      } catch (error) {
        console.error('Erreur lors de la suppression du programmateur:', error);
        alert('Une erreur est survenue lors de la suppression du programmateur.');
      }
    }
  };

  return (
    <div className="programmateurs-mobile-container">
      {/* En-tête avec titre et bouton d'ajout */}
      <div className="programmateurs-header">
        <h1>Programmateurs</h1>
        <Button 
          variant="primary"
          className="programmateurs-add-btn"
          onClick={() => navigate('/programmateurs/nouveau')}
        >
          <i className="bi bi-plus-lg"></i>
        </Button>
      </div>

      {/* Barre de recherche */}
      <div className="programmateurs-search-container">
        <InputGroup>
          <InputGroup.Text>
            <i className="bi bi-search"></i>
          </InputGroup.Text>
          <Form.Control
            type="text"
            placeholder="Rechercher un programmateur..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          {searchTerm && (
            <Button 
              variant="outline-secondary"
              onClick={() => setSearchTerm('')}
            >
              <i className="bi bi-x"></i>
            </Button>
          )}
        </InputGroup>
      </div>

      {/* Liste de programmateurs */}
      {loading ? (
        <div className="loading-container">
          <Spinner animation="border" variant="primary" />
          <p>Chargement des programmateurs...</p>
        </div>
      ) : filteredProgrammateurs.length === 0 ? (
        <div className="empty-state">
          <i className="bi bi-person-badge"></i>
          <p>Aucun programmateur trouvé</p>
          <Button 
            variant="primary"
            onClick={() => navigate('/programmateurs/nouveau')}
          >
            <i className="bi bi-plus-circle me-2"></i>
            Ajouter un programmateur
          </Button>
        </div>
      ) : (
        <div className="programmateurs-list-mobile">
          {filteredProgrammateurs.map(prog => (
            <div 
              key={prog.id}
              className="programmateur-card"
              onClick={() => navigate(`/programmateurs/${prog.id}`)}
            >
              <div className="programmateur-info">
                <h3 className="programmateur-name">{prog.nom}</h3>
                {prog.structure && (
                  <div className="programmateur-structure">{prog.structure}</div>
                )}
                {prog.email && (
                  <div className="programmateur-contact">
                    <i className="bi bi-envelope"></i>
                    <span>{prog.email}</span>
                  </div>
                )}
                {prog.telephone && (
                  <div className="programmateur-contact">
                    <i className="bi bi-telephone"></i>
                    <span>{prog.telephone}</span>
                  </div>
                )}
                <div className="programmateur-concerts">
                  <i className="bi bi-calendar-event"></i>
                  <span className="concert-count">{prog.concertsAssocies?.length || 0} concerts</span>
                </div>
              </div>
              <div className="programmateur-actions">
                <Link 
                  to={`/programmateurs/edit/${prog.id}`}
                  className="btn btn-sm btn-outline-secondary programmateur-action-btn"
                  onClick={(e) => e.stopPropagation()}
                >
                  <i className="bi bi-pencil"></i>
                </Link>
                <button
                  className="btn btn-sm btn-outline-danger programmateur-action-btn"
                  onClick={(e) => handleDelete(prog.id, e)}
                >
                  <i className="bi bi-trash"></i>
                </button>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default ProgrammateursListMobile;

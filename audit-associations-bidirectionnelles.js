#!/usr/bin/env node

/**
 * Audit complet des associations bidirectionnelles Contact ‚Üî Lieu
 * 
 * Ce script analyse la coh√©rence des relations entre les collections 'programmateurs' et 'lieux'
 * pour identifier les incoh√©rences et les r√©f√©rences cass√©es.
 */

const { initializeApp } = require('firebase/app');
const { getFirestore, collection, getDocs, doc, getDoc } = require('firebase/firestore');

// Initialiser Firebase avec l'√©mulateur ou la vraie base
const app = initializeApp({
  projectId: 'demo-project' // Pour l'√©mulateur
});
const db = getFirestore(app);

async function auditAssociationsBidirectionnelles() {
  console.log('üîç AUDIT COMPLET DES ASSOCIATIONS CONTACT ‚Üî LIEU');
  console.log('=' .repeat(70));

  const rapport = {
    contacts: [],
    lieux: [],
    incoherences: [],
    statistiques: {
      totalContacts: 0,
      totalLieux: 0,
      contactsAvecLieux: 0,
      lieuxAvecContacts: 0,
      associationsCoherentes: 0,
      referencesOrphelines: 0
    }
  };

  try {
    // 1. COLLECTE DES DONN√âES
    console.log('\nüìä Collecte des donn√©es...');
    
    // R√©cup√©rer tous les contacts
    const contactsSnapshot = await getDocs(collection(db, 'programmateurs'));
    const contacts = contactsSnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));
    
    // R√©cup√©rer tous les lieux
    const lieuxSnapshot = await getDocs(collection(db, 'lieux'));
    const lieux = lieuxSnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));

    rapport.statistiques.totalContacts = contacts.length;
    rapport.statistiques.totalLieux = lieux.length;

    console.log(`‚úÖ ${contacts.length} contacts r√©cup√©r√©s`);
    console.log(`‚úÖ ${lieux.length} lieux r√©cup√©r√©s`);

    // 2. ANALYSE DES CONTACTS
    console.log('\nüë• Analyse des contacts...');
    
    for (const contact of contacts) {
      const contactAnalyse = {
        id: contact.id,
        nom: contact.contact?.nom || contact.nom || 'Sans nom',
        email: contact.contact?.email || contact.email || '',
        lieuxReferences: [],
        lieuxReelsAssocies: [],
        structureId: contact.structureId || null,
        incoherences: []
      };

      // V√©rifier les r√©f√©rences de lieux dans le contact
      const lieuxIds = contact.lieuxIds || contact.lieuxAssocies || [];
      if (lieuxIds.length > 0) {
        rapport.statistiques.contactsAvecLieux++;
        
        for (const lieuRef of lieuxIds) {
          const lieuId = typeof lieuRef === 'object' ? lieuRef.id : lieuRef;
          contactAnalyse.lieuxReferences.push(lieuId);
          
          // V√©rifier si le lieu existe vraiment
          const lieuExiste = lieux.find(l => l.id === lieuId);
          if (lieuExiste) {
            contactAnalyse.lieuxReelsAssocies.push({
              id: lieuId,
              nom: lieuExiste.nom,
              retourReference: verifierRetourReference(lieuExiste, contact.id)
            });
          } else {
            contactAnalyse.incoherences.push(`Lieu ${lieuId} r√©f√©renc√© mais n'existe pas`);
            rapport.statistiques.referencesOrphelines++;
          }
        }
      }

      rapport.contacts.push(contactAnalyse);
    }

    // 3. ANALYSE DES LIEUX
    console.log('\nüó∫Ô∏è Analyse des lieux...');
    
    for (const lieu of lieux) {
      const lieuAnalyse = {
        id: lieu.id,
        nom: lieu.nom || 'Sans nom',
        ville: lieu.ville || '',
        contactsReferences: [],
        contactsReelsAssocies: [],
        incoherences: []
      };

      // M√©thode 1: programmateurId (ancien syst√®me)
      if (lieu.programmateurId) {
        rapport.statistiques.lieuxAvecContacts++;
        lieuAnalyse.contactsReferences.push(lieu.programmateurId);
        
        const contactExiste = contacts.find(c => c.id === lieu.programmateurId);
        if (contactExiste) {
          lieuAnalyse.contactsReelsAssocies.push({
            id: lieu.programmateurId,
            nom: contactExiste.contact?.nom || contactExiste.nom,
            retourReference: verifierRetourReferenceLieu(contactExiste, lieu.id)
          });
        } else {
          lieuAnalyse.incoherences.push(`Contact ${lieu.programmateurId} r√©f√©renc√© mais n'existe pas`);
          rapport.statistiques.referencesOrphelines++;
        }
      }

      // M√©thode 2: programmateursAssocies (nouveau syst√®me)
      if (lieu.programmateursAssocies && Array.isArray(lieu.programmateursAssocies)) {
        if (lieu.programmateursAssocies.length > 0) {
          rapport.statistiques.lieuxAvecContacts++;
        }
        
        for (const progRef of lieu.programmateursAssocies) {
          const progId = typeof progRef === 'object' ? progRef.id : progRef;
          if (!lieuAnalyse.contactsReferences.includes(progId)) {
            lieuAnalyse.contactsReferences.push(progId);
          }
          
          const contactExiste = contacts.find(c => c.id === progId);
          if (contactExiste) {
            const dejaAjoute = lieuAnalyse.contactsReelsAssocies.find(c => c.id === progId);
            if (!dejaAjoute) {
              lieuAnalyse.contactsReelsAssocies.push({
                id: progId,
                nom: contactExiste.contact?.nom || contactExiste.nom,
                retourReference: verifierRetourReferenceLieu(contactExiste, lieu.id)
              });
            }
          } else {
            lieuAnalyse.incoherences.push(`Contact ${progId} r√©f√©renc√© mais n'existe pas`);
            rapport.statistiques.referencesOrphelines++;
          }
        }
      }

      rapport.lieux.push(lieuAnalyse);
    }

    // 4. D√âTECTION DES INCOH√âRENCES BIDIRECTIONNELLES
    console.log('\nüîç D√©tection des incoh√©rences bidirectionnelles...');
    
    for (const contact of rapport.contacts) {
      for (const lieuAssocie of contact.lieuxReelsAssocies) {
        if (!lieuAssocie.retourReference) {
          rapport.incoherences.push({
            type: 'REFERENCE_UNIDIRECTIONNELLE_CONTACT_VERS_LIEU',
            contactId: contact.id,
            contactNom: contact.nom,
            lieuId: lieuAssocie.id,
            lieuNom: lieuAssocie.nom,
            description: `Contact ${contact.nom} r√©f√©rence lieu ${lieuAssocie.nom}, mais le lieu ne r√©f√©rence pas le contact en retour`
          });
        } else {
          rapport.statistiques.associationsCoherentes++;
        }
      }
    }

    for (const lieu of rapport.lieux) {
      for (const contactAssocie of lieu.contactsReelsAssocies) {
        if (!contactAssocie.retourReference) {
          rapport.incoherences.push({
            type: 'REFERENCE_UNIDIRECTIONNELLE_LIEU_VERS_CONTACT',
            lieuId: lieu.id,
            lieuNom: lieu.nom,
            contactId: contactAssocie.id,
            contactNom: contactAssocie.nom,
            description: `Lieu ${lieu.nom} r√©f√©rence contact ${contactAssocie.nom}, mais le contact ne r√©f√©rence pas le lieu en retour`
          });
        }
      }
    }

    // 5. AFFICHAGE DU RAPPORT
    console.log('\n' + '='.repeat(70));
    console.log('üìä STATISTIQUES G√âN√âRALES');
    console.log('='.repeat(70));
    console.log(`Total contacts: ${rapport.statistiques.totalContacts}`);
    console.log(`Total lieux: ${rapport.statistiques.totalLieux}`);
    console.log(`Contacts avec lieux: ${rapport.statistiques.contactsAvecLieux}`);
    console.log(`Lieux avec contacts: ${rapport.statistiques.lieuxAvecContacts}`);
    console.log(`Associations coh√©rentes: ${rapport.statistiques.associationsCoherentes}`);
    console.log(`R√©f√©rences orphelines: ${rapport.statistiques.referencesOrphelines}`);

    console.log('\n' + '='.repeat(70));
    console.log(`‚ùå INCOH√âRENCES D√âTECT√âES (${rapport.incoherences.length})`);
    console.log('='.repeat(70));
    
    if (rapport.incoherences.length === 0) {
      console.log('‚úÖ Aucune incoh√©rence d√©tect√©e !');
    } else {
      rapport.incoherences.forEach((inc, index) => {
        console.log(`\n${index + 1}. ${inc.type}`);
        console.log(`   ${inc.description}`);
      });
    }

    // 6. EXEMPLES D√âTAILL√âS
    console.log('\n' + '='.repeat(70));
    console.log('üîç EXEMPLES D√âTAILL√âS (3 premiers contacts et lieux)');
    console.log('='.repeat(70));
    
    // Afficher les 3 premiers contacts
    console.log('\nüë• CONTACTS:');
    rapport.contacts.slice(0, 3).forEach(contact => {
      console.log(`\nüìù ${contact.nom} (${contact.id})`);
      console.log(`   Email: ${contact.email || 'Non d√©fini'}`);
      console.log(`   Structure ID: ${contact.structureId || 'Non d√©fini'}`);
      console.log(`   Lieux r√©f√©renc√©s: ${contact.lieuxReferences.length}`);
      console.log(`   Lieux r√©els: ${contact.lieuxReelsAssocies.length}`);
      if (contact.lieuxReelsAssocies.length > 0) {
        contact.lieuxReelsAssocies.forEach(lieu => {
          console.log(`     - ${lieu.nom} (${lieu.id}) ${lieu.retourReference ? '‚úÖ' : '‚ùå'}`);
        });
      }
      if (contact.incoherences.length > 0) {
        console.log(`   ‚ö†Ô∏è Incoh√©rences: ${contact.incoherences.join(', ')}`);
      }
    });

    // Afficher les 3 premiers lieux
    console.log('\nüó∫Ô∏è LIEUX:');
    rapport.lieux.slice(0, 3).forEach(lieu => {
      console.log(`\nüìç ${lieu.nom} (${lieu.id})`);
      console.log(`   Ville: ${lieu.ville || 'Non d√©finie'}`);
      console.log(`   Contacts r√©f√©renc√©s: ${lieu.contactsReferences.length}`);
      console.log(`   Contacts r√©els: ${lieu.contactsReelsAssocies.length}`);
      if (lieu.contactsReelsAssocies.length > 0) {
        lieu.contactsReelsAssocies.forEach(contact => {
          console.log(`     - ${contact.nom} (${contact.id}) ${contact.retourReference ? '‚úÖ' : '‚ùå'}`);
        });
      }
      if (lieu.incoherences.length > 0) {
        console.log(`   ‚ö†Ô∏è Incoh√©rences: ${lieu.incoherences.join(', ')}`);
      }
    });

    // 7. SAUVEGARDE DU RAPPORT
    const fs = require('fs');
    const rapportJson = JSON.stringify(rapport, null, 2);
    fs.writeFileSync('audit-associations-rapport.json', rapportJson);
    console.log('\nüíæ Rapport complet sauvegard√© dans: audit-associations-rapport.json');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'audit:', error);
  }
}

// Fonctions utilitaires
function verifierRetourReference(lieu, contactId) {
  // V√©rifier si le lieu r√©f√©rence le contact en retour
  if (lieu.programmateurId === contactId) return true;
  if (lieu.programmateursAssocies) {
    return lieu.programmateursAssocies.some(ref => {
      const id = typeof ref === 'object' ? ref.id : ref;
      return id === contactId;
    });
  }
  return false;
}

function verifierRetourReferenceLieu(contact, lieuId) {
  // V√©rifier si le contact r√©f√©rence le lieu en retour
  const lieuxIds = contact.lieuxIds || contact.lieuxAssocies || [];
  return lieuxIds.some(ref => {
    const id = typeof ref === 'object' ? ref.id : ref;
    return id === lieuId;
  });
}

// Ex√©cuter l'audit si appel√© directement
if (require.main === module) {
  auditAssociationsBidirectionnelles()
    .then(() => {
      console.log('\n‚úÖ Audit termin√©');
      process.exit(0);
    })
    .catch(error => {
      console.error('‚ùå Erreur fatale:', error);
      process.exit(1);
    });
}

module.exports = { auditAssociationsBidirectionnelles };
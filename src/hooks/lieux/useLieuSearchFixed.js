/**
 * Hook CORRIG√â pour la recherche de lieux - √âlimine les boucles infinies
 * 
 * PROBL√àME R√âSOLU: searchFields √©tait un objet recr√©√© √† chaque render
 * SOLUTION: Utiliser un array simple et m√©moriser la configuration
 */
import { useCallback, useState, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import { useGenericEntitySearch } from '@/hooks/common';

/**
 * Hook optimis√© et stabilis√© pour la recherche et la s√©lection de lieux
 * 
 * @param {Object} options - Options de configuration
 * @param {Function} [options.onSelect=null] - Callback appel√© quand un lieu est s√©lectionn√©
 * @param {string} [options.initialSearchTerm=''] - Terme de recherche initial
 * @param {number} [options.maxResults=10] - Nombre maximum de r√©sultats √† afficher
 * @returns {Object} API pour la recherche et la s√©lection de lieux
 */
export const useLieuSearchFixed = ({
  onSelect = null,
  initialSearchTerm = '',
  maxResults = 10,
} = {}) => {
  const navigate = useNavigate();
  const [selectedLieu, setSelectedLieu] = useState(null);
  
  // üîß FIX: M√©moriser searchFields comme un array simple
  const searchFields = useMemo(() => ['nom', 'ville', 'codePostal', 'adresse'], []);
  
  // üîß FIX: M√©moriser la fonction de transformation
  const transformResult = useCallback((lieu) => ({
    ...lieu,
    displayName: lieu.nom ? 
      `${lieu.nom}${lieu.ville ? ` (${lieu.ville}${lieu.codePostal ? `, ${lieu.codePostal}` : ''})` : ''}` : 
      'Lieu sans nom',
    fullAddress: lieu.adresse ? 
      `${lieu.adresse}, ${lieu.codePostal || ''} ${lieu.ville || ''}, ${lieu.pays || 'France'}` : 
      undefined
  }), []);
  
  // üîß FIX: Configuration stable m√©moris√©e
  const searchConfig = useMemo(() => ({
    collectionName: 'lieux',
    searchFields,
    initialSearchTerm,
    limit: maxResults,
    transformResult
  }), [searchFields, initialSearchTerm, maxResults, transformResult]);
  
  // Utilisation du hook g√©n√©rique avec configuration stable
  const searchHook = useGenericEntitySearch(searchConfig);
  
  // üîß FIX: handleLieuSelect sans d√©pendance sur searchHook
  const handleLieuSelect = useCallback((lieu) => {
    setSelectedLieu(lieu);
    // On n'a pas besoin de searchHook.setSelectedEntity
    // car selectedEntity est d√©j√† g√©r√© par le hook
    
    // Appeler le callback de s√©lection si fourni
    if (onSelect && typeof onSelect === 'function') {
      onSelect(lieu);
    }
  }, [onSelect]); // Seulement onSelect comme d√©pendance
  
  // Navigation vers la page de cr√©ation de lieu
  const handleCreateLieu = useCallback(() => {
    navigate('/lieux/nouveau');
  }, [navigate]);
  
  // Navigation vers la page de d√©tail d'un lieu
  const navigateToLieuDetails = useCallback((lieuId) => {
    if (lieuId) {
      navigate(`/lieux/${lieuId}`);
    }
  }, [navigate]);
  
  // üîß FIX: Effacer la s√©lection sans d√©pendance
  const clearSelection = useCallback(() => {
    setSelectedLieu(null);
    // Le hook g√©n√©rique g√®re son propre √©tat
  }, []);
  
  // üîß FIX: Retourner un objet stable
  return useMemo(() => ({
    // Propri√©t√©s et m√©thodes du hook g√©n√©rique
    ...searchHook,
    
    // Propri√©t√©s sp√©cifiques aux lieux
    lieu: searchHook.selectedEntity || selectedLieu,
    setLieu: handleLieuSelect,
    clearLieu: clearSelection,
    lieux: searchHook.searchResults,
    
    // Actions sp√©cifiques aux lieux
    handleCreateLieu,
    navigateToLieuDetails,
    
    // ‚úÖ CORRECTION: Exposer les m√©thodes attendues par le composant
    search: searchHook.refreshSearch, // search() -> refreshSearch
    showResults: searchHook.showDropdown, // showResults -> showDropdown
    searchResults: searchHook.results, // Assurer que searchResults est bien expos√©
    
    // Aliases pour compatibilit√©
    searchLieux: searchHook.refreshSearch,
    resetSearch: searchHook.clearSearch,
    
    // √âtats suppl√©mentaires
    isSearching: searchHook.isSearching,
    searchError: searchHook.error
  }), [
    searchHook,
    selectedLieu,
    handleLieuSelect,
    clearSelection,
    handleCreateLieu,
    navigateToLieuDetails
  ]);
};

export default useLieuSearchFixed; 
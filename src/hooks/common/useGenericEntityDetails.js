// src/hooks/common/useGenericEntityDetails.js
import { useState, useEffect, useCallback, useRef } from 'react';
import { 
  doc, getDoc, deleteDoc, updateDoc, 
  serverTimestamp 
} from '@/services/firebase-service';
import { db } from '@/services/firebase-service';
import { debugLog } from '@/utils/logUtils';
import useCache from './useCache';
import useFirestoreSubscription from './useFirestoreSubscription';
import InstanceTracker from '@/services/InstanceTracker';

/**
 * Hook g√©n√©rique pour la gestion des d√©tails d'une entit√©
 * Version am√©lior√©e avec gestion de cache centralis√©e et abonnements Firestore s√©curis√©s
 * 
 * @param {Object} config - Configuration du hook
 * @returns {Object} √âtats et m√©thodes pour g√©rer l'entit√©
 */
const useGenericEntityDetails = ({
  // Configuration de base
  entityType,                // Type d'entit√© (pour les logs et les messages)
  collectionName,            // Nom de la collection Firestore
  id,                        // ID de l'entit√©
  idField = 'id',            // Nom du champ identifiant
  initialMode = 'view',      // Mode initial ('view' ou 'edit')
  
  // Configuration des entit√©s li√©es
  relatedEntities = [],      // Configuration des entit√©s li√©es
  autoLoadRelated = false,   // Charger automatiquement les entit√©s li√©es
  customQueries = {},        // Requ√™tes personnalis√©es pour certaines entit√©s li√©es
  
  // Callbacks et transformateurs
  transformData,             // Transformation des donn√©es apr√®s chargement
  validateFormFn,            // Validation personnalis√©e avant sauvegarde
  formatValue,               // Formatage des valeurs pour l'affichage
  checkDeletePermission,     // V√©rifier si la suppression est autoris√©e
  
  // Callbacks d'√©v√©nements
  onSaveSuccess,             // Appel√© apr√®s sauvegarde r√©ussie
  onSaveError,               // Appel√© en cas d'erreur de sauvegarde
  onDeleteSuccess,           // Appel√© apr√®s suppression r√©ussie
  onDeleteError,             // Appel√© en cas d'erreur de suppression
  onModeChange,              // Appel√© lors du changement de mode
  
  // Options de navigation
  navigate,                  // Fonction de navigation (optionnel)
  returnPath,                // Chemin de retour apr√®s suppression
  editPath,                  // Format de chemin d'√©dition
  
  // Options avanc√©es
  additionalFields = [],     // Champs suppl√©mentaires √† charger
  skipPermissionCheck = false, // Ignorer la v√©rification des permissions
  realtime = false,          // Utiliser des √©couteurs temps r√©el
  useDeleteModal = true,     // Utiliser un modal pour confirmer la suppression
  autoRefresh = false,        // Activer le polling
  refreshInterval = 30000,    // Intervalle en ms (par d√©faut 30 s)
  
  // Options de cache
  cacheEnabled = true,       // Activer le cache pour ce hook
  cacheTTL                   // TTL personnalis√© pour ce hook (en ms)
}) => {
  // debugLog('Hook ex√©cut√© !', 'trace', 'useGenericEntityDetails');
  
  // Enregistrer l'instance avec le tracker √† la place de la variable globale
  const instanceRef = useRef({
    ...InstanceTracker.register(entityType, { id, collectionName, realtime }),
    isMounted: true,
    currentlyFetching: false,
    activeAbortController: null,
    lastId: null
  });
  
  // Logger uniquement l'initialisation du hook
  debugLog(`üöÄ INIT: useGenericEntityDetails #${instanceRef.current.instanceNumber} initialis√© pour ${entityType}:${id}`, 'info', 'useGenericEntityDetails');
  debugLog(`üìä INIT: instanceRef.current.isMounted = ${instanceRef.current.isMounted}`, 'debug', 'useGenericEntityDetails');
  
  // √âtats de base
  const [entity, setEntity] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // √âtats d'√©dition
  const [isEditing, setIsEditing] = useState(initialMode === 'edit');
  const [formData, setFormData] = useState({});
  const [isDirty, setIsDirty] = useState(false);
  const [dirtyFields, setDirtyFields] = useState([]);
  const [formErrors, setFormErrors] = useState({});
  
  // √âtats pour les op√©rations
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  
  // √âtats pour les entit√©s li√©es
  const [relatedData, setRelatedData] = useState({});
  const [loadingRelated, setLoadingRelated] = useState({});
  
  // Utiliser le hook de cache
  const cache = useCache(entityType, {
    enabled: cacheEnabled,
    ttl: cacheTTL,
    invalidateOnUnmount: false // Ne pas invalider automatiquement au d√©montage
  });
  
  // V√©rification imm√©diate du cache au montage pour √©viter les probl√®mes de timing
  useEffect(() => {
    if (cacheEnabled && id && !entity) {
      const cachedData = cache.get(id);
      if (cachedData) {
        debugLog(`üöÄ IMMEDIATE_CACHE_CHECK: Donn√©es trouv√©es en cache au montage pour ${entityType}:${id}`, 'info', 'useGenericEntityDetails');
        setEntity(cachedData);
        setFormData(cachedData);
        setLoading(false);
        // Le chargement des entit√©s li√©es sera d√©clench√© dans un effet s√©par√©
        debugLog(`‚úÖ IMMEDIATE_CACHE_CHECK: √âtats mis √† jour depuis le cache`, 'info', 'useGenericEntityDetails');
      }
    }
  }, [id, entity, cacheEnabled, cache, entityType, autoLoadRelated]);
  
  // Effet d√©di√© pour charger les entit√©s li√©es une fois que l'entit√© est disponible
  useEffect(() => {
    if (autoLoadRelated && entity && Object.keys(relatedData).length === 0) {
      loadAllRelatedEntities(entity);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [autoLoadRelated, entity, relatedData]);
  
  // Fonction s√©curis√©e pour mettre √† jour les √©tats uniquement si le composant est mont√©
  const safeSetState = useCallback((setter, value) => {
    const setterName = setter.name || 'unknown';
    debugLog(`üîÑ SAFE_SET_STATE: Tentative ${setterName} - isMounted: ${instanceRef.current.isMounted}`, 'debug', 'useGenericEntityDetails');
    debugLog(`üîÑ SAFE_SET_STATE: Valeur √† d√©finir: ${JSON.stringify(value)}`, 'debug', 'useGenericEntityDetails');
    
    if (instanceRef.current.isMounted) {
      debugLog(`‚úÖ SAFE_SET_STATE: Appel du setter ${setterName}`, 'debug', 'useGenericEntityDetails');
      setter(value);
      debugLog(`‚úÖ SAFE_SET_STATE: Setter ${setterName} ex√©cut√© avec succ√®s`, 'debug', 'useGenericEntityDetails');
    } else {
      debugLog(`‚ö†Ô∏è SAFE_SET_STATE: Composant d√©mont√©, setter ${setterName} ignor√© (mais cache maintenu)`, 'warn', 'useGenericEntityDetails');
      // Note: Le cache est maintenu m√™me si le composant est d√©mont√©
      // Cela permet aux prochains montages d'avoir les donn√©es imm√©diatement
    }
  }, []);
  
  debugLog(`Appel du hook avec : ${entityType}, ${collectionName}, ${id}, realtime=${realtime}, cache=${cacheEnabled}`, 'debug', 'useGenericEntityDetails');
  
  // R√©initialisation compl√®te lors d'un changement d'ID
  useEffect(() => {
    debugLog(`üîÑ ID_CHANGE_EFFECT: V√©rification changement ID - lastId: ${instanceRef.current.lastId}, newId: ${id}`, 'debug', 'useGenericEntityDetails');
    
    // Si l'ID change, on doit r√©initialiser tous les √©tats
    if (instanceRef.current.lastId !== id) {
      debugLog(`üîÑ ID_CHANGE_EFFECT: Changement d'ID d√©tect√© - ${instanceRef.current.lastId} ‚Üí ${id}`, 'info', 'useGenericEntityDetails');
      
      // Annuler les requ√™tes en cours
      if (instanceRef.current.activeAbortController) {
        debugLog(`üîÑ ID_CHANGE_EFFECT: Annulation de la requ√™te en cours`, 'debug', 'useGenericEntityDetails');
        instanceRef.current.activeAbortController.abort();
        instanceRef.current.activeAbortController = null;
      }
      
      debugLog(`üîÑ ID_CHANGE_EFFECT: R√©initialisation des √©tats - isMounted: ${instanceRef.current.isMounted}`, 'debug', 'useGenericEntityDetails');
      
      // R√©initialiser les √©tats
      safeSetState(setLoading, true);
      safeSetState(setError, null);
      safeSetState(setEntity, null);
      safeSetState(setFormData, {});
      
      // Marquer l'ID comme trait√©
      instanceRef.current.lastId = id;
      instanceRef.current.currentlyFetching = false;
      
      // Mettre √† jour les m√©tadonn√©es dans le tracker
      InstanceTracker.updateMetadata(instanceRef.current.instanceId, { 
        id, state: 'id-changed', collectionName, entityType 
      });
      
      debugLog(`‚úÖ ID_CHANGE_EFFECT: R√©initialisation termin√©e pour ${entityType}:${id}`, 'info', 'useGenericEntityDetails');
    } else {
      debugLog(`‚è≠Ô∏è ID_CHANGE_EFFECT: Pas de changement d'ID, effet ignor√©`, 'debug', 'useGenericEntityDetails');
    }
  }, [id, entityType, collectionName, safeSetState]);
  
  // Callback pour recevoir les donn√©es de l'abonnement Firestore
  const handleSubscriptionData = useCallback((data) => {
    if (!instanceRef.current.isMounted) return;
    
    if (data) {
      // Transformer les donn√©es si n√©cessaire
      const transformedData = transformData ? transformData(data) : data;
      
      // Mettre en cache si le cache est activ√©
      if (cacheEnabled) {
        cache.set(id, transformedData);
      }
      
      safeSetState(setEntity, transformedData);
      debugLog(`DEBUG useGenericEntityDetails - entity mis √† jour par subscription : ${JSON.stringify(transformedData)}`, 'debug', 'useGenericEntityDetails');
      safeSetState(setFormData, transformedData);
      safeSetState(setLoading, false);
      
      // Charger les entit√©s li√©es si demand√©
      if (autoLoadRelated) {
        loadAllRelatedEntities(transformedData);
      }
    } else {
      safeSetState(setError, { message: `${entityType} non trouv√©(e)` });
      safeSetState(setLoading, false);
    }
    // loadAllRelatedEntities est stable gr√¢ce √† useCallback, exemption pour √©viter d√©pendance circulaire
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [transformData, cacheEnabled, cache, id, entityType, autoLoadRelated, safeSetState]);
  
  // Callback pour g√©rer les erreurs de l'abonnement
  const handleSubscriptionError = useCallback((err) => {
    if (!instanceRef.current.isMounted) return;
    safeSetState(setError, { message: `Erreur lors du chargement des donn√©es: ${err.message}` });
    safeSetState(setLoading, false);
  }, [safeSetState]);
  
  // Utiliser le hook d'abonnement Firestore si le mode realtime est activ√©
  const subscription = useFirestoreSubscription({
    collectionName,
    id,
    onData: handleSubscriptionData,
    onError: handleSubscriptionError,
    enabled: realtime && !!id,
    transform: transformData
  });
  
  // Fonction pour charger l'entit√© principale - simplifi√©e gr√¢ce au hook d'abonnement
  const fetchEntity = useCallback(async () => {
    debugLog(`üöÄ FETCH_ENTITY: D√©but fetchEntity pour ${entityType}:${id}`, 'info', 'useGenericEntityDetails');
    debugLog(`üìä FETCH_ENTITY: √âtat initial - isMounted: ${instanceRef.current.isMounted}, currentlyFetching: ${instanceRef.current.currentlyFetching}`, 'debug', 'useGenericEntityDetails');
    
    // Si le mode realtime est activ√© et que l'abonnement est actif, ne rien faire
    if (realtime) {
      debugLog(`‚è≠Ô∏è FETCH_ENTITY: Mode realtime activ√©, sortie imm√©diate`, 'debug', 'useGenericEntityDetails');
      return;
    }
    
    // Protection contre les appels multiples simultan√©s
    if (instanceRef.current.currentlyFetching) {
      debugLog(`‚è≠Ô∏è FETCH_ENTITY: Requ√™te d√©j√† en cours pour ${entityType}:${id}, ignor√©`, 'warn', 'useGenericEntityDetails');
      return;
    }
    
    // Si pas d'ID, ne pas essayer de charger
    if (!id) {
      debugLog(`‚ùå FETCH_ENTITY: Pas d'ID fourni, arr√™t`, 'warn', 'useGenericEntityDetails');
      safeSetState(setLoading, false);
      safeSetState(setError, { message: "Pas d'identifiant fourni" });
      return;
    }
    
    // V√©rifier le cache si activ√©
    if (cacheEnabled) {
      debugLog(`üîç FETCH_ENTITY: V√©rification du cache pour ${entityType}:${id}`, 'debug', 'useGenericEntityDetails');
      const cachedData = cache.get(id);
      if (cachedData) {
        debugLog(`‚úÖ FETCH_ENTITY: Donn√©es trouv√©es en cache pour ${entityType}:${id}`, 'info', 'useGenericEntityDetails');
        debugLog(`üìä FETCH_ENTITY: Donn√©es cache: ${JSON.stringify(cachedData)}`, 'debug', 'useGenericEntityDetails');
        safeSetState(setEntity, cachedData);
        safeSetState(setFormData, cachedData);
        safeSetState(setLoading, false);
        
        // Charger les entit√©s li√©es si demand√©, m√™me avec un cache hit
        if (autoLoadRelated) {
          debugLog(`üîó FETCH_ENTITY: Chargement des entit√©s li√©es depuis le cache`, 'debug', 'useGenericEntityDetails');
          loadAllRelatedEntities(cachedData);
        }
        
        debugLog(`‚úÖ FETCH_ENTITY: Termin√© avec succ√®s (cache)`, 'info', 'useGenericEntityDetails');
        return;
      } else {
        debugLog(`‚ùå FETCH_ENTITY: Aucune donn√©e en cache pour ${entityType}:${id}`, 'debug', 'useGenericEntityDetails');
      }
    } else {
      debugLog(`‚è≠Ô∏è FETCH_ENTITY: Cache d√©sactiv√©`, 'debug', 'useGenericEntityDetails');
    }
    
    // Marquer comme en cours de chargement
    debugLog(`üîÑ FETCH_ENTITY: D√©but du chargement depuis Firestore`, 'debug', 'useGenericEntityDetails');
    instanceRef.current.currentlyFetching = true;
    safeSetState(setLoading, true);
    safeSetState(setError, null);
    
    try {
      // Annuler les requ√™tes pr√©c√©dentes
      if (instanceRef.current.activeAbortController) {
        debugLog(`üîÑ FETCH_ENTITY: Annulation de la requ√™te pr√©c√©dente`, 'debug', 'useGenericEntityDetails');
        instanceRef.current.activeAbortController.abort();
      }
      
      // Cr√©er un nouveau AbortController
      const abortController = new AbortController();
      instanceRef.current.activeAbortController = abortController;
      debugLog(`üîÑ FETCH_ENTITY: Nouveau AbortController cr√©√©`, 'debug', 'useGenericEntityDetails');
      
      debugLog(`üî• FETCH_ENTITY: D√©but requ√™te Firestore pour ${entityType}:${id}`, 'info', 'useGenericEntityDetails');
      
      const entityDocRef = doc(db, collectionName, id);
      debugLog(`üìÑ FETCH_ENTITY: R√©f√©rence document cr√©√©e: ${collectionName}/${id}`, 'debug', 'useGenericEntityDetails');
      
      // Utiliser la m√©thode native pour annuler les requ√™tes Firestore
      const entityDoc = await getDoc(entityDocRef);
      debugLog(`üìÑ FETCH_ENTITY: getDoc termin√© - exists: ${entityDoc?.exists?.()}`, 'info', 'useGenericEntityDetails');
      debugLog(`üìä FETCH_ENTITY: Document re√ßu: ${JSON.stringify(entityDoc?.data?.())}`, 'debug', 'useGenericEntityDetails');
      
      // V√©rifier si la requ√™te a √©t√© annul√©e
      if (abortController.signal.aborted) {
        debugLog(`‚ùå FETCH_ENTITY: Requ√™te annul√©e pour ${entityType}:${id}`, 'warn', 'useGenericEntityDetails');
        return;
      }
      
      // V√©rifier que le composant est toujours mont√©
      if (!instanceRef.current.isMounted) {
        debugLog(`‚ùå FETCH_ENTITY: Composant d√©mont√©, mais on continue le traitement pour √©viter la perte de donn√©es`, 'warn', 'useGenericEntityDetails');
        // Ne pas return ici - continuer le traitement m√™me si le composant est d√©mont√©
        // Les donn√©es seront disponibles lors du prochain montage via le cache
      }
      
      debugLog(`‚úÖ FETCH_ENTITY: Composant toujours mont√©, traitement des donn√©es - isMounted: ${instanceRef.current.isMounted}`, 'debug', 'useGenericEntityDetails');

      if (entityDoc.exists()) {
        debugLog(`‚úÖ FETCH_ENTITY: Document existe, traitement des donn√©es`, 'info', 'useGenericEntityDetails');
        const entityData = { [idField]: entityDoc.id, ...entityDoc.data() };
        debugLog(`üìä FETCH_ENTITY: Donn√©es brutes: ${JSON.stringify(entityData)}`, 'debug', 'useGenericEntityDetails');
        
        // Transformer les donn√©es si une fonction de transformation est fournie
        const transformedData = transformData ? transformData(entityData) : entityData;
        debugLog(`üîÑ FETCH_ENTITY: Donn√©es transform√©es: ${JSON.stringify(transformedData)}`, 'debug', 'useGenericEntityDetails');

        // Mettre en cache si le cache est activ√© (TOUJOURS faire cela, m√™me si d√©mont√©)
        if (cacheEnabled) {
          debugLog(`üíæ FETCH_ENTITY: Mise en cache des donn√©es`, 'debug', 'useGenericEntityDetails');
          cache.set(id, transformedData);
          debugLog(`‚úÖ FETCH_ENTITY: Donn√©es mises en cache avec succ√®s`, 'debug', 'useGenericEntityDetails');
        }
        
        debugLog(`üéØ FETCH_ENTITY: Avant safeSetState(setEntity) - isMounted: ${instanceRef.current.isMounted}`, 'info', 'useGenericEntityDetails');
        safeSetState(setEntity, transformedData);
        
        debugLog(`üéØ FETCH_ENTITY: Avant safeSetState(setFormData) - isMounted: ${instanceRef.current.isMounted}`, 'debug', 'useGenericEntityDetails');
        safeSetState(setFormData, transformedData);
        
        // Charger les entit√©s li√©es si demand√©
        if (autoLoadRelated) {
          debugLog(`üîó FETCH_ENTITY: Chargement des entit√©s li√©es`, 'debug', 'useGenericEntityDetails');
          loadAllRelatedEntities(transformedData);
        }
        
        debugLog(`‚úÖ FETCH_ENTITY: Donn√©es entity d√©finies avec succ√®s`, 'info', 'useGenericEntityDetails');
      } else {
        debugLog(`‚ùå FETCH_ENTITY: Document n'existe pas`, 'warn', 'useGenericEntityDetails');
        safeSetState(setError, { message: `${entityType} non trouv√©(e)` });
      }
      
      debugLog(`üéØ FETCH_ENTITY: Avant safeSetState(setLoading, false) - isMounted: ${instanceRef.current.isMounted}`, 'debug', 'useGenericEntityDetails');
      safeSetState(setLoading, false);
      instanceRef.current.currentlyFetching = false;
      instanceRef.current.activeAbortController = null;
      debugLog(`‚úÖ FETCH_ENTITY: Termin√© avec succ√®s`, 'info', 'useGenericEntityDetails');
    } catch (err) {
      debugLog(`Erreur dans fetchEntity pour ${entityType}:${id}: ${err}`, 'error', 'useGenericEntityDetails');
      // Ne pas traiter les erreurs si le composant est d√©mont√© ou si la requ√™te a √©t√© annul√©e
      if (!instanceRef.current.isMounted || (instanceRef.current.activeAbortController && instanceRef.current.activeAbortController.signal.aborted)) {
        return;
      }
      
      safeSetState(setError, { message: `Erreur lors du chargement des donn√©es: ${err.message}` });
      safeSetState(setLoading, false);
      instanceRef.current.currentlyFetching = false;
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [id, collectionName, entityType, idField, transformData, autoLoadRelated, realtime, safeSetState, cacheEnabled, cache]);
  
  // Fonction pour charger une entit√© li√©e sp√©cifique
  const loadRelatedEntity = useCallback(async (relatedConfig, entityData) => {
    const { name, collection: relatedCollection, idField: relatedIdField, type = 'one-to-one' } = relatedConfig;
    
    // Si l'identifiant de l'entit√© li√©e n'existe pas dans l'entit√© principale, retourner null
    if (!entityData[relatedIdField]) {
      debugLog(`‚ùå LOAD_RELATED: Pas d'ID pour l'entit√© li√©e ${name}`, 'warn', 'useGenericEntityDetails');
      return type === 'one-to-many' ? [] : null;
    }
    
    try {
      let result;
      
      // V√©rifier s'il y a une requ√™te personnalis√©e pour cette entit√©
      if (customQueries && customQueries[name]) {
        debugLog(`üîç LOAD_RELATED: Utilisation de la requ√™te personnalis√©e pour ${name}`, 'debug', 'useGenericEntityDetails');
        const customQuery = customQueries[name];
        const queryResult = await customQuery(entityData);
        result = queryResult;
      } else if (type === 'one-to-many') {
        // Charger plusieurs entit√©s li√©es
        const relatedIds = Array.isArray(entityData[relatedIdField]) 
          ? entityData[relatedIdField]
          : [entityData[relatedIdField]];
          
        // V√©rifier le cache d'abord
        const cachedResults = [];
        let allCached = true;
        
        if (cacheEnabled) {
          for (const relId of relatedIds) {
            const cachedItem = cache.get(`related:${name}:${relId}`);
            if (cachedItem) {
              cachedResults.push(cachedItem);
            } else {
              allCached = false;
              break;
            }
          }
        }
        
        if (allCached && cachedResults.length > 0) {
          debugLog(`‚úÖ LOAD_RELATED: Toutes les entit√©s li√©es ${name} trouv√©es en cache`, 'info', 'useGenericEntityDetails');
          return cachedResults;
        }
        
        // Si pas toutes en cache, charger depuis Firestore
        const results = await Promise.all(
          relatedIds.map(async (relId) => {
            const docRef = doc(db, relatedCollection, relId);
            const docSnap = await getDoc(docRef);
            
            if (docSnap.exists()) {
              const data = { [relatedIdField]: docSnap.id, ...docSnap.data() };
              if (cacheEnabled) {
                cache.set(`related:${name}:${relId}`, data);
              }
              return data;
            }
            return null;
          })
        );
        
        result = results.filter(Boolean);
      } else {
        // Charger une seule entit√© li√©e
        const relId = entityData[relatedIdField];
        
        // V√©rifier le cache d'abord
        if (cacheEnabled) {
          const cachedItem = cache.get(`related:${name}:${relId}`);
          if (cachedItem) {
            debugLog(`‚úÖ LOAD_RELATED: Entit√© li√©e ${name} trouv√©e en cache`, 'info', 'useGenericEntityDetails');
            return cachedItem;
          }
        }
        
        // Si pas en cache, charger depuis Firestore
        const docRef = doc(db, relatedCollection, relId);
        const docSnap = await getDoc(docRef);
        
        if (docSnap.exists()) {
          result = { [relatedIdField]: docSnap.id, ...docSnap.data() };
          if (cacheEnabled) {
            cache.set(`related:${name}:${relId}`, result);
          }
        } else {
          debugLog(`‚ùå LOAD_RELATED: Entit√© li√©e ${name} non trouv√©e`, 'warn', 'useGenericEntityDetails');
          result = null;
        }
      }
      
      return result;
    } catch (error) {
      debugLog(`‚ùå LOAD_RELATED: Erreur lors du chargement de l'entit√© li√©e ${name}: ${error}`, 'error', 'useGenericEntityDetails');
      return type === 'one-to-many' ? [] : null;
    }
  }, [cacheEnabled, cache, customQueries]);
  
  // Fonction pour charger toutes les entit√©s li√©es
  const loadAllRelatedEntities = useCallback(async (entityData) => {
    if (!instanceRef.current.isMounted) return;
    if (!relatedEntities || relatedEntities.length === 0) return;
    if (!entityData) return;
    
    debugLog(`Chargement des entit√©s li√©es pour ${entityType}:${id}`, 'info', 'useGenericEntityDetails');
    
    // Initialiser les √©tats de chargement
    const loadingStates = {};
    relatedEntities.forEach(rel => {
      loadingStates[rel.name] = true;
    });
    safeSetState(setLoadingRelated, loadingStates);
    
    // Cr√©er un objet pour stocker les entit√©s li√©es
    const relatedEntitiesData = {};
    
    // Identifier les entit√©s li√©es essentielles vs non essentielles
    const essentialEntities = relatedEntities.filter(rel => rel.essential === true);
    const nonEssentialEntities = relatedEntities.filter(rel => rel.essential !== true);
    
    try {
      // Charger d'abord les entit√©s essentielles en parall√®le (si configur√©es comme telles)
      if (essentialEntities.length > 0) {
        const essentialResults = await Promise.all(
          essentialEntities.map(async (relatedEntity) => {
            try {
              const data = await loadRelatedEntity(relatedEntity, entityData);
              return { name: relatedEntity.name, data };
            } catch (err) {
              debugLog(`Erreur lors du chargement de l'entit√© li√©e ${relatedEntity.name}: ${err}`, 'error', 'useGenericEntityDetails');
              return { name: relatedEntity.name, data: null };
            }
          })
        );
        
        // Traiter les r√©sultats des entit√©s essentielles
        essentialResults.forEach(({ name, data }) => {
          relatedEntitiesData[name] = data;
          
          // Mettre en cache si activ√© et si les donn√©es sont pr√©sentes
          if (cacheEnabled && data) {
            if (Array.isArray(data)) {
              data.forEach(item => {
                if (item && item.id) {
                  cache.set(`related:${name}:${item.id}`, item);
                }
              });
            } else if (data && data.id) {
              cache.set(`related:${name}:${data.id}`, data);
            }
          }
          
          // Marquer comme charg√©
          loadingStates[name] = false;
        });
        
        // Mettre √† jour l'√©tat avec les entit√©s essentielles
        if (instanceRef.current.isMounted) {
          safeSetState(setRelatedData, relatedEntitiesData);
          safeSetState(setLoadingRelated, {...loadingStates});
        }
      }
      
      // Pour les entit√©s non essentielles, charger avec un d√©lai ou lors d'une action utilisateur
      if (nonEssentialEntities.length > 0) {
        // D√©sactiver le chargement automatique des entit√©s non essentielles au montage initial
        // Elles seront charg√©es √† la demande par loadRelatedEntityById
        nonEssentialEntities.forEach(rel => {
          loadingStates[rel.name] = false;
        });
        
        // Mettre √† jour les √©tats de chargement
        if (instanceRef.current.isMounted) {
          safeSetState(setLoadingRelated, loadingStates);
        }
      }
    } catch (err) {
      debugLog(`Erreur globale lors du chargement des entit√©s li√©es: ${err}`, 'error', 'useGenericEntityDetails');
    }
  }, [relatedEntities, entityType, id, safeSetState, cacheEnabled, cache, loadRelatedEntity]);
  
  // Fonction pour charger une entit√© li√©e par son ID
  const loadRelatedEntityById = useCallback(async (name, id) => {
    if (!id) return null;
    
    // Trouver la configuration de cette entit√© li√©e
    const relatedConfig = relatedEntities.find(rel => rel.name === name);
    if (!relatedConfig) {
      debugLog(`Configuration pour l'entit√© li√©e ${name} non trouv√©e`, 'error', 'useGenericEntityDetails');
      return null;
    }
    
    // D√©finir l'√©tat de chargement
    safeSetState(setLoadingRelated, prev => ({ ...prev, [name]: true }));
    
    try {
      // Essayer d'abord de r√©cup√©rer depuis le cache global
      if (cacheEnabled) {
        const cachedRelated = cache.get(`related:${name}:${id}`);
        if (cachedRelated) {
          safeSetState(setRelatedData, prev => ({
            ...prev,
            [name]: cachedRelated
          }));
          return cachedRelated;
        }
      }
      
      // Charger l'entit√© li√©e
      const relatedDoc = await getDoc(doc(db, relatedConfig.collection, id));
      
      if (relatedDoc.exists()) {
        const data = { id: relatedDoc.id, ...relatedDoc.data() };
        
        // Mettre √† jour l'√©tat
        safeSetState(setRelatedData, prev => ({
          ...prev,
          [name]: data
        }));
        
        // Mettre en cache si activ√©
        if (cacheEnabled) {
          cache.set(`related:${name}:${id}`, data);
        }
        
        return data;
      } else {
        safeSetState(setRelatedData, prev => ({
          ...prev,
          [name]: null
        }));
        return null;
      }
    } catch (err) {
      debugLog(`Erreur lors du chargement de l'entit√© li√©e ${name}: ${err}`, 'error', 'useGenericEntityDetails');
      return null;
    } finally {
      safeSetState(setLoadingRelated, prev => ({ ...prev, [name]: false }));
    }
  }, [relatedEntities, safeSetState, cacheEnabled, cache]);
  
  // Fonction pour basculer entre les modes d'√©dition
  const toggleEditMode = useCallback(() => {
    if (isEditing) {
      // Quitter le mode √©dition
      setFormData(entity || {});
      setFormErrors({});
      setDirtyFields([]);
      setIsDirty(false);
      setIsEditing(false);
      
      // Appeler le callback si fourni
      if (onModeChange) {
        onModeChange('view');
      }
    } else {
      // Passer en mode √©dition
      setIsEditing(true);
      
      // Appeler le callback si fourni
      if (onModeChange) {
        onModeChange('edit');
      }
    }
  }, [isEditing, entity, onModeChange]);
  
  // Gestionnaire de changements pour les champs du formulaire
  const handleChange = useCallback((e) => {
    const { name, value } = e.target;
    
    // G√©rer les champs imbriqu√©s (par exemple: contact.email)
    if (name.includes('.')) {
      const [parent, child] = name.split('.');
      setFormData(prev => ({
        ...prev,
        [parent]: {
          ...prev[parent],
          [child]: value
        }
      }));
    } else {
      // Champ simple
      setFormData(prev => ({
        ...prev,
        [name]: value
      }));
    }
    
    // Marquer le champ comme modifi√©
    if (!dirtyFields.includes(name)) {
      setDirtyFields(prev => [...prev, name]);
    }
    
    // Marquer le formulaire comme modifi√©
    setIsDirty(true);
    
    // Effacer l'erreur pour ce champ si elle existe
    if (formErrors[name]) {
      setFormErrors(prev => ({
        ...prev,
        [name]: null
      }));
    }
  }, [dirtyFields, formErrors]);
  
  // Fonction pour valider le formulaire
  const validateForm = useCallback(() => {
    // R√©initialiser les erreurs
    setFormErrors({});
    
    // Utiliser la fonction de validation personnalis√©e si fournie
    if (validateFormFn) {
      const result = validateFormFn(formData);
      
      if (!result.isValid) {
        setFormErrors(result.errors || {});
        return false;
      }
    }
    
    return true;
  }, [formData, validateFormFn]);
  
  // Fonction pour soumettre les modifications
  const handleSubmit = useCallback(async (e) => {
    if (e) e.preventDefault();
    
    // Valider le formulaire
    if (!validateForm()) {
      return;
    }
    
    setIsSubmitting(true);
    
    try {
      // Pr√©parer les donn√©es √† sauvegarder
      const dataToSave = {
        ...formData,
        updatedAt: serverTimestamp()
      };
      
      // Mettre √† jour le document dans Firestore
      await updateDoc(doc(db, collectionName, id), dataToSave);
      
      // Mettre √† jour l'√©tat local
      const updatedEntity = { 
        ...dataToSave, 
        id,
        updatedAt: new Date() // Pour avoir une valeur imm√©diate c√¥t√© client
      };
      
      setEntity(updatedEntity);
      
      // Mise √† jour du cache pour refl√©ter les changements
      if (cacheEnabled) {
        cache.set(id, updatedEntity);
      }
      
      setIsDirty(false);
      setDirtyFields([]);
      setIsEditing(false);
      
      // Appeler le callback si fourni
      if (onSaveSuccess) {
        onSaveSuccess(updatedEntity);
      }
    } catch (err) {
      debugLog(`Erreur lors de la sauvegarde de ${entityType}: ${err}`, 'error', 'useGenericEntityDetails');
      
      // Appeler le callback d'erreur si fourni
      if (onSaveError) {
        onSaveError(err);
      } else {
        setError({ message: `Erreur lors de la sauvegarde: ${err.message}` });
      }
    } finally {
      setIsSubmitting(false);
    }
  }, [id, formData, validateForm, entityType, collectionName, onSaveSuccess, onSaveError, cacheEnabled, cache]);
  
  // Fonction pour confirmer et ex√©cuter la suppression
  const handleConfirmDelete = useCallback(async () => {
    console.log('[LOG][useGenericEntityDetails] handleConfirmDelete appel√©');
    setIsDeleting(true);
    try {
      // V√©rifier si l'entit√© peut √™tre supprim√©e
      if (checkDeletePermission && !skipPermissionCheck) {
        const canDelete = await checkDeletePermission(entity);
        if (!canDelete) {
          throw new Error(`${entityType} ne peut pas √™tre supprim√©(e) car il/elle est utilis√©(e) par d'autres entit√©s.`);
        }
      }
      
      // Supprimer le document dans Firestore
      await deleteDoc(doc(db, collectionName, id));
      
      // Supprimer du cache si le cache est activ√©
      if (cacheEnabled) {
        cache.remove(id);
        
        // Supprimer √©galement les entit√©s li√©es du cache
        for (const rel of relatedEntities) {
          const relatedId = entity?.[rel.idField];
          if (relatedId) {
            if (Array.isArray(relatedId)) {
              relatedId.forEach(rid => cache.remove(`related:${rel.name}:${rid}`));
            } else {
              cache.remove(`related:${rel.name}:${relatedId}`);
            }
          }
        }
      }
      
      // Fermer le modal
      setShowDeleteModal(false);
      
      // Appeler le callback si fourni
      if (onDeleteSuccess) {
        onDeleteSuccess();
      }
      
      // Naviguer vers la page de retour si sp√©cifi√©e
      if (navigate && returnPath) {
        navigate(returnPath);
      }
    } catch (err) {
      debugLog(`Erreur lors de la suppression de ${entityType}: ${err}`, 'error', 'useGenericEntityDetails');
      
      // Fermer le modal
      setShowDeleteModal(false);
      
      // Appeler le callback d'erreur si fourni
      if (onDeleteError) {
        onDeleteError(err);
      } else {
        setError({ message: `Erreur lors de la suppression: ${err.message}` });
      }
    } finally {
      setIsDeleting(false);
    }
  }, [id, entity, checkDeletePermission, skipPermissionCheck, collectionName, entityType, onDeleteSuccess, onDeleteError, navigate, returnPath, cacheEnabled, cache, relatedEntities]);
  
  // Fonction pour annuler la suppression (fermer le modal)
  const handleCancelDelete = useCallback(() => {
    setShowDeleteModal(false);
  }, []);
  
  // Fonction pour d√©clencher le processus de suppression
  const handleDelete = useCallback(() => {
    if (useDeleteModal) {
      setShowDeleteModal(true);
    } else {
      handleConfirmDelete();
    }
  }, [useDeleteModal, handleConfirmDelete]);
  
  // Fonction pour rafra√Æchir les donn√©es
  const refresh = useCallback(() => {
    // Invalider le cache pour cette entit√©
    if (cacheEnabled) {
      cache.remove(id);
    }
    
    // Si en mode temps r√©el, rafra√Æchir l'abonnement
    if (realtime) {
      subscription.refresh();
    } else {
      // R√©initialiser le flag de chargement et recharger l'entit√©
      instanceRef.current.currentlyFetching = false;
      fetchEntity();
    }
  }, [fetchEntity, id, cacheEnabled, cache, realtime, subscription]);
  
  // ====== Effet d'auto-refresh (polling) ======
  useEffect(() => {
    if (!autoRefresh || realtime || !id) return;
    const intervalId = setInterval(() => {
      refresh();
    }, refreshInterval);
    return () => clearInterval(intervalId);
  }, [autoRefresh, realtime, id, refresh, refreshInterval]);
  
  // Fonction pour r√©essayer manuellement en cas d'erreur
  const retryFetch = useCallback(() => {
    debugLog(`Nouvelle tentative de chargement pour ${entityType}:${id}`, 'info', 'useGenericEntityDetails');
    if (cacheEnabled) cache.remove(id);
    safeSetState(setError, null);
    refresh();
  }, [entityType, id, cacheEnabled, cache, safeSetState, refresh]);
  
  // Chargement initial de l'entit√© - Compatible StrictMode
  useEffect(() => {
    debugLog(`üöÄ INITIAL_LOAD_EFFECT: D√©but effet chargement initial`, 'info', 'useGenericEntityDetails');
    
    // Ne pas charger si pas d'ID
    if (!id) {
      debugLog(`‚è≠Ô∏è INITIAL_LOAD_EFFECT: Pas d'ID, arr√™t`, 'debug', 'useGenericEntityDetails');
      return;
    }
    
    // V√©rifier le cache d'abord (pour √©viter les requ√™tes inutiles en StrictMode)
    if (cacheEnabled) {
      const cachedData = cache.get(id);
      if (cachedData) {
        debugLog(`‚úÖ INITIAL_LOAD_EFFECT: Donn√©es trouv√©es en cache, pas de fetch n√©cessaire`, 'info', 'useGenericEntityDetails');
        setEntity(cachedData);
        setFormData(cachedData);
        setLoading(false);
        return;
      }
    }
    
    debugLog(`üîÑ INITIAL_LOAD_EFFECT: D√©marrage chargement pour ${entityType}:${id}`, 'info', 'useGenericEntityDetails');
    
    // Si en mode temps r√©el, l'abonnement se charge du chargement initial
    if (!realtime) {
      debugLog(`üî• INITIAL_LOAD_EFFECT: Mode normal, appel de fetchEntity`, 'info', 'useGenericEntityDetails');
      fetchEntity().catch((error) => {
        debugLog(`‚ùå INITIAL_LOAD_EFFECT: Erreur dans fetchEntity: ${error}`, 'error', 'useGenericEntityDetails');
      });
    } else {
      debugLog(`‚è≠Ô∏è INITIAL_LOAD_EFFECT: Mode realtime activ√©, pas d'appel fetchEntity`, 'debug', 'useGenericEntityDetails');
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [id, entityType, realtime]); // Suppression de fetchEntity, cacheEnabled, cache pour √©viter la boucle infinie
  
  // Gestion des derniers nettoyages au d√©montage
  useEffect(() => {
    // Capturer la r√©f√©rence actuelle pour la fonction de cleanup
    const currentInstance = instanceRef.current;
    debugLog(`üîß CLEANUP_EFFECT: Effet de nettoyage install√© pour ${entityType}:${id}`, 'debug', 'useGenericEntityDetails');
    
    // S'assurer que isMounted est true au montage
    currentInstance.isMounted = true;
    debugLog(`üîß CLEANUP_EFFECT: isMounted forc√© √† true au montage`, 'debug', 'useGenericEntityDetails');
    
    return () => {
      // Marquer comme d√©mont√©
      debugLog(`üßπ CLEANUP: D√©but d√©montage du hook pour ${entityType}:${id}`, 'info', 'useGenericEntityDetails');
      debugLog(`üßπ CLEANUP: Marquage isMounted = false (√©tait: ${currentInstance.isMounted})`, 'debug', 'useGenericEntityDetails');
      currentInstance.isMounted = false;
      
      // Annuler les requ√™tes en cours
      if (currentInstance.activeAbortController) {
        debugLog(`üßπ CLEANUP: Annulation de la requ√™te en cours`, 'debug', 'useGenericEntityDetails');
        currentInstance.activeAbortController.abort();
        currentInstance.activeAbortController = null;
      }
      
      // D√©senregistrer l'instance du tracker
      debugLog(`üßπ CLEANUP: D√©senregistrement de l'instance ${currentInstance.instanceId}`, 'debug', 'useGenericEntityDetails');
      InstanceTracker.unregister(currentInstance.instanceId);
      
      debugLog(`‚úÖ CLEANUP: D√©montage termin√© pour ${entityType}:${id}`, 'info', 'useGenericEntityDetails');
    };
  }, [entityType, id]);
  
  // Fonction pour d√©finir une entit√© li√©e
  const setRelatedEntity = useCallback((name, entity) => {
    const relatedConfig = relatedEntities.find(rel => rel.name === name);
    if (!relatedConfig) {
      debugLog(`Configuration de l'entit√© li√©e ${name} non trouv√©e`, 'error', 'useGenericEntityDetails');
      return;
    }
    
    // Mettre √† jour les donn√©es du formulaire
    setFormData(prev => ({
      ...prev,
      [relatedConfig.idField]: entity ? entity.id : null
    }));
    
    // Mettre √† jour les donn√©es li√©es
    setRelatedData(prev => ({
      ...prev,
      [name]: entity
    }));
    
    // Stocker dans le cache si activ√©
    if (cacheEnabled && entity) {
      cache.set(`related:${name}:${entity.id}`, entity);
    }
    
    // Marquer le formulaire comme modifi√©
    setIsDirty(true);
  }, [relatedEntities, cacheEnabled, cache]);
  
  // Fonction pour supprimer une entit√© li√©e
  const removeRelatedEntity = useCallback((name) => {
    const relatedConfig = relatedEntities.find(rel => rel.name === name);
    if (!relatedConfig) {
      debugLog(`Configuration de l'entit√© li√©e ${name} non trouv√©e`, 'error', 'useGenericEntityDetails');
      return;
    }
    
    // Mettre √† jour les donn√©es du formulaire
    setFormData(prev => ({
      ...prev,
      [relatedConfig.idField]: null
    }));
    
    // Mettre √† jour les donn√©es li√©es
    setRelatedData(prev => ({
      ...prev,
      [name]: null
    }));
    
    // Marquer le formulaire comme modifi√©
    setIsDirty(true);
  }, [relatedEntities]);
  
  // Fonctions utilitaires 
  const getRelatedEntityId = useCallback((name) => {
    const relatedConfig = relatedEntities.find(rel => rel.name === name);
    if (!relatedConfig || !formData) {
      return null;
    }
    
    return formData[relatedConfig.idField];
  }, [relatedEntities, formData]);
  
  const getRelatedEntityName = useCallback((name) => {
    const entity = relatedData[name];
    if (!entity) {
      return '';
    }
    
    // Essayer d'utiliser un champ standard pour le nom
    for (const field of ['nom', 'name', 'title', 'label']) {
      if (entity[field]) {
        return entity[field];
      }
    }
    
    // Par d√©faut, retourner l'ID
    return entity.id;
  }, [relatedData]);
  
  const formatDisplayValue = useCallback((field, value) => {
    if (formatValue) {
      return formatValue(field, value);
    }
    
    // Formatage par d√©faut
    if (value === null || value === undefined) {
      return '';
    }
    
    if (typeof value === 'boolean') {
      return value ? 'Oui' : 'Non';
    }
    
    if (value instanceof Date) {
      return value.toLocaleDateString();
    }
    
    return String(value);
  }, [formatValue]);
  
  // Fonctions de navigation
  const navigateToRelated = useCallback((name, id) => {
    if (!navigate) return;
    
    const relatedConfig = relatedEntities.find(rel => rel.name === name);
    if (!relatedConfig) {
      debugLog(`Configuration de l'entit√© li√©e ${name} non trouv√©e`, 'error', 'useGenericEntityDetails');
      return;
    }
    
    const path = `/${relatedConfig.collection}/${id}`;
    navigate(path);
  }, [navigate, relatedEntities]);
  
  const navigateToEdit = useCallback(() => {
    if (!navigate || !editPath || !id) return;
    
    const path = editPath.replace(':id', id);
    navigate(path);
  }, [navigate, editPath, id]);
  
  const navigateToList = useCallback(() => {
    if (!navigate) return;
    
    const path = `/${collectionName}`;
    navigate(path);
  }, [navigate, collectionName]);
  
  // Fonction pour obtenir des statistiques sur le cache et les instances
  const getStats = useCallback(() => {
    return {
      cache: cacheEnabled ? cache.getStats() : { enabled: false },
      instances: InstanceTracker.getStats(),
      currentInstance: {
        id: instanceRef.current.instanceId,
        number: instanceRef.current.instanceNumber,
        entityType
      },
      subscription: realtime ? {
        enabled: true,
        lastUpdateTime: subscription.lastUpdateTime,
        collectionName,
        documentId: id
      } : { enabled: false }
    };
  }, [cacheEnabled, cache, entityType, realtime, subscription, collectionName, id]);
  
  // Nettoyer le cache complet pour ce type d'entit√©
  const invalidateEntityCache = useCallback(() => {
    if (!cacheEnabled) return 0;
    return cache.invalidateNamespace();
  }, [cacheEnabled, cache]);
  
  // Retourner l'API du hook
  return {
    // Donn√©es et √©tat
    entity,
    loading,
    error,
    relatedData,
    loadingRelated,
    
    // √âtats d'√©dition et formulaire
    isEditing,
    formData,
    setFormData, // Expos√© pour les consommateurs
    isDirty,
    dirtyFields,
    errors: formErrors,
    
    // √âtats d'op√©rations
    isSubmitting,
    isDeleting,
    showDeleteModal,
    
    // Actions de base
    toggleEditMode,
    handleEdit: toggleEditMode,
    handleChange,
    handleSubmit,
    handleDelete,
    handleCancelDelete,
    handleConfirmDelete,
    
    // Gestion des entit√©s li√©es
    loadRelatedEntity: loadRelatedEntityById,
    setRelatedEntity,
    removeRelatedEntity,
    getRelatedEntityId,
    getRelatedEntityName,
    
    // Utilitaires et navigation
    refresh,
    retryFetch,
    formatDisplayValue,
    navigateToRelated,
    navigateToEdit,
    navigateToList,
    validateForm,
    
    // Fonctionnalit√©s de cache et statistiques
    getStats,
    invalidateCache: invalidateEntityCache,
    cacheEnabled,

    // Infos sur l'instance
    instanceId: instanceRef.current.instanceId,
    instanceNumber: instanceRef.current.instanceNumber
  };
};

export default useGenericEntityDetails;

/**
 * Migration automatique des donn√©es RIB
 * S'ex√©cute une seule fois par entreprise pour migrer les donn√©es RIB
 */

import { db, doc, getDoc, setDoc } from '@/services/firebase-service';

/**
 * V√©rifie si la migration a d√©j√† √©t√© effectu√©e pour cette entreprise
 */
async function isMigrationCompleted(entrepriseId) {
  try {
    const migrationRef = doc(db, 'entreprises', entrepriseId, 'migrations', 'ribMigration');
    const migrationDoc = await getDoc(migrationRef);
    return migrationDoc.exists() && migrationDoc.data().completed === true;
  } catch (error) {
    console.error('Erreur lors de la v√©rification de la migration:', error);
    return false;
  }
}

/**
 * Marque la migration comme compl√©t√©e
 */
async function markMigrationCompleted(entrepriseId) {
  try {
    const migrationRef = doc(db, 'entreprises', entrepriseId, 'migrations', 'ribMigration');
    await setDoc(migrationRef, {
      completed: true,
      completedAt: new Date().toISOString(),
      version: '1.0'
    });
  } catch (error) {
    console.error('Erreur lors du marquage de la migration:', error);
  }
}

/**
 * Effectue la migration automatique des donn√©es RIB
 */
export async function autoMigrateRIB(entrepriseId) {
  if (!entrepriseId) return;

  try {
    // V√©rifier si la migration a d√©j√† √©t√© effectu√©e
    const isCompleted = await isMigrationCompleted(entrepriseId);
    if (isCompleted) {
      console.log('‚úÖ Migration RIB d√©j√† effectu√©e pour cette entreprise');
      return;
    }

    console.log('üîÑ D√©but de la migration automatique des donn√©es RIB...');

    // R√©cup√©rer les param√®tres de facturation
    const factureParamsRef = doc(db, 'entreprises', entrepriseId, 'settings', 'factureParameters');
    const factureParamsDoc = await getDoc(factureParamsRef);
    
    if (!factureParamsDoc.exists()) {
      console.log('‚ÑπÔ∏è  Pas de param√®tres de facturation trouv√©s');
      await markMigrationCompleted(entrepriseId);
      return;
    }
    
    const factureParams = factureParamsDoc.data();
    const parameters = factureParams.parameters || {};
    
    // V√©rifier s'il y a des donn√©es RIB √† migrer
    if (!parameters.iban && !parameters.bic && !parameters.nomBanque) {
      console.log('‚ÑπÔ∏è  Pas de donn√©es RIB √† migrer');
      await markMigrationCompleted(entrepriseId);
      return;
    }
    
    console.log('üîç Donn√©es RIB trouv√©es dans les param√®tres de facturation');
    
    // R√©cup√©rer les donn√©es d'entreprise existantes
    const entrepriseRef = doc(db, 'entreprises', entrepriseId, 'settings', 'entreprise');
    const entrepriseDoc = await getDoc(entrepriseRef);
    
    let entrepriseData = {};
    if (entrepriseDoc.exists()) {
      entrepriseData = entrepriseDoc.data();
    }
    
    // Ne migrer que si les donn√©es n'existent pas d√©j√† dans entreprise
    const needsUpdate = 
      (!entrepriseData.iban && parameters.iban) ||
      (!entrepriseData.bic && parameters.bic) ||
      (!entrepriseData.banque && parameters.nomBanque);
    
    if (!needsUpdate) {
      console.log('‚ÑπÔ∏è  Les donn√©es RIB existent d√©j√† dans entreprise');
      await markMigrationCompleted(entrepriseId);
      return;
    }
    
    // Ajouter les donn√©es RIB aux donn√©es d'entreprise
    const updatedData = {
      ...entrepriseData,
      iban: entrepriseData.iban || parameters.iban || '',
      bic: entrepriseData.bic || parameters.bic || '',
      banque: entrepriseData.banque || parameters.nomBanque || '',
      updatedAt: new Date().toISOString(),
      updatedBy: 'auto-migration'
    };
    
    // Sauvegarder les donn√©es mises √† jour
    await setDoc(entrepriseRef, updatedData, { merge: true });
    
    console.log('‚úÖ Migration RIB effectu√©e avec succ√®s');
    console.log('   - IBAN:', updatedData.iban ? '‚úì' : '‚úó');
    console.log('   - BIC:', updatedData.bic ? '‚úì' : '‚úó');
    console.log('   - Banque:', updatedData.banque ? '‚úì' : '‚úó');
    
    // Marquer la migration comme compl√©t√©e
    await markMigrationCompleted(entrepriseId);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration automatique RIB:', error);
  }
}

/**
 * R√©initialise le flag de migration (utile pour les tests)
 */
export async function resetMigrationFlag(entrepriseId) {
  if (!entrepriseId) return;
  
  try {
    const migrationRef = doc(db, 'entreprises', entrepriseId, 'migrations', 'ribMigration');
    await setDoc(migrationRef, {
      completed: false,
      resetAt: new Date().toISOString()
    });
    console.log('üîÑ Flag de migration RIB r√©initialis√©');
  } catch (error) {
    console.error('Erreur lors de la r√©initialisation du flag:', error);
  }
}
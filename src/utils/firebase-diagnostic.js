/**
 * Utilitaire de diagnostic pour d√©tecter les probl√®mes de configuration Firebase
 * qui peuvent causer des erreurs CORS
 */

// üöÄ NOUVEAU : Import du cache utilitaire unifi√©
import { utilityCache } from './networkStabilizer.js';

/**
 * V√©rifie que les variables d'environnement Firebase essentielles sont d√©finies
 */
export function checkFirebaseConfig() {
  const requiredVars = [
    'REACT_APP_FIREBASE_API_KEY',
    'REACT_APP_FIREBASE_AUTH_DOMAIN',
    'REACT_APP_FIREBASE_PROJECT_ID'
  ];
  
  const missingVars = requiredVars.filter(varName => 
    !process.env[varName] || process.env[varName].trim() === ''
  );
  
  if (missingVars.length > 0) {
    console.error('%c‚ö†Ô∏è ERREUR Firebase: Variables d\'environnement manquantes', 
      'background: #FFF3CD; color: #856404; font-size: 16px; padding: 10px;');
    console.error(missingVars.join(', '));
    return false;
  }
  
  return true;
}

/**
 * V√©rifie si l'erreur est li√©e √† un probl√®me CORS avec Firebase
 */
export function isCORSError(error) {
  if (!error) return false;
  
  // V√©rifier les erreurs de type CORS
  const errorString = error.toString().toLowerCase();
  return (
    errorString.includes('cors') || 
    errorString.includes('cross-origin') || 
    errorString.includes('access control') ||
    errorString.includes('network error') ||
    errorString.includes('failed to fetch')
  );
}

/**
 * G√©n√®re un rapport de diagnostic pour les erreurs Firebase
 */
export function generateFirebaseErrorReport() {
  return {
    environment: process.env.NODE_ENV,
    corsProtection: {
      longPollingEnabled: true,
      fetchStreamsDisabled: true,
      timeoutExtended: true
    },
    configPresent: {
      apiKey: !!process.env.REACT_APP_FIREBASE_API_KEY,
      authDomain: !!process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,
      projectId: !!process.env.REACT_APP_FIREBASE_PROJECT_ID,
      storageBucket: !!process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,
      messagingSenderId: !!process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,
      appId: !!process.env.REACT_APP_FIREBASE_APP_ID
    },
    possibleSolutions: [
      'V√©rifier que les variables d\'environnement sont d√©finies dans .env',
      'S\'assurer que l\'origine de l\'app est autoris√©e dans la console Firebase',
      'V√©rifier que le navigateur n\'a pas de restrictions CORS suppl√©mentaires',
      'Essayer en mode navigation priv√©e pour √©liminer les probl√®mes d\'extensions'
    ]
  };
}

/**
 * V√©rifie si les r√®gles Firestore peuvent poser probl√®me
 * @param {Object} error - L'erreur Firebase captur√©e
 * @returns {Object} - Analyse de l'erreur
 */
export function analyzeFirebaseError(error) {
  const analysis = {
    isCorsError: false,
    isAuthError: false,
    isRulesError: false,
    isQuotaError: false,
    message: ''
  };
  
  if (!error) return analysis;
  
  // D√©tection des erreurs CORS
  if (
    error.message?.includes('XMLHttpRequest') || 
    error.message?.includes('CORS') ||
    error.message?.includes('access control checks')
  ) {
    analysis.isCorsError = true;
    analysis.message = 'Erreur CORS: Probl√®me d\'acc√®s √† Firebase';
  }
  
  // D√©tection des erreurs d'authentification
  else if (
    error.code === 'auth/unauthorized' || 
    error.code === 'permission-denied' ||
    error.message?.includes('permission')
  ) {
    analysis.isAuthError = true;
    analysis.message = 'Erreur d\'authentification: Acc√®s refus√©';
  }
  
  // D√©tection des erreurs de r√®gles Firestore
  else if (
    error.code === 'permission-denied' || 
    error.message?.includes('rules')
  ) {
    analysis.isRulesError = true;
    analysis.message = 'Erreur de r√®gles Firestore: V√©rifiez vos r√®gles de s√©curit√©';
  }
  
  // D√©tection des erreurs de quota
  else if (
    error.code === 'resource-exhausted' ||
    error.message?.includes('quota')
  ) {
    analysis.isQuotaError = true;
    analysis.message = 'Erreur de quota: Limite d\'utilisation Firebase atteinte';
  }
  
  return analysis;
}

/**
 * Teste la connexion Firebase et retourne un diagnostic
 * @returns {Promise<Object>} - R√©sultat du test
 */
export async function testFirebaseConnection() {
  // Cette fonction pourrait √™tre appel√©e depuis une interface de diagnostic
  return new Promise((resolve) => {
    const timeout = setTimeout(() => {
      resolve({
        success: false,
        error: 'Timeout - La connexion Firebase prend trop de temps'
      });
    }, 10000); // 10 secondes de timeout
    
    // üéØ SIMPLIFICATION : Utilisation du cache utilitaire unifi√©
    const connectionStatus = utilityCache.get('firebaseConnectionStatus');
    if (connectionStatus) {
      // Le cache a d√©j√† un TTL int√©gr√©, pas besoin de v√©rifier manuellement
      clearTimeout(timeout);
      return resolve(connectionStatus);
    }
    
    // Ici, on pourrait impl√©menter un test plus avanc√©
    // Pour l'instant, on se base sur notre v√©rification de config
    const configValid = checkFirebaseConfig();
    
    const result = {
      success: configValid,
      timestamp: Date.now(),
      error: configValid ? null : 'Configuration Firebase invalide'
    };
    
    // üöÄ NOUVEAU : Sauvegarder avec TTL de 5 minutes
    utilityCache.set('firebaseConnectionStatus', result, 5 * 60 * 1000);
    
    clearTimeout(timeout);
    resolve(result);
  });
}
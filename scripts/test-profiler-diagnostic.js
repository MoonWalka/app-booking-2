const puppeteer = require('puppeteer');

async function diagnosticProfiler() {
  console.log('üîç Diagnostic du React Profiler...\n');
  
  const browser = await puppeteer.launch({
    headless: false,
    devtools: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });

  const page = await browser.newPage();

  // Capturer TOUS les logs de la console
  let profilerFound = false;
  let profileDataCaptured = false;
  const allLogs = [];
  
  page.on('console', msg => {
    const text = msg.text();
    allLogs.push(text);
    
    // V√©rifier si le Profiler est actif
    if (text.includes('üé≠ Profiler')) {
      profilerFound = true;
      profileDataCaptured = true;
      console.log('‚úÖ Profiler actif:', text.substring(0, 100) + '...');
    }
    
    // V√©rifier les logs de rendu
    if (text.includes('ConcertFormDesktop RENDER')) {
      console.log('üìä Render d√©tect√©:', text);
    }
    
    // V√©rifier si recordProfilerData est appel√©
    if (text.includes('recordProfilerData') || text.includes('PROFILER_STATS')) {
      console.log('üìà Appel de recordProfilerData d√©tect√©');
    }
  });

  try {
    // 1. Aller sur la page
    console.log('üìç Navigation vers /concerts...');
    await page.goto('http://localhost:3000/concerts', {
      waitUntil: 'networkidle0',
      timeout: 30000
    });
    await page.waitForTimeout(2000);

    // 2. V√©rifier si le ProfilerMonitor est visible
    console.log('\nüîç Recherche du ProfilerMonitor...');
    const profilerMonitor = await page.$('.profiler-monitor');
    if (profilerMonitor) {
      console.log('‚úÖ ProfilerMonitor trouv√© dans le DOM');
      
      // V√©rifier son contenu
      const content = await page.evaluate(() => {
        const monitor = document.querySelector('.profiler-monitor');
        return monitor ? monitor.textContent : null;
      });
      console.log('üìù Contenu du ProfilerMonitor:', content);
    } else {
      console.log('‚ùå ProfilerMonitor non trouv√© dans le DOM');
    }

    // 3. V√©rifier les donn√©es globales
    console.log('\nüîç V√©rification des donn√©es globales...');
    const globalData = await page.evaluate(() => {
      return {
        hasProfilerStats: typeof window.PROFILER_STATS !== 'undefined',
        profilerStats: window.PROFILER_STATS || null,
        profilerDataLength: window.PROFILER_STATS ? Object.keys(window.PROFILER_STATS.renders || {}).length : 0
      };
    });
    console.log('üìä Donn√©es globales:', globalData);

    // 4. Naviguer vers le formulaire
    console.log('\nüìç Navigation vers le formulaire de concert...');
    await page.click('button[aria-label="Ajouter un concert"]');
    await page.waitForTimeout(3000);

    // 5. V√©rifier que le formulaire est charg√©
    const formLoaded = await page.$('input[name="nom"]');
    if (formLoaded) {
      console.log('‚úÖ Formulaire charg√©');
    } else {
      console.log('‚ùå Formulaire non trouv√©');
    }

    // 6. Re-v√©rifier les donn√©es apr√®s navigation
    console.log('\nüîç Re-v√©rification apr√®s navigation...');
    const dataAfterNav = await page.evaluate(() => {
      return {
        hasProfilerStats: typeof window.PROFILER_STATS !== 'undefined',
        profilerStats: window.PROFILER_STATS || null,
        profilerDataLength: window.PROFILER_STATS ? Object.keys(window.PROFILER_STATS.renders || {}).length : 0
      };
    });
    console.log('üìä Donn√©es apr√®s navigation:', dataAfterNav);

    // 7. Tester un appel direct √† recordProfilerData
    console.log('\nüîç Test d\'appel direct √† recordProfilerData...');
    const testResult = await page.evaluate(() => {
      if (typeof window.recordProfilerData === 'function') {
        window.recordProfilerData('Test-Component', 'update', 25.5);
        return { success: true, data: window.PROFILER_STATS };
      }
      return { success: false, error: 'recordProfilerData non trouv√©' };
    });
    console.log('üìä R√©sultat du test:', testResult);

    // 8. Analyser les logs
    console.log('\nüìã ANALYSE DES LOGS:');
    console.log(`  - Total de logs captur√©s: ${allLogs.length}`);
    console.log(`  - Profiler trouv√©: ${profilerFound ? '‚úÖ OUI' : '‚ùå NON'}`);
    console.log(`  - Donn√©es captur√©es: ${profileDataCaptured ? '‚úÖ OUI' : '‚ùå NON'}`);

    // 9. Suggestions
    console.log('\nüí° DIAGNOSTIC:');
    if (!profilerFound) {
      console.log('‚ùå Le Profiler ne semble pas √™tre actif. V√©rifiez que:');
      console.log('   1. Le composant ConcertForm utilise bien les <Profiler>');
      console.log('   2. L\'import de recordProfilerData est correct');
      console.log('   3. Le bon composant est charg√© (Desktop vs Mobile)');
    } else if (!profileDataCaptured) {
      console.log('‚ö†Ô∏è Le Profiler est actif mais les donn√©es ne sont pas enregistr√©es');
      console.log('   V√©rifiez que recordProfilerData est bien appel√© dans onRenderCallback');
    } else {
      console.log('‚úÖ Le syst√®me semble fonctionner correctement');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error);
  } finally {
    console.log('\nüèÅ Diagnostic termin√©. Fermeture dans 10 secondes...');
    await page.waitForTimeout(10000);
    await browser.close();
  }
}

// Ex√©cuter le diagnostic
diagnosticProfiler().catch(console.error); 
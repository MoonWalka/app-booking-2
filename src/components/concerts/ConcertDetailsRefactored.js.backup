import React, { useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import useSafeRelations from '../../hooks/common/useSafeRelations';
import RelationCard from '../common/RelationCard';
import Card from '../ui/Card';
import FormHeader from '../ui/FormHeader';
import LoadingSpinner from '../ui/LoadingSpinner';
import Alert from '../ui/Alert';
import ConcertInfoSection from './ConcertInfoSection';
import './ConcertDetails.module.css';

/**
 * Version refactoris√©e de ConcertDetails utilisant les nouveaux composants anti-boucles
 * Test de la Phase 1 du plan de refactoring
 */
const ConcertDetailsRefactored = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  
  // Debug logs
  useEffect(() => {
    console.log('üéµ ConcertDetailsRefactored mont√© avec ID:', id);
  }, [id]);
  
  // Utiliser le hook s√©curis√© avec profondeur 1 (charge les relations directes seulement)
  const { data: concert, loading, error } = useSafeRelations('concert', id, 1, {
    includeRelations: true,
    maxRelationsPerType: 5
  });
  
  // Plus de debug
  useEffect(() => {
    console.log('üìä √âtat du concert:', { loading, error, concert });
  }, [loading, error, concert]);
  
  // Debug logs pour les donn√©es
  useEffect(() => {
    console.log('üéµ √âtat du chargement:', { loading, error, concert });
  }, [loading, error, concert]);
  
  if (loading) {
    return (
      <div className="concertDetailsContainer">
        <LoadingSpinner message="Chargement du concert..." />
      </div>
    );
  }
  
  if (error) {
    return (
      <div className="concertDetailsContainer">
        <Alert type="error">
          Erreur lors du chargement du concert : {error.message}
        </Alert>
      </div>
    );
  }
  
  if (!concert) {
    return (
      <div className="concertDetailsContainer">
        <Alert type="warning">
          Concert non trouv√©
        </Alert>
      </div>
    );
  }
  
  return (
    <div className="concertDetailsContainer">
      <FormHeader
        title={concert.titre || 'Concert sans titre'}
        icon={<i className="bi bi-calendar-event"></i>}
        subtitle={concert.date ? new Date(concert.date).toLocaleDateString('fr-FR') : ''}
        actions={[
          <button
            key="back"
            className="btn btn-secondary"
            onClick={() => navigate('/concerts')}
          >
            <i className="bi bi-arrow-left me-2"></i>
            Retour
          </button>,
          <button
            key="edit"
            className="btn btn-primary"
            onClick={() => navigate(`/concerts/${id}/edit`)}
          >
            <i className="bi bi-pencil me-2"></i>
            Modifier
          </button>
        ]}
      />
      
      {/* Section Informations g√©n√©rales */}
      <Card className="detailsCard">
        <h3 className="sectionTitle">
          <i className="bi bi-info-circle me-2"></i>
          Informations g√©n√©rales
        </h3>
        
        <ConcertInfoSection entity={concert} />
      </Card>
      
      {/* Section Artistes - Utilise RelationCard */}
      {concert.artistes && concert.artistes.length > 0 && (
        <Card className="detailsCard">
          <h3 className="sectionTitle">
            <i className="bi bi-music-note-beamed me-2"></i>
            Artistes ({concert.artistes.length})
          </h3>
          
          <div className="relationsGrid">
            {concert.artistes.map(artiste => (
              <RelationCard
                key={artiste.id}
                entity={artiste}
                type="artiste"
                onClick={(id) => navigate(`/artistes/${id}`)}
              />
            ))}
          </div>
          
          {concert.artistesHasMore && (
            <p className="moreItems">
              + {concert.artistesCount - concert.artistes.length} autres artistes
            </p>
          )}
        </Card>
      )}
      
      {/* Section Lieu - Avec carte Google Maps */}
      {concert.lieu && (
        <Card className="detailsCard">
          <h3 className="sectionTitle">
            <i className="bi bi-geo-alt me-2"></i>
            Lieu
            <button
              onClick={() => navigate(`/lieux/${concert.lieu.id}`)}
              className="btn btn-outline-primary btn-sm ms-2"
            >
              <i className="bi bi-eye me-1"></i>
              Voir d√©tails
            </button>
          </h3>
          
          <div className="row">
            <div className="col-md-6">
              <div className="mb-3">
                <div className="fw-bold">Nom:</div>
                <div>{concert.lieu.nom}</div>
              </div>
              <div className="mb-3">
                <div className="fw-bold">Adresse:</div>
                <div>
                  <div>{concert.lieu.adresse}</div>
                  <div>{concert.lieu.codePostal} {concert.lieu.ville}</div>
                </div>
              </div>
            </div>
            <div className="col-md-6">
              <div className="mb-3">
                <div className="fw-bold">Capacit√©:</div>
                <div>{concert.lieu.capacite ? `${concert.lieu.capacite} personnes` : 'Non sp√©cifi√©e'}</div>
              </div>
              <div className="mb-3">
                <div className="fw-bold">Contact:</div>
                <div>
                  {concert.lieu.email && (
                    <div>
                      <a href={`mailto:${concert.lieu.email}`} className="text-decoration-none">
                        <i className="bi bi-envelope me-1"></i>
                        {concert.lieu.email}
                      </a>
                    </div>
                  )}
                  {concert.lieu.telephone && (
                    <div className="mt-1">
                      <a href={`tel:${concert.lieu.telephone}`} className="text-decoration-none">
                        <i className="bi bi-telephone me-1"></i>
                        {concert.lieu.telephone}
                      </a>
                    </div>
                  )}
                  {!concert.lieu.email && !concert.lieu.telephone && (
                    <span className="text-muted">Non sp√©cifi√©</span>
                  )}
                </div>
              </div>
            </div>
          </div>
          
          {/* Carte Google Maps */}
          <div className="mt-3">
            <div className="mb-3" style={{ border: '1px solid #dee2e6', borderRadius: '0.375rem', overflow: 'hidden' }}>
              <iframe 
                title={`Carte de localisation de ${concert.lieu.nom} - ${concert.lieu.adresse}, ${concert.lieu.codePostal} ${concert.lieu.ville}`}
                src={`https://maps.google.com/maps?q=${encodeURIComponent(`${concert.lieu.adresse}, ${concert.lieu.codePostal} ${concert.lieu.ville}`)}&z=15&output=embed`}
                width="100%" 
                height="300" 
                style={{ border: 'none' }}
                allowFullScreen="" 
                loading="lazy" 
                referrerPolicy="no-referrer-when-downgrade"
              ></iframe>
            </div>
            <a 
              href={`https://maps.google.com/maps?q=${encodeURIComponent(`${concert.lieu.adresse}, ${concert.lieu.codePostal} ${concert.lieu.ville}`)}`}
              target="_blank"
              rel="noopener noreferrer" 
              className="btn btn-outline-secondary btn-sm"
            >
              <i className="bi bi-map me-1"></i>
              Voir en plein √©cran
            </a>
          </div>
        </Card>
      )}
      
      {/* Section Organisateur - Utilise RelationCard */}
      {concert.programmateur && (
        <Card className="detailsCard">
          <h3 className="sectionTitle">
            <i className="bi bi-person me-2"></i>
            Organisateur
          </h3>
          
          <RelationCard
            entity={concert.programmateur}
            type="contact"
            onClick={(id) => navigate(`/programmateurs/${id}`)}
            showBadge={false}
          />
        </Card>
      )}
      
      {/* Section Notes */}
      {concert.notes && (
        <Card className="detailsCard">
          <h3 className="sectionTitle">
            <i className="bi bi-journal-text me-2"></i>
            Notes
          </h3>
          
          <p className="notesContent">{concert.notes}</p>
        </Card>
      )}
    </div>
  );
};

export default ConcertDetailsRefactored;
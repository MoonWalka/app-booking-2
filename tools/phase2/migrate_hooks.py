#!/usr/bin/env python3
"""
Script de migration automatique pour la Phase 2
Aide √† la migration des hooks sp√©cifiques vers les hooks g√©n√©riques
"""

import os
import shutil
from pathlib import Path

class HookMigrator:
    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        self.hooks_dir = self.project_root / "src" / "hooks"
        self.backup_dir = self.project_root / "tools" / "phase2" / "backups"
        
    def backup_hook(self, hook_path: str):
        """Sauvegarde un hook avant migration"""
        source = self.hooks_dir / hook_path
        if source.exists():
            self.backup_dir.mkdir(parents=True, exist_ok=True)
            backup_path = self.backup_dir / hook_path
            backup_path.parent.mkdir(parents=True, exist_ok=True)
            shutil.copy2(source, backup_path)
            print(f"‚úÖ Backup cr√©√©: {hook_path}")
    
    def migrate_hook(self, source_path: str, target_path: str):
        """Migre un hook sp√©cifique vers un hook g√©n√©rique"""
        print(f"üîÑ Migration: {source_path} ‚Üí {target_path}")
        # TODO: Impl√©menter la logique de migration
        # Cette fonction sera d√©velopp√©e selon les besoins sp√©cifiques
        
    def validate_migration(self, hook_path: str):
        """Valide qu'une migration s'est bien pass√©e"""
        # TODO: Impl√©menter la validation
        pass

if __name__ == "__main__":
    migrator = HookMigrator(os.getcwd())
    print("üöÄ Script de migration Phase 2 pr√™t")
    print("Utilisez les m√©thodes du migrator pour effectuer les migrations")

import React, { useState, useCallback, useEffect, Profiler } from 'react';

const ConcertFormDesktop = ({ id = null, onClose, onSave, defaultView = 'form', isEmbedded = false }) => {
  // Compteur de rendus pour debug
  const [renderCount, setRenderCount] = useState(0);
  useEffect(() => {
    setRenderCount(prev => prev + 1);
  });

  // Fonction de callback pour le Profiler
  const onRenderCallback = (
    id, // l'identifiant "id" du Profiler dont l'arbre vient d'Ãªtre mis Ã  jour
    phase, // soit "mount" (si l'arbre vient d'Ãªtre montÃ©) soit "update" (s'il a Ã©tÃ© re-rendu)
    actualDuration, // temps passÃ© Ã  faire le rendu de la mise Ã  jour
    baseDuration, // temps estimÃ© pour faire le rendu de l'ensemble du sous-arbre sans mÃ©moÃ¯sation
    startTime, // quand React a commencÃ© Ã  faire le rendu de cette mise Ã  jour
    commitTime, // quand React a appliquÃ© cette mise Ã  jour
    interactions // l'ensemble des interactions liÃ©es Ã  cette mise Ã  jour
  ) => {
    console.log(`ðŸŽ­ Profiler [${id}]:`, {
      phase,
      actualDuration: `${actualDuration.toFixed(2)}ms`,
      baseDuration: `${baseDuration.toFixed(2)}ms`,
      renderCount,
      timestamp: new Date().toISOString()
    });
  };

  return (
    <Profiler id="ConcertFormDesktop" onRender={onRenderCallback}>
      <div className="concert-form-desktop" style={{ backgroundColor: 'lightblue', padding: '10px' }}>
        <div style={{ position: 'absolute', top: 10, right: 10, backgroundColor: 'red', color: 'white', padding: '5px 10px', borderRadius: '5px', zIndex: 1000 }}>
          Renders: {renderCount}
        </div>
        {/* ... existing code ... */}
      </div>
    </Profiler>
  );
};

export default ConcertFormDesktop; 
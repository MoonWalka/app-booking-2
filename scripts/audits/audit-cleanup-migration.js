#!/usr/bin/env node

/**
 * AUDIT COMPLET - Nettoyage post-migration programmateur‚Üícontact
 * G√©n√®re un rapport structur√© des fichiers et code √† nettoyer
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Configuration
const SRC_DIR = './src';
const AUDIT_REPORT = 'AUDIT_NETTOYAGE_POST_MIGRATION.md';

// Collecteurs de donn√©es
const auditData = {
  fichiersProgrammateurs: [],
  fichiersDupliquesContacts: [],
  fichiersDebugTemporaires: [],
  referencesProgrammateurDansCode: [],
  importsObsoletes: [],
  variablesObsoletes: [],
  fichiersNonUtilises: [],
  dossiersProgrammateurs: []
};

console.log('üîç AUDIT POST-MIGRATION PROGRAMMATEUR‚ÜíCONTACT');
console.log('================================================\n');

// 1. RECHERCHE DES FICHIERS PROGRAMMATEURS
console.log('1. üìÅ Recherche des fichiers programmateurs...');
try {
  // Fichiers avec "programmateur" ou "Programmateur" dans le nom
  const programmateursFiles = execSync(`find ${SRC_DIR} -name "*rogrammateur*" -type f`, { encoding: 'utf8' })
    .split('\n')
    .filter(line => line.trim())
    .map(file => file.trim());
  
  auditData.fichiersProgrammateurs = programmateursFiles;
  console.log(`   ‚úÖ ${programmateursFiles.length} fichiers trouv√©s`);
  
  // Dossiers programmateurs
  const programmateursDirectories = execSync(`find ${SRC_DIR} -name "*rogrammateur*" -type d`, { encoding: 'utf8' })
    .split('\n')
    .filter(line => line.trim())
    .map(dir => dir.trim());
  
  auditData.dossiersProgrammateurs = programmateursDirectories;
  console.log(`   ‚úÖ ${programmateursDirectories.length} dossiers trouv√©s`);
  
} catch (error) {
  console.log('   ‚ö†Ô∏è  Aucun fichier programmateur trouv√©');
}

// 2. RECHERCHE DES DOUBLONS DE COMPOSANTS CONTACTS
console.log('\n2. üîÑ Analyse des doublons Contact...');
const contactFiles = execSync(`find ${SRC_DIR} -name "*Contact*" -type f | grep -E "\\.(js|jsx)$"`, { encoding: 'utf8' })
  .split('\n')
  .filter(line => line.trim())
  .map(file => file.trim());

// Identifier les versions multiples
const contactVersions = {
  'ContactDetails': contactFiles.filter(f => f.includes('ContactDetails') && !f.includes('test')),
  'ContactView': contactFiles.filter(f => f.includes('ContactView') && !f.includes('test')),
  'ContactForm': contactFiles.filter(f => f.includes('ContactForm') && !f.includes('test'))
};

Object.entries(contactVersions).forEach(([type, files]) => {
  if (files.length > 1) {
    console.log(`   ‚ö†Ô∏è  ${type}: ${files.length} versions d√©tect√©es`);
    auditData.fichiersDupliquesContacts.push({
      type,
      files,
      action: 'V√©rifier quelle version est utilis√©e'
    });
  }
});

// 3. RECHERCHE DES FICHIERS DEBUG/TEMPORAIRES
console.log('\n3. üßπ Recherche des fichiers debug/temporaires...');
const debugFiles = execSync(`find ${SRC_DIR} -name "*test*" -o -name "*Test*" -o -name "*debug*" -o -name "*Debug*" -o -name "*backup*" -o -name "*Backup*" | grep -v node_modules`, { encoding: 'utf8' })
  .split('\n')
  .filter(line => line.trim() && !line.includes('__tests__') && !line.includes('setupTests.js'))
  .map(file => file.trim());

auditData.fichiersDebugTemporaires = debugFiles;
console.log(`   ‚úÖ ${debugFiles.length} fichiers debug/temporaires trouv√©s`);

// 4. RECHERCHE DES R√âF√âRENCES "programmateur" DANS LE CODE
console.log('\n4. üîç Recherche des r√©f√©rences programmateur dans le code...');
try {
  const grepResult = execSync(`grep -r "programmateur" ${SRC_DIR} --include="*.js" --include="*.jsx" --include="*.css" | head -20`, { encoding: 'utf8' });
  const references = grepResult.split('\n').filter(line => line.trim());
  
  auditData.referencesProgrammateurDansCode = references.slice(0, 20); // Limiter √† 20 pour le rapport
  console.log(`   ‚úÖ ${references.length} r√©f√©rences trouv√©es (affichage des 20 premi√®res)`);
} catch (error) {
  console.log('   ‚úÖ Aucune r√©f√©rence programmateur trouv√©e');
}

// 5. RECHERCHE DES VARIABLES OBSOL√àTES
console.log('\n5. üîç Recherche des variables obsol√®tes...');
try {
  const programmateursAssociesRefs = execSync(`grep -r "programmateursAssocies" ${SRC_DIR} --include="*.js" --include="*.jsx"`, { encoding: 'utf8' })
    .split('\n')
    .filter(line => line.trim());
  
  auditData.variablesObsoletes = programmateursAssociesRefs;
  console.log(`   ‚úÖ ${programmateursAssociesRefs.length} r√©f√©rences √† programmateursAssocies trouv√©es`);
} catch (error) {
  console.log('   ‚úÖ Aucune variable obsol√®te trouv√©e');
}

// 6. ANALYSE DES IMPORTS
console.log('\n6. üì¶ Analyse des imports...');
const filesToAnalyze = [
  './src/pages/ContactsPage.js',
  './src/components/contacts/ContactsList.js'
];

filesToAnalyze.forEach(file => {
  if (fs.existsSync(file)) {
    const content = fs.readFileSync(file, 'utf8');
    const lines = content.split('\n');
    
    lines.forEach((line, index) => {
      if (line.includes('ContactDetails') || line.includes('ContactViewModern') || line.includes('ContactViewV2')) {
        auditData.importsObsoletes.push({
          file,
          line: index + 1,
          content: line.trim()
        });
      }
    });
  }
});

console.log(`   ‚úÖ ${auditData.importsObsoletes.length} imports obsol√®tes d√©tect√©s`);

// G√âN√âRATION DU RAPPORT
console.log('\nüìä G√©n√©ration du rapport...');
const rapport = `# AUDIT DE NETTOYAGE POST-MIGRATION PROGRAMMATEUR‚ÜíCONTACT

## üìã R√âSUM√â EX√âCUTIF

**Date:** ${new Date().toLocaleDateString('fr-FR')}
**Objectif:** Identifier et nettoyer les √©l√©ments obsol√®tes apr√®s la migration programmateur‚Üícontact

### üéØ STATISTIQUES G√âN√âRALES
- **Fichiers programmateurs:** ${auditData.fichiersProgrammateurs.length}
- **Dossiers programmateurs:** ${auditData.dossiersProgrammateurs.length}
- **Doublons contacts:** ${auditData.fichiersDupliquesContacts.length} types
- **Fichiers debug/temporaires:** ${auditData.fichiersDebugTemporaires.length}
- **R√©f√©rences programmateur:** ${auditData.referencesProgrammateurDansCode.length}
- **Variables obsol√®tes:** ${auditData.variablesObsoletes.length}
- **Imports obsol√®tes:** ${auditData.importsObsoletes.length}

## üóÇÔ∏è SECTION 1: FICHIERS PROGRAMMATEURS √Ä SUPPRIMER

### üìÅ Fichiers avec "programmateur" dans le nom
${auditData.fichiersProgrammateurs.length === 0 ? '‚úÖ Aucun fichier trouv√©' : 
auditData.fichiersProgrammateurs.map(file => `- \`${file}\``).join('\n')}

### üìÇ Dossiers programmateurs √† supprimer
${auditData.dossiersProgrammateurs.length === 0 ? '‚úÖ Aucun dossier trouv√©' : 
auditData.dossiersProgrammateurs.map(dir => `- \`${dir}\``).join('\n')}

## üîÑ SECTION 2: DOUBLONS CONTACTS √Ä ANALYSER

${auditData.fichiersDupliquesContacts.length === 0 ? '‚úÖ Aucun doublon d√©tect√©' : 
auditData.fichiersDupliquesContacts.map(doublon => 
`### ${doublon.type}
${doublon.files.map(file => `- \`${file}\``).join('\n')}
**Action:** ${doublon.action}
`).join('\n')}

## üßπ SECTION 3: FICHIERS DEBUG/TEMPORAIRES

${auditData.fichiersDebugTemporaires.length === 0 ? '‚úÖ Aucun fichier debug trouv√©' : 
auditData.fichiersDebugTemporaires.map(file => `- \`${file}\``).join('\n')}

## üîç SECTION 4: R√âF√âRENCES "programmateur" DANS LE CODE

${auditData.referencesProgrammateurDansCode.length === 0 ? '‚úÖ Aucune r√©f√©rence trouv√©e' : 
auditData.referencesProgrammateurDansCode.map(ref => `\`\`\`\n${ref}\n\`\`\``).join('\n\n')}

## üì¶ SECTION 5: VARIABLES OBSOL√àTES

${auditData.variablesObsoletes.length === 0 ? '‚úÖ Aucune variable obsol√®te trouv√©e' : 
auditData.variablesObsoletes.map(ref => `\`\`\`\n${ref}\n\`\`\``).join('\n\n')}

## üì• SECTION 6: IMPORTS OBSOL√àTES

${auditData.importsObsoletes.length === 0 ? '‚úÖ Aucun import obsol√®te trouv√©' : 
auditData.importsObsoletes.map(imp => `**${imp.file}:${imp.line}**\n\`\`\`javascript\n${imp.content}\n\`\`\``).join('\n\n')}

## üöÄ PLAN D'ACTION RECOMMAND√â

### Phase 1: Suppression s√©curis√©e des fichiers programmateurs
\`\`\`bash
# 1. Supprimer les dossiers programmateurs
${auditData.dossiersProgrammateurs.map(dir => `rm -rf "${dir}"`).join('\n')}

# 2. Supprimer les fichiers programmateurs isol√©s
${auditData.fichiersProgrammateurs.filter(f => !auditData.dossiersProgrammateurs.some(d => f.startsWith(d))).map(file => `rm "${file}"`).join('\n')}
\`\`\`

### Phase 2: Mise √† jour des imports
${auditData.importsObsoletes.length > 0 ? 
`- Mettre √† jour les imports dans les fichiers suivants:
${auditData.importsObsoletes.map(imp => `  - ${imp.file}`).join('\n')}` : 
'‚úÖ Aucun import √† mettre √† jour'}

### Phase 3: Nettoyage des variables obsol√®tes
${auditData.variablesObsoletes.length > 0 ? 
'- Remplacer programmateursAssocies par contactsAssocies dans les fichiers identifi√©s' : 
'‚úÖ Aucune variable √† nettoyer'}

### Phase 4: R√©solution des doublons
${auditData.fichiersDupliquesContacts.length > 0 ? 
auditData.fichiersDupliquesContacts.map(doublon => 
`- Analyser et consolider ${doublon.type}`).join('\n') : 
'‚úÖ Aucun doublon √† r√©soudre'}

### Phase 5: Nettoyage des fichiers debug
${auditData.fichiersDebugTemporaires.length > 0 ? 
'- Supprimer les fichiers debug/temporaires apr√®s v√©rification' : 
'‚úÖ Aucun fichier debug √† nettoyer'}

## ‚ö†Ô∏è AVERTISSEMENTS

1. **Toujours faire un backup avant suppression**
2. **Tester l'application apr√®s chaque phase**
3. **V√©rifier les tests unitaires**
4. **V√©rifier que les imports mis √† jour pointent vers les bons composants**

## üìä ESTIMATION

- **Temps estim√©:** 2-3 heures
- **Risque:** Faible (si suivi m√©thodiquement)
- **Impact:** Am√©lioration significative de la propret√© du code

---
*Rapport g√©n√©r√© automatiquement le ${new Date().toLocaleString('fr-FR')}*
`;

// √âcriture du rapport
fs.writeFileSync(AUDIT_REPORT, rapport, 'utf8');

console.log(`‚úÖ Rapport g√©n√©r√©: ${AUDIT_REPORT}`);
console.log('\nüéâ AUDIT TERMIN√â!');
console.log(`üìÑ Consultez le fichier ${AUDIT_REPORT} pour le rapport d√©taill√©`);

// Affichage du r√©sum√©
console.log('\nüìä R√âSUM√â:');
console.log(`   üìÅ ${auditData.fichiersProgrammateurs.length} fichiers programmateurs`);
console.log(`   üìÇ ${auditData.dossiersProgrammateurs.length} dossiers programmateurs`);
console.log(`   üîÑ ${auditData.fichiersDupliquesContacts.length} types de doublons`);
console.log(`   üßπ ${auditData.fichiersDebugTemporaires.length} fichiers debug`);
console.log(`   üîç ${auditData.referencesProgrammateurDansCode.length} r√©f√©rences programmateur`);
console.log(`   üì¶ ${auditData.importsObsoletes.length} imports obsol√®tes`);
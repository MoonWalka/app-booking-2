=== ANALYSE DES DÉPENDANCES ===
React: ^18.2.0
React DOM: ^18.2.0
CRACO: ^7.1.0
React Scripts: 5.0.1
Firebase: ^9.17.2

Script de build: craco build

✓ Aucun problème de compatibilité détecté dans package.json

=== ANALYSE FIREBASE ===
✓ Version Firebase compatible
Processed 105 files (505ms) (21 warnings)
Analyse de 84 fichiers JS/JSX...

=== RÉSULTATS DE L'ANALYSE DES IMPORTS ===
Total des imports analysés: 289

=== PROBLÈMES POTENTIELS (3) ===
src/components/concerts/desktop/ConcertDetails.js:4: import FormGenerator from '../forms/FormGenerator';
   ↳ Problème: L'import relatif pointe vers un fichier qui n'existe pas: ../forms/FormGenerator
src/components/forms/desktop/LieuForm.js:5: import { useLocationIQ } from '../../hooks/useLocationIQ';
   ↳ Problème: L'import relatif pointe vers un fichier qui n'existe pas: ../../hooks/useLocationIQ
src/components/forms/desktop/ProgrammateurForm.js:5: import { useLocationIQ } from '../../hooks/useLocationIQ';
   ↳ Problème: L'import relatif pointe vers un fichier qui n'existe pas: ../../hooks/useLocationIQ

=== TOP 10 DES MODULES LES PLUS IMPORTÉS ===
react: 72 imports
react-router-dom: 40 imports
@firebase: 32 imports
firebase/firestore: 27 imports
../../hooks/useResponsiveComponent: 15 imports
react-bootstrap: 14 imports
../../common/steps/StepNavigation: 4 imports
@react-pdf/renderer: 4 imports
../../config: 3 imports
react-bootstrap/OverlayTrigger: 3 imports
-e 
=== CONTENU DE FIREBASE.JS ===
import { initializeApp } from 'firebase/app';
import * as firestoreModule from 'firebase/firestore';
import * as authModule from 'firebase/auth';
import * as storageModule from 'firebase/storage';
import * as remoteConfigModule from 'firebase/remote-config';
const { 
  getFirestore, connectFirestoreEmulator,
  collection, doc, getDoc, getDocs,
  addDoc, setDoc, updateDoc, deleteDoc,
  query, where, orderBy, limit, startAfter,
  serverTimestamp, arrayUnion, arrayRemove
} = firestoreModule;
const {
  getAuth,
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
  signOut
} = authModule;
const {
  getStorage,
  ref, uploadBytes, getDownloadURL
} = storageModule;
const {
  getRemoteConfig, fetchAndActivate
} = remoteConfigModule;
const firebaseConfig = {
  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,
  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,
  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.REACT_APP_FIREBASE_APP_ID,
  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID
};
const requiredEnvVars = ['REACT_APP_FIREBASE_API_KEY', 'REACT_APP_FIREBASE_PROJECT_ID'];
const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
if (missingVars.length > 0) {
  console.error(`Variables d'environnement manquantes: ${missingVars.join(', ')}`);
  console.error('Consultez le fichier .env.example pour configurer correctement votre environnement');
}
console.log("Firebase config - apiKey présente:", !!firebaseConfig.apiKey);
console.log("Firebase config - projectId:", firebaseConfig.projectId);
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);
const storage = getStorage(app);
const remoteConfig = getRemoteConfig(app);
const useEmulator = process.env.NODE_ENV === 'development' &&
  process.env.REACT_APP_USE_EMULATOR === 'true';
if (useEmulator) {
  connectFirestoreEmulator(db, 'localhost', 8080);
  console.log('Connected to Firestore emulator');
}
const isEmulator = useEmulator;
console.log('Running in ' + (isEmulator ? 'emulator' : 'production') + ' mode.');
console.log("Firestore initialisé avec succès");
const initializeRemoteConfig = async () => {
  if (!app) {
    console.error("Cannot initialize Remote Config: Firebase app not initialized");
    return null;
  }
  
  try {
    // Configurer le temps minimum entre les actualisations (1 heure en ms)
    remoteConfig.settings.minimumFetchIntervalMillis = 3600000;
    
    // Définir les valeurs par défaut (utilisées en cas d'échec de chargement)
    remoteConfig.defaultConfig = {
      locationiq_api_key: process.env.REACT_APP_LOCATIONIQ_API_KEY || ""
    };
    
    // Récupérer et activer la configuration
    await fetchAndActivate(remoteConfig);
    console.log("Remote Config activé avec succès");
    
    return remoteConfig;
  } catch (error) {
    console.error("Erreur d'initialisation de Remote Config:", error);
    return null;
  }
};
export {
  app,
  db,
  auth,
  storage,
  remoteConfig,
  initializeRemoteConfig,
  // Fonctions Firestore
  collection, doc, getDoc, getDocs,
  addDoc, setDoc, updateDoc, deleteDoc,
  query, where, orderBy, limit, startAfter,
  serverTimestamp, arrayUnion, arrayRemove,
  // Fonctions Auth
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
  signOut,
  // Fonctions Storage
  ref, uploadBytes, getDownloadURL
};
export default app;
-e 
=== ANALYSE DES RÉEXPORTATIONS ===
=== VÉRIFICATION DES EXPORTATIONS FIREBASE ===
db: ✓ Exporté
auth: ✓ Exporté
storage: ✓ Exporté
collection: ✓ Exporté
doc: ✓ Exporté

1 imports Firebase trouvés

#!/bin/bash

# Audit de l'Organisation de la Documentation CSS
# Identifie les incoh√©rences, doublons et fichiers obsol√®tes

set -e

echo "üìö AUDIT ORGANISATION DOCUMENTATION CSS"
echo "========================================"
echo "Analyse des incoh√©rences, doublons et informations obsol√®tes"
echo ""

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

ISSUES_FOUND=0

print_issue() {
    local severity="$1"
    local message="$2"
    ((ISSUES_FOUND++))
    case $severity in
        "ERROR")
            echo -e "${RED}‚ùå ERREUR: $message${NC}"
            ;;
        "WARNING")
            echo -e "${YELLOW}‚ö†Ô∏è  ATTENTION: $message${NC}"
            ;;
        "INFO")
            echo -e "${BLUE}‚ÑπÔ∏è  INFO: $message${NC}"
            ;;
    esac
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

echo "üìä 1. INVENTAIRE DE LA DOCUMENTATION CSS"
echo "========================================="

# Lister tous les fichiers de documentation CSS
css_docs=(
    "docs/css/GUIDE_STANDARDISATION_CSS.md"
    "docs/css/ARCHITECTURE_CSS.md"
    "docs/css/RESUME_REFACTORISATION_CSS.md"
    "docs/standards/CSS_STYLE_GUIDE.md"
    "src/styles/README.md"
    "css_fallback_removal_guide.md"
    "docs/archive/PLAN_REFACTORISATION_CSS_PROGRESSIF.md"
    "docs/archive/PLAN_REFACTORISATION_CSS_PROGRESSIF_ARCHIVE_COMPLETE.md"
    "docs/archive/css_audit_report.md"
    "docs/archive/global_css_audit_report.md"
    "docs/.ai-docs/audit-css/audit_css_recommendation_7_report.md"
    "tools/audit/audit_css_standards_comprehensive.sh"
)

echo "üîç Fichiers de documentation CSS trouv√©s:"
active_docs=0
archived_docs=0
for doc in "${css_docs[@]}"; do
    if [ -f "$doc" ]; then
        size=$(wc -l < "$doc" 2>/dev/null || echo "0")
        if [[ "$doc" == *"archive"* ]]; then
            echo "   üì¶ $doc ($size lignes) - ARCHIV√â"
            ((archived_docs++))
        else
            echo "   üìÑ $doc ($size lignes) - ACTIF"
            ((active_docs++))
        fi
    else
        print_issue "WARNING" "Fichier r√©f√©renc√© mais manquant: $doc"
    fi
done

echo ""
echo "üìä Total: $active_docs docs actives, $archived_docs docs archiv√©es"

echo ""
echo "üìä 2. V√âRIFICATION STRUCTURE DOCUMENT√âE VS R√âALIT√â"
echo "=================================================="

echo "üîç V√©rification des fichiers CSS mentionn√©s dans la documentation:"

# V√©rifier spacing.css (mentionn√© dans GUIDE_STANDARDISATION_CSS.md)
if [ -f "src/styles/base/spacing.css" ]; then
    print_success "spacing.css existe"
else
    print_issue "ERROR" "spacing.css mentionn√© dans la doc mais inexistant"
fi

# V√©rifier critical.css (mentionn√© dans GUIDE_STANDARDISATION_CSS.md)
if [ -d "src/styles/critical" ] && [ -f "src/styles/critical/critical.css" ]; then
    print_success "Structure critical/ existe"
else
    print_issue "ERROR" "Structure critical/ mentionn√©e dans la doc mais inexistante"
fi

# V√©rifier les fichiers CSS r√©els vs document√©s
echo ""
echo "üîç Structure r√©elle vs document√©e:"
echo "Fichiers r√©els dans src/styles/base/:"
real_base_files=$(ls src/styles/base/*.css 2>/dev/null | xargs -n1 basename)
echo "$real_base_files" | sed 's/^/   ‚úÖ /'

echo ""
echo "üìä 3. ANALYSE DES DOUBLONS ET REDONDANCES"
echo "========================================="

echo "üîç Recherche de contenu dupliqu√©:"

# Chercher les doublons de variables CSS document√©es
duplicated_vars=0
if grep -q "--tc-primary-color" docs/css/GUIDE_STANDARDISATION_CSS.md && 
   grep -q "--tc-primary-color" docs/standards/CSS_STYLE_GUIDE.md; then
    print_issue "WARNING" "Variables CSS document√©es dans plusieurs guides"
    ((duplicated_vars++))
fi

if grep -q "BEM modifi√©" docs/css/GUIDE_STANDARDISATION_CSS.md && 
   grep -q "BEM modifi√©" docs/standards/CSS_STYLE_GUIDE.md; then
    print_issue "WARNING" "Convention BEM document√©e dans plusieurs guides"
    ((duplicated_vars++))
fi

if [ "$duplicated_vars" -eq 0 ]; then
    print_success "Pas de redondance majeure d√©tect√©e"
fi

# V√©rifier les plans de refactorisation dupliqu√©s
if [ -f "docs/archive/PLAN_REFACTORISATION_CSS_PROGRESSIF.md" ] && 
   [ -f "docs/archive/PLAN_REFACTORISATION_CSS_PROGRESSIF_ARCHIVE_COMPLETE.md" ]; then
    size1=$(wc -l < "docs/archive/PLAN_REFACTORISATION_CSS_PROGRESSIF.md")
    size2=$(wc -l < "docs/archive/PLAN_REFACTORISATION_CSS_PROGRESSIF_ARCHIVE_COMPLETE.md")
    if [ "$size1" -eq "$size2" ]; then
        print_issue "WARNING" "Plans de refactorisation CSS identiques ($size1 lignes chacun)"
    else
        print_issue "INFO" "Plans de refactorisation CSS de tailles diff√©rentes ($size1 vs $size2 lignes)"
    fi
fi

echo ""
echo "üìä 4. D√âTECTION D'INFORMATIONS OBSOL√àTES"
echo "========================================"

echo "üîç V√©rification de l'actualit√© des informations:"

# V√©rifier les dates dans les fichiers archiv√©s
echo "üì¶ Fichiers archiv√©s avec dates:"
for doc in docs/archive/*css*; do
    if [ -f "$doc" ]; then
        first_line=$(head -n5 "$doc" | grep -E "cr√©√©|Archiv√©|obsol√®te" || echo "")
        if [ -n "$first_line" ]; then
            echo "   üìÑ $(basename "$doc"): $first_line"
        fi
    fi
done

# V√©rifier les classes CSS document√©es vs r√©elles
echo ""
echo "üîç V√©rification des classes CSS document√©es:"

# Classes typographiques
if grep -q "tc-h1" src/styles/base/typography.css; then
    print_success "Classes tc-h1, tc-h2, tc-h3 existent dans le code"
else
    print_issue "ERROR" "Classes typographiques document√©es mais introuvables"
fi

# Variables breakpoints
if grep -q "tc-breakpoint" src/styles/base/variables.css; then
    print_success "Variables breakpoints --tc-breakpoint-* existent"
else
    print_issue "WARNING" "Variables breakpoints document√©es mais √† v√©rifier"
fi

echo ""
echo "üìä 5. COH√âRENCE ENTRE GUIDES"
echo "============================"

echo "üîç Comparaison des guides principaux:"

# Comparer les approches document√©es
guide_std=$(grep -c "CSS Modules" docs/css/GUIDE_STANDARDISATION_CSS.md || echo "0")
guide_style=$(grep -c "CSS Modules" docs/standards/CSS_STYLE_GUIDE.md || echo "0")

if [ "$guide_std" -gt 0 ] && [ "$guide_style" -gt 0 ]; then
    print_success "Approche CSS Modules coh√©rente entre les guides"
else
    print_issue "WARNING" "Incoh√©rence possible sur l'approche CSS Modules"
fi

# V√©rifier les pr√©fixes variables
prefix_std=$(grep -c -- "--tc-" docs/css/GUIDE_STANDARDISATION_CSS.md || echo "0")
prefix_style=$(grep -c -- "--tc-" docs/standards/CSS_STYLE_GUIDE.md || echo "0")

if [ "$prefix_std" -gt 0 ] && [ "$prefix_style" -gt 0 ]; then
    print_success "Pr√©fixe --tc- coh√©rent entre les guides"
else
    print_issue "WARNING" "Incoh√©rence possible sur le pr√©fixe des variables"
fi

echo ""
echo "üìä 6. ARCHITECTURE R√âELLE VS DOCUMENT√âE"
echo "======================================="

echo "üîç V√©rification de la correspondance:"

# Comparer structure document√©e vs r√©elle
doc_structure="docs/css/ARCHITECTURE_CSS.md"
if [ -f "$doc_structure" ]; then
    if grep -q "src/styles/base/" "$doc_structure"; then
        print_success "Structure src/styles/base/ correctement document√©e"
    fi
    
    if grep -q "src/styles/components/" "$doc_structure"; then
        print_success "Structure src/styles/components/ correctement document√©e"
    fi
    
    if grep -q "src/styles/mixins/" "$doc_structure"; then
        if [ -d "src/styles/mixins" ]; then
            print_success "Structure src/styles/mixins/ existe et document√©e"
        else
            print_issue "WARNING" "Structure mixins/ document√©e mais dossier inexistant"
        fi
    fi
fi

echo ""
echo "üéØ RECOMMANDATIONS D'ORGANISATION"
echo "================================="

echo "üìã Plan de r√©organisation propos√©:"

if [ "$ISSUES_FOUND" -gt 5 ]; then
    echo ""
    echo -e "${RED}üö® R√âORGANISATION MAJEURE N√âCESSAIRE${NC}"
    echo "1. üìÅ Consolider guides CSS en un seul guide principal"
    echo "2. üóëÔ∏è  Supprimer doublons et fichiers obsol√®tes"
    echo "3. ‚úÖ Corriger incoh√©rences documentation vs code"
    echo "4. üìù Mettre √† jour r√©f√©rences et liens"
    
elif [ "$ISSUES_FOUND" -gt 2 ]; then
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  R√âORGANISATION MINEURE RECOMMAND√âE${NC}"
    echo "1. üîß Corriger incoh√©rences mineures"
    echo "2. üìù Mettre √† jour informations obsol√®tes"
    echo "3. üîó Synchroniser guides principaux"
    
else
    echo ""
    echo -e "${GREEN}‚úÖ ORGANISATION GLOBALEMENT BONNE${NC}"
    echo "1. üîç Audit p√©riodique recommand√©"
    echo "2. üìù Mises √† jour ponctuelles"
fi

echo ""
echo "üéØ STRUCTURE CIBLE RECOMMAND√âE"
echo "=============================="

echo "üìÅ Structure de documentation CSS optimale:"
echo "docs/css/"
echo "‚îú‚îÄ‚îÄ üìÑ README.md                    # Index principal"
echo "‚îú‚îÄ‚îÄ üìÑ GUIDE_COMPLET_CSS.md         # Guide unique consolid√©"
echo "‚îú‚îÄ‚îÄ üìÑ ARCHITECTURE.md              # Architecture technique"
echo "‚îú‚îÄ‚îÄ üìÑ MIGRATION_GUIDE.md           # Guide de migration/outils"
echo "‚îî‚îÄ‚îÄ üìÅ examples/                    # Exemples de composants"
echo ""
echo "docs/archive/css/                   # Archives organis√©es"
echo "‚îú‚îÄ‚îÄ üìÑ audit_reports_*.md           # Rapports d'audit"
echo "‚îî‚îÄ‚îÄ üìÑ refactoring_plans_*.md       # Plans historiques"

echo ""
echo "üìä R√âSUM√â FINAL"
echo "==============="

if [ "$ISSUES_FOUND" -eq 0 ]; then
    echo -e "${GREEN}üéâ PARFAIT! Aucun probl√®me d'organisation d√©tect√©${NC}"
elif [ "$ISSUES_FOUND" -lt 3 ]; then
    echo -e "${YELLOW}üëç BON! $ISSUES_FOUND probl√®mes mineurs √† corriger${NC}"
elif [ "$ISSUES_FOUND" -lt 6 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  MOYEN! $ISSUES_FOUND probl√®mes √† traiter${NC}"
else
    echo -e "${RED}‚ùå ATTENTION! $ISSUES_FOUND probl√®mes majeurs d√©tect√©s${NC}"
fi

echo ""
echo "üéØ Prochaines actions recommand√©es:"
echo "1. üìù Corriger les incoh√©rences d√©tect√©es"
echo "2. üóëÔ∏è  Nettoyer les doublons et fichiers obsol√®tes"
echo "3. üìÅ R√©organiser selon la structure cible"
echo "4. üîó Mettre √† jour tous les liens internes"

echo ""
echo "üìÖ Audit termin√© le $(date)" 
#!/bin/bash

# Script de mise en place de l'environnement de dÃ©veloppement pour TourCraft
# Ce script configure l'application pour fonctionner en mode dÃ©veloppement local
# sans affecter l'environnement de production.

# Couleurs pour les messages
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages d'information
info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Fonction pour afficher les messages de succÃ¨s
success() {
    echo -e "${GREEN}[SUCCÃˆS]${NC} $1"
}

# Fonction pour afficher les avertissements
warning() {
    echo -e "${YELLOW}[ATTENTION]${NC} $1"
}

# Fonction pour afficher les erreurs
error() {
    echo -e "${RED}[ERREUR]${NC} $1"
}

# Fonction pour vÃ©rifier si une commande existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# VÃ©rification des prÃ©requis
check_prerequisites() {
    info "VÃ©rification des prÃ©requis..."
    
    # VÃ©rifier Node.js
    if ! command_exists node; then
        error "Node.js n'est pas installÃ©. Veuillez l'installer avant de continuer."
        exit 1
    fi
    
    NODE_VERSION=$(node -v | cut -d 'v' -f 2)
    NODE_MAJOR=$(echo $NODE_VERSION | cut -d '.' -f 1)
    
    if [ "$NODE_MAJOR" -lt 18 ]; then
        warning "Version de Node.js dÃ©tectÃ©e: $NODE_VERSION. La version recommandÃ©e est 18.x ou supÃ©rieure."
        read -p "Voulez-vous continuer quand mÃªme? (o/n): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Oo]$ ]]; then
            exit 1
        fi
    else
        success "Version de Node.js compatible dÃ©tectÃ©e: $NODE_VERSION"
    fi
    
    # VÃ©rifier npm
    if ! command_exists npm; then
        error "npm n'est pas installÃ©. Veuillez l'installer avant de continuer."
        exit 1
    fi
    
    success "Tous les prÃ©requis sont satisfaits."
}

# Fonction pour sauvegarder les fichiers de configuration existants
backup_config_files() {
    info "Sauvegarde des fichiers de configuration existants..."
    
    BACKUP_DIR="./config_backup_$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$BACKUP_DIR"
    
    # Sauvegarder les fichiers .env s'ils existent
    if [ -f .env ]; then
        cp .env "$BACKUP_DIR/.env.backup"
    fi
    
    if [ -f .env.development ]; then
        cp .env.development "$BACKUP_DIR/.env.development.backup"
    fi
    
    if [ -f .env.production ]; then
        cp .env.production "$BACKUP_DIR/.env.production.backup"
    fi
    
    success "Sauvegarde effectuÃ©e dans le rÃ©pertoire $BACKUP_DIR"
}

# Fonction pour configurer les fichiers d'environnement
setup_env_files() {
    info "Configuration des fichiers d'environnement..."
    
    # CrÃ©er ou mettre Ã  jour .env.development pour le mode local
    cat > .env.development << EOL
# Configuration pour le mode dÃ©veloppement hors ligne
REACT_APP_MODE=local
REACT_APP_BYPASS_AUTH=true
REACT_APP_USE_MOCK_DATA=true
REACT_APP_DEMO_DATA=true

# Variables Firebase non utilisÃ©es en mode local mais dÃ©finies pour Ã©viter des erreurs
REACT_APP_FIREBASE_API_KEY=dev-placeholder
REACT_APP_FIREBASE_AUTH_DOMAIN=dev-placeholder
REACT_APP_FIREBASE_PROJECT_ID=dev-placeholder
REACT_APP_FIREBASE_STORAGE_BUCKET=dev-placeholder
REACT_APP_FIREBASE_MESSAGING_SENDER_ID=dev-placeholder
REACT_APP_FIREBASE_APP_ID=dev-placeholder
EOL
    
    # CrÃ©er un fichier .env qui pointe vers le mode dÃ©veloppement
    cat > .env << EOL
# Fichier .env principal - pointe vers l'environnement de dÃ©veloppement
# Pour passer en production, remplacer par .env.production
REACT_APP_MODE=local
REACT_APP_BYPASS_AUTH=true
REACT_APP_USE_MOCK_DATA=true
REACT_APP_DEMO_DATA=true
EOL
    
    success "Fichiers d'environnement configurÃ©s avec succÃ¨s."
}

# Fonction pour mettre Ã  jour le fichier package.json avec les scripts nÃ©cessaires
update_package_json() {
    info "Mise Ã  jour des scripts dans package.json..."
    
    # VÃ©rifier si jq est installÃ©
    if ! command_exists jq; then
        warning "L'outil jq n'est pas installÃ©. Mise Ã  jour manuelle de package.json..."
        echo "Veuillez ajouter les scripts suivants Ã  votre package.json:"
        echo "\"start:local\": \"env-cmd -f .env.development craco start\","
        echo "\"build:local\": \"env-cmd -f .env.development craco build\","
        echo "\"start:prod\": \"env-cmd -f .env.production craco start\","
        echo "\"build:prod\": \"env-cmd -f .env.production craco build\","
    else
        # Sauvegarder l'original
        cp package.json package.json.backup
        
        # Ajouter les scripts avec jq
        jq '.scripts += {
            "start:local": "env-cmd -f .env.development craco start",
            "build:local": "env-cmd -f .env.development craco build",
            "start:prod": "env-cmd -f .env.production craco start",
            "build:prod": "env-cmd -f .env.production craco build"
        }' package.json > package.json.tmp && mv package.json.tmp package.json
        
        success "Scripts ajoutÃ©s avec succÃ¨s Ã  package.json"
    fi
    
    # Installer env-cmd si nÃ©cessaire
    info "Installation du package env-cmd..."
    npm install --save-dev env-cmd
}

# Fonction pour corriger la syntaxe TypeScript dans firebaseInit.js
fix_firebase_init() {
    info "VÃ©rification et correction de firebaseInit.js..."
    
    # Chemin du fichier
    FIREBASE_INIT="./src/firebaseInit.js"
    
    # VÃ©rifier si le fichier contient la syntaxe TypeScript problÃ©matique
    if grep -q "as collection" "$FIREBASE_INIT"; then
        info "Correction de la syntaxe TypeScript dans firebaseInit.js..."
        
        # Sauvegarder l'original
        cp "$FIREBASE_INIT" "${FIREBASE_INIT}.backup"
        
        # Remplacer la section problÃ©matique
        sed -i '/\/\/ Export des Ã©lÃ©ments individuels/,/\/\/ Auth exports/c\
// Export des Ã©lÃ©ments individuels, conditionnÃ©s selon le mode\
// DÃ©finir les exports conditionnels\
const exportCollection = IS_LOCAL_MODE ? localDB.collection : collection;\
const exportDoc = IS_LOCAL_MODE ? localDB.doc : doc;\
const exportGetDoc = IS_LOCAL_MODE ? localDB.getDoc : enhancedGetDoc;\
const exportGetDocs = IS_LOCAL_MODE ? localDB.getDocs : enhancedGetDocs;\
const exportSetDoc = IS_LOCAL_MODE ? localDB.setDoc : setDoc;\
const exportAddDoc = IS_LOCAL_MODE ? localDB.addDoc : addDoc;\
const exportUpdateDoc = IS_LOCAL_MODE ? localDB.updateDoc : updateDoc;\
const exportDeleteDoc = IS_LOCAL_MODE ? localDB.deleteDoc : deleteDoc;\
const exportQuery = IS_LOCAL_MODE ? localDB.query : query;\
const exportWhere = IS_LOCAL_MODE ? localDB.where : where;\
const exportOrderBy = IS_LOCAL_MODE ? localDB.orderBy : orderBy;\
const exportLimit = IS_LOCAL_MODE ? localDB.limit : limit;\
const exportStartAfter = IS_LOCAL_MODE ? localDB.startAfter : startAfter;\
const exportServerTimestamp = IS_LOCAL_MODE ? localDB.serverTimestamp : serverTimestamp;\
const exportArrayUnion = IS_LOCAL_MODE ? localDB.arrayUnion : arrayUnion;\
const exportArrayRemove = IS_LOCAL_MODE ? localDB.arrayRemove : arrayRemove;\
const exportTimestamp = IS_LOCAL_MODE ? localDB.Timestamp : Timestamp;\
\
export {\
  db,\
  auth,\
  storage,\
  remoteConfig,\
  BYPASS_AUTH,\
  IS_LOCAL_MODE,\
  // Exporter les bonnes fonctions selon le mode\
  exportCollection as collection,\
  exportDoc as doc,\
  exportGetDoc as getDoc,\
  exportGetDocs as getDocs,\
  exportSetDoc as setDoc,\
  exportAddDoc as addDoc,\
  exportUpdateDoc as updateDoc,\
  exportDeleteDoc as deleteDoc,\
  exportQuery as query,\
  exportWhere as where,\
  exportOrderBy as orderBy,\
  exportLimit as limit,\
  exportStartAfter as startAfter,\
  exportServerTimestamp as serverTimestamp,\
  exportArrayUnion as arrayUnion,\
  exportArrayRemove as arrayRemove,\
  exportTimestamp as Timestamp,\
  // Auth exports' "$FIREBASE_INIT"
        
        success "Correction de firebaseInit.js effectuÃ©e avec succÃ¨s."
    else
        success "Aucune correction nÃ©cessaire dans firebaseInit.js."
    fi
}

# Fonction pour crÃ©er un composant EnvironmentBanner
create_environment_banner() {
    info "CrÃ©ation du composant EnvironmentBanner..."
    
    # CrÃ©er le rÃ©pertoire si nÃ©cessaire
    mkdir -p ./src/components/common
    
    # CrÃ©er le fichier du composant
    cat > ./src/components/common/EnvironmentBanner.js << EOL
import React from 'react';
import { CURRENT_MODE } from '../../firebaseInit';
import './EnvironmentBanner.css';

/**
 * Composant qui affiche une banniÃ¨re indiquant l'environnement actuel
 * Ne s'affiche pas en production
 */
const EnvironmentBanner = () => {
  if (CURRENT_MODE === 'production') return null;
  
  const bannerText = CURRENT_MODE === 'local' ? 
    'ðŸ”Œ MODE HORS LIGNE' : 
    'ðŸ§ª ENVIRONNEMENT DE DÃ‰VELOPPEMENT';
    
  return (
    <div className={\`environment-banner environment-\${CURRENT_MODE}\`}>
      {bannerText}
    </div>
  );
};

export default EnvironmentBanner;
EOL
    
    # CrÃ©er le fichier CSS associÃ©
    cat > ./src/components/common/EnvironmentBanner.css << EOL
.environment-banner {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  padding: 8px;
  text-align: center;
  font-weight: bold;
  z-index: 9999;
  font-size: 14px;
}

.environment-local {
  background-color: #ff9800;
  color: #000;
}

.environment-development {
  background-color: #2196f3;
  color: #fff;
}
EOL
    
    success "Composant EnvironmentBanner crÃ©Ã© avec succÃ¨s."
    
    # VÃ©rifier si App.js existe pour suggÃ©rer l'intÃ©gration
    if [ -f ./src/App.js ]; then
        info "Pour intÃ©grer la banniÃ¨re, ajoutez le composant dans App.js:"
        echo "import EnvironmentBanner from './components/common/EnvironmentBanner';"
        echo "// Et ajoutez <EnvironmentBanner /> Ã  la fin du JSX de retour"
    fi
}

# Fonction pour installer les dÃ©pendances
install_dependencies() {
    info "Installation des dÃ©pendances..."
    npm install
    success "DÃ©pendances installÃ©es avec succÃ¨s."
}

# Fonction principale
main() {
    echo "========================================================"
    echo "  Configuration de l'environnement de dÃ©veloppement"
    echo "  pour l'application TourCraft"
    echo "========================================================"
    echo
    
    # VÃ©rifier les prÃ©requis
    check_prerequisites
    
    # Sauvegarder les fichiers de configuration
    backup_config_files
    
    # Configurer les fichiers d'environnement
    setup_env_files
    
    # Mettre Ã  jour package.json
    update_package_json
    
    # Corriger firebaseInit.js
    fix_firebase_init
    
    # CrÃ©er le composant EnvironmentBanner
    create_environment_banner
    
    # Installer les dÃ©pendances
    install_dependencies
    
    echo
    echo "========================================================"
    success "Configuration de l'environnement de dÃ©veloppement terminÃ©e!"
    echo "========================================================"
    echo
    info "Pour dÃ©marrer l'application en mode dÃ©veloppement local:"
    echo "  npm run start:local"
    echo
    info "Pour construire l'application en mode dÃ©veloppement local:"
    echo "  npm run build:local"
    echo
    warning "N'oubliez pas que ce mode est complÃ¨tement isolÃ© de la production."
    echo "Aucune donnÃ©e rÃ©elle ne sera affectÃ©e."
    echo
}

# ExÃ©cuter la fonction principale
main
